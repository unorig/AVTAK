.const Joy_Left_Right = $0339
.const Joy_Up_Down = $033a
.const Joy_Fire = $033b

.const X_axis_low_byte = $1b04
.const X_axis_high_byte = $1b05
.const Y_axis_low_byte = $1b06

.const Second_Menu_Position = $02

.const num_codes_entered = $1b78

.const active_input_mode_low = $fb 
.const active_input_mode_high = $fc             
                                            // Movement (4242)
                                            // Menu 1   (357f)
                                            // Menu 2   (4177)
                                            
                                            // Examine - found XXX (10)
                                            // Examine - found grappling hook (16)
                                            // Examine - found dynamite (32)
                                            // Examine - found dynamite (6c)

.const second_menu_high_byte = $af
.const second_menu_low_byte = $ae


* = $00

            rla l0136
            tax
            lda ($91),y
            lax ($22),y
            jam
            brk
            brk
            brk
            brk
            brk
            brk
            brk
            brk
            brk
            brk
            brk
            clc                             // Clear carry flag
            php


l016:
            ora l0016,y
            asl
            ror $a3,x
            brk
            brk
            brk
            brk
            brk
            brk
            rti

.byte $a3, $b3, $bd, $00, $00, $00, $00, $00, $01, $08, $e1, $94, $29, $5a, $29, $5a, $00, $a0, $00, $00, $00, $a0, $c4, $07, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $00, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $4c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8c, $00, $00, $08, $18, $00, $00, $00, $8c, $81, $60, $00, $00, $00, $00, $00, $80, $a3, $e6, $7a, $d0, $02, $e6, $7b, $ad, $0b, $08, $c9, $3a, $b0, $0a, $c9, $20, $f0, $ef, $38, $e9, $30, $38, $e9, $d0, $60, $80, $4f, $c7, $52, $58, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00, $00, $80, $00, $00, $00, $0f, $37, $02, $00, $00, $09, $00, $13, $00, $00, $00, $00, $05, $00, $0a, $00, $00, $3c, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $30, $fd, $40, $00, $00, $05, $00, $04, $40, $01, $02, $20, $00, $00, $48, $07, $1a, $00, $27, $15, $8e, $00, $a0, $16, $84, $84, $00, $2a, $15, $35, $40, $85, $85, $85, $85, $86, $86, $86, $86, $f9, $86, $86, $87, $87, $87, $87, $87, $87, $48, $db, $81, $eb, $e7, $07, $00, $20, $42, $42, $00, $52, $02

l0100:
            sei
            lda #$34
            nop                             // No operation $fc
            clc                             // Clear carry flag
            sre ($25,x)
            sbc ($85,x)
            ldx l94a9
            sta second_menu_high_byte
            lda #$00
            sta $ac
            sta $ad


l0115:
            lda $ac
            bne l011b
            dec $ad


l011b:
            dec $ac
            lda $ae
            bne l0123
            dec second_menu_high_byte


l0123:
            dec $ae
            lda ($ae),y
            sta ($ac),y
            lda $ae
            cmp #$be
            bne l0115
            lda second_menu_high_byte
            cmp #$08
            bne l0115
            lda #$00
            sta $ae
            lda #$09
            sta second_menu_high_byte


l013d:
            lda ($ac),y
            cmp #$bf
            bne l0155
            jsr l0178
            lda ($ac),y
            tax
            lda #$00


l014b:
            sta ($ae),y
            jsr l017f
            dex                             // Decrease X
            bne l014b
            beq l016b


l0155:
            cmp #$cf
            bne l0166
            jsr l0178
            lda ($ac),y
            tax
            jsr l0178
            lda ($ac),y
            bne l014b


l0166:
            sta ($ae),y
            jsr l017f


l016b:
            jsr l0178
            bne l013d
            lda #$37
            sta $01
            cli
            jmp l5660


l0178:
            inc $ac
            bne l017e
            inc $ad


l017e:
            rts


l017f:
            inc $ae
            bne l0185
            inc second_menu_high_byte


l0185:
            rts

.byte $ae, $25, $1b, $f0, $3f, $ca, $f0, $0a, $ca, $f0, $12, $ca, $f0, $13, $ca, $f0, $1b, $60, $ae, $28, $1b, $e8, $8a, $29, $07, $8d, $28, $1b, $60, $ee, $28, $1b, $60, $ae, $28, $1b, $e8, $8a, $29, $03, $8d, $28, $1b, $60, $ae, $28, $1b, $ad, $27, $1b, $f0, $0b, $c9, $01, $f0, $08, $e8, $8a, $29, $07, $8d, $28, $1b, $60, $ca, $4c, $39, $09, $4c, $6e, $09, $d0, $f6, $a9, $07, $8d, $66, $1b, $ad, $65, $1b, $ae, $28, $1b, $c9, $01, $d0, $0b, $ca, $d0, $04, $5a, $7c, $09, $02, $5a, $7c, $02, $5a, $7c, $09, $04, $5a, $7c, $09, $7c, $8b, $22, $7a, $10, $09, $7c, $8b, $22, $7a, $10, $f7, $02, $00, $aa0, $00, $02, $0e

l0288:

.byte $04

l0289:

.byte $0a, $00

l028b:

.byte $04

l028c:

.byte $10

l028d:

.byte $00

l028e:

.byte $00, $48, $eb

l0291:

.byteb, $e3, $83, $a4, $7c, $a5, $1a, $a7, $e4, $a7, $86, $ae, $00, $00, $00, $00, $4c, $48, $b2, $00

l0314:

.byte $22

l0315:

.byte $10

l0316:

.byte $64

l0317:

.byte $17

l0318:

.byte $64

l0319:

.byte $17, $4a, $f3, $91, $f2, $0e, $f2, $50, $f2, $33, $f3, $57, $f1, $ca, $f1, $ed, $f6, $3e, $f1, $2f, $f3, $66, $fe, $a5, $f4, $ed, $f5

l0334:

.byte $c9

l0335:

.byte $4f, $85, $a7

l0338:
            brk


Joy_Left_Right:

.byte $00                                   // $0339. Left = #ff / right = 01

Joy_Up_Down:

.byte $00                                   // $033a. Up = #ff / down = 01

Joy_Fire:

.byte $00                                   // $033b. Fire = 01

l033c:
            asl $fa
            rol
            rol $a7
            dec active_input_mode_low
            dex                             // Decrease X
            bne l0338
            tay                             // Transfer A to Y
            rts

.byte $48, $b1, $fe, $85, $fa, $a9, $08, $85, $fb, $68, $a4, $fe, $d0, $02, $c6, $ff, $c6, $fe, $c0, $e7, $d0, $de, $a4, $ff, $c0, $07, $d0, $d8, $a9, $37, $85, $01, $58, $4c, $13, $08, $a4, $a8, $f0, $22, $a5, $f7, $38, $e5, $a8, $b0, $03, $c6, $f8, $38, $85, $f7, $a5, $fc, $e5, $a8, $b0, $02, $c6, $fd, $85, $fc, $b1, $f7, $88, $91, $fc, $98, $d0, $f8, $c4, $a9, $f0, $0a, $b1, $f7, $c6, $fd, $c6, $f8, $c6, $a9, $10, $ec, $e6, $01, $ce, $20, $d0, $c6, $01, $60, $00, $11, $08, $c1, $07, $9e, $32, $30, $36, $37, $20, $4d, $41, $47, $49, $43, $00, $00, $00, $ec, $09, $15, $1e, $04, $1b, $01, $ea, $ea, $ea, $a2, $00, $bd, $38, $08, $9d, $c4, $11, $e8, $d0, $f7, $a2, $ff, $9a, $4c, $00, $01, $78, $a9, $34, $94, $bb, $41, $29, $e1, $4c, $4b, $94, $d3, $02, $25, $ac, $85, $ad, $a5, $a5, $58, $c6, $ad, $c6, $b7, $50, $68, $c6, $af, $c6, $ae, $b1, $ae, $91, $ac, $a5, $ae, $c9, $be, $00, $00, $00, $00, $00, $00

l03fe:

.byte $06

l03ff:

.byte $07, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $10, $12, $05, $13, $13, $20, $06, $09, $12, $05, $20, $14, $0f, $20, $13, $14, $01, $12, $14, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $17, $05, $0c, $03, $0f, $0d, $05, $20, $30, $30, $37, $2e, $2e, $2ef, $15, $20, $01, $12, $05, $20, $09, $0e, $20, $01, $20, $04, $09, $13, $15, $13, $05, $04, $20, $0d, $09, $0e, $05, $20, $15, $0e, $04, $05, $12, $20, $20, $20, $20, $20, $20, $20, $20, $20, $13, $09, $0c, $09, $03, $0f, $0e, $20, $16, $01, $0c, $0c, $05, $19, $2e, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $14, $08, $05, $20, $05, $16, $09, $0c, $20, $0d, $01, $18, $20, $1a, $0f, $12, $09, $0e, $20, $08, $01, $13, $20, $10, $0c, $01, $0e, $14, $05, $04, $20, $01, $20, $02, $0f, $0d, $02, $20, $20, $20, $17, $08, $09, $03, $08, $20, $19, $0f, $15, $20, $0d, $15, $13, $14, $20, $04, $05, $06, $15, $13, $05, $20, $02, $19, $20, $15, $13, $09, $0e, $07, $20, $14, $08, $05, $20, $20, $20, $20, $20, $20, $03, $0f, $04, $05, $20, $0e, $15, $0d, $02, $05, $12, $13, $20, $19, $0f, $15, $20, $17, $09, $0c, $0c, $20, $06, $09, $0e, $04, $2e, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $19, $0f, $15, $20, $17, $09, $0c, $0c, $20, $01, $0c, $13, $0f, $20, $0e, $05, $05, $04, $20, $14, $08, $05, $20, $08, $05, $0c, $10, $20, $0f, $06, $20, $0d, $01, $19, $04, $01, $19, $20, $20, $20, $17, $08, $0f, $20, $09, $13, $20, $14, $12, $01, $10, $10, $05, $04, $20, $13, $0f, $0d, $05, $17, $08, $05, $12, $05, $20, $09, $0e, $20, $14, $08, $05, $20, $0d, $09, $0e, $05, $2e, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $0d, $09, $13, $13, $09, $0f, $0e, $20, $03, $0f, $04, $05, $20, $20, $3a, $01, $16, $14, $01, $0b, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $03, $0c, $01, $13, $13, $09, $06, $09, $03, $01, $14, $09, $0f, $0e, $3a, $14, $0f, $10, $20, $13, $05, $03, $12, $05, $14, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $00, $11, $08, $c1, $07, $9e, $32, $30, $36, $37, $20, $4d, $41, $47, $49, $43, $00, $00, $00, $ec, $09, $15, $1e, $04, $00, $11, $08, $c1, $07, $9e, $32, $30, $36, $37, $20, $4d, $41, $47, $49, $43, $00, $00, $00

l0813:
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            ldx #$00


l0829:
            lda l0838,x
            sta l0100,x
            inx                             // Increase X
            bne l0829
            ldx #$ff
            txs
            jmp l0100


l0838:

.byte $78, $a9, $34, $85, $01, $a0, $00, $a9, $e1, $85, $ae, $a9, $94, $85, $af, $a9, $00, $85, $ac, $85, $ad, $a5, $ac, $d0, $02, $c6, $ad, $c6, $ac, $a5, $ae, $d0, $02, $c6, $af, $c6, $ae, $b1, $ae, $91, $ac, $a5, $ae, $c9, $be, $d0, $e6, $a5, $af, $c9, $08, $d0, $e0, $a9, $00, $85, $ae, $a9, $09, $85, $af, $b1, $ac, $c9, $bf, $d0, $12, $20, $78, $01, $b1, $ac, $aa, $a9, $00, $91, $ae, $20, $7f, $01, $ca, $d0, $f8, $f0, $16, $c9, $cf, $d0, $0d, $20, $78, $01, $b1, $ac, $aa, $20, $78, $01, $b1, $ac, $d0, $e5, $91, $ae, $20, $7f, $01, $20, $78, $01, $d0, $cd, $a9, $37, $85, $01, $58, $4c, $60, $56, $e6, $ac, $d0, $02, $e6, $ad, $60, $e6, $ae, $d0, $02, $e6, $af, $60, $ae, $25, $1b, $f0, $3f, $ca, $f0, $0a, $ca, $f0, $12, $ca, $f0, $13, $ca, $f0, $1b, $60, $ae, $28, $1b, $e8, $8a, $29, $07, $8d, $28, $1b, $60, $ee, $28, $1b, $60, $ae, $28, $1b, $e8, $8a, $29, $03, $8d, $28, $1b, $60, $ae, $28, $1b, $ad, $27, $1b, $f0, $0b, $c9, $01, $f0, $08, $e8, $8a, $29, $07, $8d, $28, $1b, $60, $ca, $4c

l0900:
            ldx Character_action            // (0900) Character movement. 00 = Standing, 01 = moving (left / right) / 02 = Jumping / 03 = falling / 04 = climbing / 05 = crouching    
            beq l0944                       // (0000) Branch to $2735 as no movement detected.
            dex                             // Decrease X to check if character is moving.
            beq l0912                       // (0000) Branch to $273b as character is moving (left / right).
            dex                             // Decrease X to check if character is jumping.
            beq l091d                       // (0000) Branch to $2747 as character is jumping. 
            dex                             // Decrease X to check if character is falling.
            beq l0921                       // (0000) Branch to $2741 as character is falling.
            dex                             // Decrease X to check if character is climbing.
            beq l092c                       // (0000) Branch to $274d as character is climbing.
            rts


l0912:
            ldx l1b28
            inx                             // Increase X
            txa
            and #$07
            sta l1b28
            rts


l091d:
            inc l1b28
            rts


l0921:
            ldx l1b28
            inx                             // Increase X
            txa
            and #$03
            sta l1b28
            rts


l092c:
            ldx l1b28
            lda l1b27
            beq l093f
            cmp #$01
            beq l0940
            inx                             // Increase X


l0939:
            txa
            and #$07
            sta l1b28


l093f:
            rts


l0940:
            dex                             // Decrease X
            jmp l0939


l0944:
            jmp l096e


l0947:
            bne l093f

.byte $a9, $07, $8d, $66, $1b, $ad, $65, $1b, $ae, $28, $1b, $c9, $01, $d0, $0b, $ca, $d0, $03, $ee, $65, $1b, $8a, $8d, $28, $1b, $60, $e8, $e0, $02, $d0, $f6, $ce, $65, $1b, $4c, $5e, $09

l096e:
            lda l1b28
            cmp #$03
            bcc l097a
            lda #$01                    // Load A with #01
            sta l1b28


l097a:
            dec l1b66
            jmp l0947

.byte $11, $2c, $a2, $00, $9b, $09, $09, $20, $cc, $ff, $a9, $07, $20, $c3, $ff, $18, $ad, $80, $0a, $65, $fb, $85, $fb, $a5, $fc, $69, $00, $12, $0a, $a9, $0d, $20, $d2, $ff, $20, $3a, $0a, $a2, $18, $20, $ad, $09, $4c, $91, $e3, $8e, $6c, $0a, $ae, $6c, $0a, $bd, $81, $0a, $08, $29, $7f, $20, $d2, $ff, $ee, $6c, $0a, $28, $10, $ee, $60, $c9, $3a, $08, $29, $0f, $28, $90, $02, $69, $08, $60, $20, $cf, $ff, $48, $a5, $90, $f0, $04, $c9, $40, $d0, $02, $68, $60, $68, $68, $68, $68, $68, $4c, $76, $09, $18, $6d, $65, $0a, $8d, $65, $0a, $90, $03, $ee, $66, $0a, $60, $20, $ce, $09, $c9, $0d, $f0, $14, $c9, $20, $f0, $12, $20, $18, $0a, $90

l0a00:
            sei

.byte $a9, $00, $8d, $20, $d0, $8d, $21, $d0, $a9, $17, $8d, $18, $d0, $a9, $04, $8d, $88, $02, $ad, $02, $dd, $09, $03, $8d, $02, $dd, $ad, $00, $dd, $29, $fc, $09, $03, $8d, $00, $dd, $a0, $00, $a9, $20, $99, $00, $04, $99, $00, $05, $a9, $01, $99, $00, $d8, $99, $50, $d8, $88, $d0, $ed, $8c, $15, $d0, $ea, $a0, $00, $b9, $50, $0a, $c9, $ff, $f0, $06, $99, $28, $04, $c8, $d0, $f3, $4c, $4d, $0a, $20, $20, $20, $20, $20, $20, $20, $20, $20, $43, $4f, $4e, $47, $52, $41, $54, $55, $4c, $41, $54, $49, $4f, $4e, $53, $20, $30, $30, $37, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $4d, $49, $53, $53, $49, $4f, $4e, $20, $43, $4f, $4d, $50, $4c, $45, $54, $45, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $59, $4f, $55, $52, $20, $43, $4f, $44, $45, $20, $46, $4f, $52, $20, $54, $48, $45, $20, $4e, $45, $58, $54, $20, $50, $52, $4f, $47, $52, $41, $4d, $20, $49, $53, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $49, $4c, $56, $43, $54, $20, $ff, $ff, $ff, $7e, $40, $a6, $40, $fa, $40, $23, $41, $77, $41, $08, $89, $00, $a0, $d4, $20, $68, $0c, $20, $91, $0c, $20, $21, $1d, $4c, $29, $00, $29, $00, $20, $08, $a0, $0d, $20, $20, $69, $80, $49, $8d, $08, $09, $a9, $10, $09, $00, $09, $80, $09, $80, $08, $88, $00, $00, $09, $40, $48, $f4, $40, $4e, $45, $53, $0d, $0d, $0d, $ca, $45, $58, $20, $4f, $06, $c3, $03, $c7, $14, $60, $28, $53, $12, $e2, $09, $46, $20, $4e, $4d, $4e, $05, $29, $20, $3f, $20, $4d, $4d, $52, $0a, $45, $03, $54, $20, $46, $49, $4c, $05, $20, $0e, $41, $4d, $45, $20, $7f, $a0, $aa, $aa, $aa, $28, $ea, $28, $40, $bf, $c2, $bf, $f9, $cf, $bf, $db, $ff, $e8, $bf, $02, $bf, $40, $bf, $e2, $dd, $82, $bf, $02, $bf, $40, $20, $c0, $bf, $82, $be, $00, $bf, $40, $bf, $40, $bf, $00, $31, $00, $bf, $40, $bd, $40, $3f, $82, $0f, $87, $16, $40, $ff, $cd, $4e, $08, $ac, $4d, $bf, $40, $1c, $c0, $ff, $a2, $00, $b3, $bf, $60, $df, $20, $ff, $40, $bf, $c2, $bf, $0f, $bf, $02, $bf, $44, $1d, $c2, $3d, $00, $bf, $07, $1d, $f0, $2d, $c2, $2d, $c3, $16, $c7, $06, $d0, $1c, $e6, $17, $d2, $9a, $a0, $8c, $40, $ff, $40, $ff, $c3, $bf, $ab, $bf, $e8, $a2, $48, $20, $00, $ab, $a2, $bf, $e2, $eb, $20, $0e, $a2, $bd, $ff, $9b, $c0, $ff, $60, $fe, $a6, $b6, $ae, $9f, $40, $3d, $40, $04, $b0, $40, $24, $40, $28, $00, $bf, $00, $7d, $40, $18, $ed, $bf, $00, $bf, $00, $7d, $61, $21, $40, $bf, $a9, $bf, $00, $7d, $40, $7d, $40, $bf, $28, $bf, $00, $7d, $40, $3d, $40, $bf, $0c, $20, $41, $7d, $40, $2d, $4c, $a9, $00, $85, $00, $3d, $47, $7d, $40, $08, $8d, $28, $00, $0d, $40, $dd, $40, $bf, $00, $bf, $40, $b0, $00, $bf, $00, $7d, $cd, $35, $40, $9f, $00, $a2, $00, $0c, $40, $35, $42, $3f, $cb, $8e, $c8, $09, $cc, $04, $49, $a9, $30, $a0, $03, $7f, $40, $7f, $40, $90, $fa, $a9, $00, $0d, $c9, $09, $60, $bf, $a9, $01, $00, $79, $48, $7f, $4f, $98, $48, $20, $24, $7d, $e2, $01, $ce, $bb, $c8, $20, $c2, $3d, $40, $7d, $d8, $4c, $bf, $9b, $bf, $e0, $ff, $00, $bf, $00, $bf, $2b, $3f, $40, $bf, $40, $ff, $00, $b4, $c2, $bf, $53, $a9, $40, $ff, $00, $bf, $00, $bf, $40, $a6, $40, $ff, $00, $02, $00, $bf, $40, $bd, $79, $08, $02, $bf, $8a, $8a, $d0, $f7, $60, $ff, $40, $27, $89, $bf, $cd, $62, $48, $ff, $75, $9f, $00, $bf, $40, $ff, $60, $3f, $0c, $ff, $40, $ff, $40, $08, $c2, $bf, $40, $ff, $6c, $08, $cf, $bf, $c2, $3d, $40, $08, $cd, $21, $8a, $8d, $e6, $08, $cd, $25, $48, $8d, $00, $bf, $00, $bf, $48, $f0, $45, $ff, $eb, $0c, $90, $27, $40, $35, $51, $ff, $00, $ae, $60, $08, $d0, $03, $ee, $9b, $88, $20, $5f, $26, $40, $1d, $f2, $1d, $c2, $bf, $82, $04, $b0, $40, $24, $40, $08, $00, $bf, $00, $7f, $40, $0c, $77, $bf, $00, $bf, $00, $7d, $55, $31, $40, $ae, $ee, $bf, $00, $7d, $40, $7d, $40, $bf, $0b, $bf, $40, $7d, $40, $3d, $40, $bf, $4c, $84, $15, $7d, $40, $15, $f0, $09, $a9, $03, $00, $7d, $48, $7c, $40, $88, $15, $ae, $00, $08, $60, $5f, $40, $bf, $00, $9f, $c0, $a0, $00, $bf, $00, $b9, $d0, $35, $40, $9f, $00, $ac, $6b, $08, $c0, $35, $c2, $bf, $d2, $07, $eb, $09, $e0, $01, $4c, $88, $15, $8c, $56, $7d, $40, $7d, $40, $b0, $07, $a9, $00, $20, $43, $4c, $c8, $ff, $a9, $2b, $00, $c9, $43, $5d, $48, $20, $33, $1b, $24, $01, $4c, $1a, $d2, $af, $e8, $08, $a2, $3d, $40, $7d, $d8, $cc, $bf, $9b, $bf, $4c, $ff, $40, $ff, $00, $bf, $86, $21, $40, $ff, $40, $ff, $80, $09, $ca, $bf, $c0, $04, $40, $ff, $02, $bf, $80, $bf, $40, $22, $40, $3f, $80, $bf, $80, $bf, $40, $20, $d1, $15, $82, $bf, $9f, $80, $48, $89, $7d, $ff, $00, $ad, $83, $bf, $d0, $3e, $ee, $ff, $88, $9f, $00, $bf, $40, $ff, $40, $3d, $0c, $ff, $40, $ff, $82, $90, $ca, $bf, $40, $ff, $c5, $06, $f2, $3d, $c2, $3d, $40, $2d, $54, $08, $cb, $bf, $d2, $0d, $60, $15, $6b, $90, $00, $bf, $00, $bf, $ed, $66, $48, $ff, $28, $a9, $82, $a0, $40, $ae, $61, $ff, $0c, $88, $02, $ad, $63, $08, $f0, $9b, $ab, $03, $aa, $2e, $60, $1c, $4e, $19, $c2, $bf, $82, $05, $a0, $00, $24, $00, $08, $40, $fd, $40, $bf, $00, $20, $cc, $7d, $40, $ff, $40, $bf, $6e, $29, $00, $61, $4c, $7d, $40, $bf, $00, $bf, $00, $7d, $cd, $fd, $40, $bf, $40, $bf, $00, $7d, $48, $20, $d1, $bf, $00, $03, $4c, $9c, $55, $3d, $40, $bf, $c9, $ab, $00, $74, $ee, $6c, $40, $ad, $20, $9f, $00, $bf, $40, $ff, $40, $f0, $40, $fd, $40, $bf, $20, $2d, $82, $dd, $40, $2c, $6a, $08, $c2, $ad, $c2, $3d, $4c, $48, $55, $20, $fe, $16, $ce, $55, $48, $30, $50, $bf, $00, $bf, $00, $20, $43, $4c, $40, $15, $a9, $13, $a0, $fd, $4c, $48, $40, $ad, $64, $9f, $f0, $2e, $e9, $01, $64, $35, $08, $b0, $13, $29, $40, $04, $44, $bf, $c2, $bf, $f8, $cf, $ff, $db, $ff, $ff, $bf, $02, $bf, $40, $ff, $55, $a2, $00, $bf, $00, $bf, $40, $1b, $cc, $ff, $8a, $85, $80, $bf, $40, $7f, $40, $bf, $02, $83, $00, $bf, $40, $7f, $40, $7f, $02, $28, $9f, $08, $40, $ff, $50, $f9, $20, $b8, $19, $bf, $40, $ad, $03, $ff, $cf, $2c, $0a, $bf, $48, $ff, $40, $ff, $40, $bf, $80, $bf, $0f, $bf, $00, $bf, $40, $02, $c2, $7d, $00, $bf, $15, $ad, $6c, $3d, $42, $3d, $c2, $ad, $ef, $08, $cd, $14, $48, $20, $ce, $1a, $cc, $84, $40, $ff, $40, $ff, $73, $08, $ae, $bf, $08, $e8, $e9, $45, $80, $08, $ab, $bf, $c5, $09, $60, $03, $8f, $16, $8a, $9b, $cf, $16, $ec, $77, $82, $b6, $c2, $bb, $40, $3d, $40, $04, $a0, $00, $24, $00, $68, $40, $7d, $40, $bf, $00, $08, $a9, $7d, $40, $7d, $40, $bf, $03, $2d, $00, $75, $e2, $7d, $40, $bf, $00, $bf, $00, $7d, $48, $7d, $40, $bf, $40, $bf, $00, $7d, $ea, $3d, $51, $bf, $00, $28, $bd, $12, $60, $85, $40, $bf, $74, $3c, $00, $08, $40, $25, $40, $18, $20, $9f, $00, $3f, $40, $55, $40, $f0, $40, $fd, $40, $bf, $a1, $3d, $c2, $df, $40, $29, $43, $2c, $c2, $af, $c2, $3d, $48, $20, $50, $8c, $da, $08, $a8, $40, $43, $50, $41, $bf, $00, $bf, $00, $20, $d1, $15, $40, $08, $ae, $2a, $48, $7f, $47, $4c, $40, $15, $cc, $bf, $08, $ac, $69, $08, $64, $bc, $16, $8e, $57, $09, $60, $35, $60, $bf, $c2, $bf, $f9, $cd, $ff, $db, $ff, $8a, $bf, $82, $bf, $40, $ff, $65, $08, $80, $bf, $00, $bf, $40, $0f, $cc, $ff, $88, $ad, $82, $bf, $40, $ff, $40, $ff, $80, $13, $82, $bf, $40, $ff, $40, $ff, $82, $08, $c2, $03, $40, $ff, $ce, $7a, $8a, $0c, $83, $bf, $40, $04, $c9, $ff, $88, $ae, $e7, $bf, $e0, $df, $40, $ff, $c2, $bf, $02, $bf, $8f, $bf, $82, $bf, $40, $ec, $c2, $7d, $80, $bf, $8a, $ac, $da, $3d, $42, $3d, $c2, $ae, $da, $08, $ee, $25, $48, $a0, $82, $90, $8e, $ad, $40, $bf, $40, $ff, $88, $20, $92, $bf, $ee, $5a, $48, $ad, $82, $08, $ab, $bf, $d0, $97, $60, $01, $d0, $05, $af, $9b, $48, $d0, $ce, $a9, $82, $be, $ae, $bb, $40, $3d, $40, $04

l1000:
            sei
            lda #$22
            sta l0314                       // IRQ vector routine low byte
            lda #$10
            sta l0315                       // IRQ vector routine high byte
            cli
            lda ld011                       // screen control register #1, vertical scroll
            and #$7f
            sta ld011                       // screen control register #1, vertical scroll
            lda ld01a                       // interrupt control
            ora #$01
            sta ld01a                       // interrupt control
            lda #$00
            sta ld012                       // raster line
            rts

l1022:
            lda ld019                       // interrupt status
            and #$01
            bne l102c
            jmp lea31                       // KERNAL's standard interrupt routine


l102c:
            sta ld019                       // interrupt status
            cli
            lda ld012                       // raster line
            cmp #$8d
            bcc l107e
            cmp #$95
            bcs l103e
            jmp l10b9


l103e:
            lda #$8a                        // (103e)
            sta ld012                       // (1040) raster line
            lda ld018                       // (1043) Load A with $d018. This will be #05 which is character set from $5000
            and #$f0                        // (1046) AND on A with #f0 which makes A #00.
            ora #$02                        // (1048) ORA on A with #02 which makes A #02.
            sta ld018                       // (104a) Store #02 to $d018.
            lda ld011                       // (104d) Load A with $d011 which is #17.
            and #$f8                        // (1050) AND on A with #f8 which makes A #10.
            ora #$0b                        // (1052) ORA on A with #0b which makes A #1b.
            sta ld011                       // (1054) screen control register #1, vertical scroll etc.
            lda ld016                       // (1057) Load A with $d016 which is #d6
            and #$f8                        // (105a) AND on A with #f8 which makes A #d0.
            ora #$08                        // (105c) ORA on A with #08 which makes A #d8
            sta ld016                       // (105e) Store #d8 to d016. This will set the screen to 38 characters and enable horizontal scroll.
            lda #$00                        // (l061) Load A with #00 which makes the colour black.
            sta background_color            // (1063) Store A to $d021 which is background color.
            sta Sprite_enable_register      // sprite enable/disable
            jsr l7bab
            lda l1b80
            bne l1078
            nop
            jsr l1c20
            jsr l1d00


l1078:
            jsr l2150
            jmp l10d9


l107e:
            lda #$07
            sta background_color                       // background color
            sta Extra_bg_color_1                       // extra background color #1
            sta Extra_bg_color_2                       // extra background color #2
            lda #$91
            sta ld012                       // raster line
            lda ld011                       // screen control register #1, vertical scroll
            and #$f0
            ora l1b01
            sta ld011                       // screen control register #1, vertical scroll
            lda ld018                       // memory setup
            and #$f0
            ora #$04
            sta ld018                       // memory setup
            lda ld016                       // screen control register #2, horizontal scroll, multicolor, screenwidth
            and #$f0
            ora l1b00
            sta ld016                       // screen control register #2, horizontal scroll, multicolor, screenwidth
            lda #$ff
            sta Sprite_enable_register                       // sprite enable/disable
            pla
            tay
            pla
            tax
            pla
            rti


l10b9:
            lda #$fb
            sta ld012                       // raster line
            lda #$00
            sta background_color                       // background color
            lda #$08
            sta Extra_bg_color_1                       // extra background color #1
            lda #$09
            sta Extra_bg_color_2                       // extra background color #2
            jsr l2400
            jsr l2480
            jsr l24e0
            jsr l10e0


l10d9:
            pla
            tay
            pla
            tax
            pla
            rti

.byte $02

l10e0:
            jsr l1900
            jsr l3d60
            rts

.byte $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe


l1100:
            lda #$00
            sta $d9
            lda #$14
            sta $da
            lda l1b02
            sta l111f
            lda l1b03
            sta l1120
            lda #$08
            sta $dd


l1118:
            ldy #$00
            sty $de
            sty $df


l111e:
            ldx l879e,x
            ldy $de
            lda l1200,x
            sta ($d9),y
            iny
            lda l1280,x
            sta ($d9),y
            iny
            sty $de
            tya                             // Transfer Y to A
            clc                             // Clear carry flag
            adc #$28
            tay                             // Transfer A to Y
            lda l1300,x
            sta ($d9),y
            iny
            lda l1380,x
            sta ($d9),y
            inc $df
            ldy $df
            cpy #$15
            bne l111e
            lda $d9
            clc                             // Clear carry flag
            adc #$54
            sta $d9
            bcc l1154
            inc $da


l1154:
            lda l111f
            clc                             // Clear carry flag
            adc #$96
            sta l111f
            bcc l1162
            inc l1120


l1162:
            dec $dd
            bne l1118
            rts

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00

l1170:
            lda #$07

.byte $48, $a0, $01, $a2, $02, $8c, $3f, $1b, $ad, $3f, $1b, $d0, $fb, $20, $b7, $11, $ca, $d0, $f2, $a0, $ff, $a2, $04, $8c, $3f, $1b, $ad, $3f, $1b, $d0, $fb, $20, $b7, $11, $ca, $d0, $f2, $a0, $01, $a2, $02, $8c, $3f, $1b, $ad, $3f, $1b, $d0, $fb, $20, $b7, $11, $ca, $d0, $f2, $68, $aa, $ca, $8a, $48, $d0, $c3, $68, $a9, $00, $8d, $bf, $10, $60, $ad, $bf, $10, $c9, $01, $f0, $06, $a9, $01, $8d, $bf, $10, $60, $a9, $00, $8d, $bf, $10, $60, $ff, $02, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe

l1200:

.byte $00, $01, $01, $05, $01, $01, $05, $0a, $0d, $01, $01, $0a, $0b, $01, $05, $07, $5e, $60, $62, $64, $01, $4a, $4e, $52, $56, $5a, $40, $42, $44, $46, $48, $00, $00, $11, $00, $0d, $01, $07, $06, $0d, $01, $08, $05, $00, $00, $02, $06, $00, $06, $00, $00, $02, $0b, $01, $05, $00, $00, $00, $01, $0e, $00, $0b, $06, $0c, $00, $28, $00, $01, $02, $00, $00, $27, $27, $02, $00, $1a, $12, $16, $27, $1a, $1e, $16, $00, $01, $00, $00, $34, $36, $33, $00, $33, $34, $00, $33, $00, $39, $3b, $39, $00

l1263:

.byte $74, $11, $80, $88, $ac, $b0, $b4, $b8, $bc, $c0, $c4, $84, $a4, $9c, $a8, $98, $8c, $a0, $90, $94, $4b, $4f, $53, $57, $5b, $00, $00, $00, $00

l1280:

.byte $00, $01, $01, $01, $01, $04, $01, $0b, $01, $04, $0b, $0b, $0e, $04, $01, $08, $00, $00, $00, $00, $01, $4b, $4f, $53, $57, $5b, $00, $00, $00, $00, $00, $00, $10, $00, $0e, $0c, $02, $06, $0e, $07, $0d, $0e, $0b, $03, $00, $00, $08, $03, $08, $03, $00, $00, $00, $04, $01, $00, $00, $00, $0b, $01, $26, $08, $0e, $00, $26, $00, $03, $01, $00, $03, $00, $00, $00, $00, $00, $1b, $13, $17, $26, $1b, $1f, $17, $00, $57, $00, $31, $31, $31, $32, $61, $33, $35, $00, $33, $00, $38, $00, $3a, $41

l12e3:

.byte $75, $11, $81, $89, $ad, $b1, $b5, $b9, $bd, $c1, $c5, $85, $a5, $9d, $a9, $99, $8d, $a1, $91, $95, $4c, $50, $54, $58, $5c, $00, $00, $00, $00

l1300:

.byte $00, $01, $00, $00, $00, $04, $00, $00, $00, $04, $06, $00, $09, $04, $00, $00, $5f, $61, $63, $65, $06, $4c, $50, $54, $58, $5c, $41, $43, $45, $47, $49, $0f, $00, $09, $00, $11, $0d, $00, $00, $0c, $0e, $00, $00, $00, $03, $09, $00, $00, $00, $00, $00, $11, $11, $04, $00, $24, $22, $22, $0b, $0a, $26, $09, $00, $00, $26, $28, $03, $01, $01, $03, $00, $00, $01, $01, $00, $1c, $14, $18, $26, $1c, $20, $18, $12, $0d, $00, $00, $00, $35, $00, $00, $35, $00, $37, $28, $00, $3a, $00, $3c, $00

l1363:

.byte $00, $11, $82, $8a, $ae, $b2, $b6, $ba, $be, $c2, $c6, $86, $a6, $9e, $aa, $9a, $8e, $a2, $92, $96, $4d, $51, $55, $59, $5d, $00, $00, $00, $00

l1380:

.byte $00, $01, $00, $07, $05, $00, $07, $0c, $07, $00, $09, $0c, $0a, $00, $05, $00, $00, $00, $00, $00, $08, $4d, $51, $55, $59, $5d, $00, $00, $00, $00, $00, $01, $03, $00, $01, $00, $09, $00, $00, $00, $09, $0a, $09, $05, $02, $00, $00, $05, $00, $0a, $00, $00, $00, $00, $05, $23, $25, $23, $09, $0e, $00, $00, $0a, $00, $01, $00, $01, $01, $02, $01, $00, $27, $27, $02, $00, $1d, $15, $19, $27, $1d, $21, $19, $00, $00, $06, $31, $31, $31, $31, $01, $36, $34, $00, $34, $39, $3b, $00, $3b, $00

l13e3:

.byte $00, $11, $83, $8b, $af, $b3, $b7, $bb, $bf, $c3, $c7, $87, $a7, $9f, $ab, $9b, $8f, $a3, $93, $97, $4e, $52, $56, $5a, $5e, $00, $00, $00, $00

l1400:

.byte $00, $00, $00, $00, $52, $53, $00, $00, $00, $00, $00, $00, $5a, $5b, $00, $00, $00, $00, $00, $00, $00, $00, $4e, $4f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $4e, $4f, $00, $00

l142a:

.byte $00, $00, $00, $00, $54, $55, $00, $00, $00, $00, $00, $00, $5c, $5d, $00, $00, $00, $00, $00, $00, $00, $00, $50, $51, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $50, $51, $00, $00

l1454:

.byte $00, $00, $00, $00, $56, $57, $00, $00, $00, $00, $00, $00, $4a, $4b, $00, $00, $00, $00, $00, $00, $00, $00, $52, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $52, $53, $00, $00

l147e:

.byte $00, $00, $00, $00, $58, $59, $00, $00, $00, $00, $00, $00, $4c, $4d, $00, $00, $00, $00, $00, $00, $00, $00, $54, $55, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $54, $55, $00, $00

l14a8:

.byte $00, $00, $00, $00, $5a, $5b, $00, $00, $00, $00, $00, $00, $4e, $4f, $00, $00, $00, $00, $00, $00, $00, $00, $56, $57, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $56, $57, $00, $00

l14d2:

.byte $00, $00, $00, $00, $5c, $5d, $00, $00, $00, $00, $00, $00, $50, $51, $00, $00, $00, $00, $00, $00, $00, $00, $58, $59, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $58, $59, $00, $00

l14fc:

.byte $00, $00, $00, $00, $4a, $4b, $00, $00, $00, $00, $00, $00, $52, $53, $00, $00, $00, $00, $00, $00, $00, $00, $5a, $5b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $5a, $5b, $00, $00

l1526:

.byte $00, $00, $00, $00, $4c, $4d, $00, $00, $00, $00, $00, $00, $54, $55, $00, $00, $00, $00, $00, $00, $00, $00, $5c, $5d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $5c, $5d, $00, $00

l1550:

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $4a, $4b, $00, $00

l157a:

.byte $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $4c, $4d, $00, $00

l15a4:

.byte $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $04, $0e, $01

l15ce:

.byte $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $04, $00, $0a, $0e

l15f8:

.byte $01, $01, $0d, $0c, $07, $06, $06, $0e, $0d, $07, $01, $0d, $06, $08, $05, $0b, $0a, $0b, $05, $01, $01, $01, $01, $04, $01, $0b, $08, $0e, $0b, $0e, $01, $04, $05, $01, $0b, $0e, $01, $02, $00, $00, $00, $00, $01, $01, $11, $00, $00, $00, $00, $00, $0c, $00, $0e, $09, $00, $00, $00, $09, $00, $0c, $00, $07, $00, $05, $04, $00, $06, $09, $00, $0a, $09, $0a, $04, $00, $00, $05, $09, $0a, $0d, $09, $00, $00, $00, $00, $01, $01, $11, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $09, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe

l1700:
            lda #$b8
            sta l1734
            lda #$41
            sta l1735
            lda X_axis_low_byte
            and #$01
            sta l1731
            lda #$14
            sta l1732
            lda Y_axis_low_byte
            and #$01
            beq l172c
            lda l1731
            clc                             // Clear carry flag
            adc #$2a
            sta l1731
            bcc l172c
            inc l1732


l172c:
            ldx #$0e


l172e:
            ldy #$28


l1730:
            lda l147e,y
            sta l4230,y
            dey
            bpl l1730
            lda l1731
            clc                             // Clear carry flag
            adc #$2a
            sta l1731
            bcc l1747
            inc l1732


l1747:
            lda l1734
            clc                             // Clear carry flag
            adc #$28
            sta l1734
            bcc l1755
            inc l1735


l1755:
            dex                             // Decrease X
            bne l172e
            rts

.byte $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $a2, $ff, $78, $9a, $d8, $4c, $40, $25, $00, $00, $00, $00

l1770:
            lda #$64
            sta l0318
            sta l0316
            lda #$17
            sta l0319
            sta l0317
            lda #$00
            sta num_codes_entered
            sta l1b4d
            ldx #$ff
            txs
            jmp l2544

.byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff

Get_Joystick_Input:                         // $17a0 / l17a0
            lda ldc00                       // Load joystick port 2 values
            ldy #$00                        // Set Y to #00
            ldx #$00                        // Set X to #00

Joystick_Check_Up:
            lsr                             // Logical shift right
            bcs Joystick_Check_Down         // Joystick_Check_Down
            dey


Joystick_Check_Down:
            lsr
            bcs Joystick_Check_Left         // Joystick_Check_Left
            iny


Joystick_Check_Left:
            lsr
            bcs Joystick_Check_Right        // Joystick_Check_Right
            dex                             // Decrease X


Joystick_Check_Right:
            lsr
            bcs Store_Joystick_Direction
            inx                             // Increase X


Store_Joystick_Direction:
            lsr
            stx Joy_Left_Right              // Store Left/Right input. Left = #ff / right = 01
            sty Joy_Up_Down                 // Store Up/Down input. Down is #ff, Up is #01.
            ldx #$00
            bcs Store_Joystick_Fire         // Store_Joystick_Fire
            inx                             // Increase X                             


Store_Joystick_Fire:
            stx Joy_Fire                    // Register joystick fire event.
            rts

.byte $02, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff

l17d0:
            lda ldd02                       // CIA #2 - port A data direction
            ora #$03
            sta ldd02                       // CIA #2 - port A data direction
            lda ldd00                       // Load $dd00
            and #fc                         // And on $dd00
            ora #$02                        // Or on $dd00
            sta ldd00                       // Set VIC bank to 4000
            lda ld018                       // Set screen and character addresses. At first screen load it is #15 (0001 0101). 
            and #$0f                        // Will set characters at 5 ($5000)
            sta ld018                       // Store screen and character addresses.
            lda #$04
            sta l0288
            lda #$50
            sta active_input_mode_low           //
            lda #$00
            sta $fd
            lda #$40
            sta $fe
            lda #$1d
            sta active_input_mode_high
            ldx #$04
            ldy #$00


l1803:
            lda (active_input_mode_low),y
            sta ($fd),y
            dey
            bne l1803
            inc active_input_mode_high
            inc $fe
            dex                             // Decrease X
            bne l1803
            lda $01
            and #$fe
            sta $01
            lda ld016                       // screen control register #2, horizontal scroll, multicolor, screenwidth
            ora #$10
            sta ld016                       // screen control register #2, horizontal scroll, multicolor, screenwidth
            lda ldc0e                       // CIA #1 - timer A control
            and #$fe
            sta ldc0e                       // CIA #1 - timer A control
            ldx #$0e
            lda #$b8
            sta active_input_mode_low
            lda #$d9
            sta active_input_mode_high


l1831:
            ldy #$27
            lda #$ff


l1835:
            sta (active_input_mode_low),y
            dey
            bpl l1835
            lda active_input_mode_low
            clc                             // Clear carry flag
            adc #$28
            sta active_input_mode_low
            lda active_input_mode_high
            adc #$00
            sta active_input_mode_high
            dex                             // Decrease X
            bne l1831
            lda #$0b
            sta border_color                       // border color
            lda #$03
            sta ld027                       // sprite #0 color
            sta ld02a                       // sprite #3 color
            lda #$00
            sta l1b4e
            sta l1b02
            lda #$80
            sta l1b03
            lda #$14
            sta X_axis_low_byte
            lda #$02                        // Load A with #02
            sta Y_axis_low_byte
            jsr l2af7
            lda #$00
            sta active_input_mode_low
            sta $fd
            lda #$d9
            sta $fe
            lda #$bc
            sta active_input_mode_high
            ldx #$02
            ldy #$b7


l1883:
            lda (active_input_mode_low),y
            sta ($fd),y
            dey
            bne l1883
            dec active_input_mode_high
            dec $fe
            dex                             // Decrease X
            bne l1883
            jsr l7b40
            lda #$00
            sta X_axis_high_byte
            lda #$06
            sta l1b00
            lda #$05
            sta l1b01
            lda #$00
            sta Character_direction         // Store A to Character_direction. 01 = Right / 02 = Left.
            lda #$09
            sta ld028                       // sprite #1 color
            lda #$0a
            sta ld029                       // sprite #2 color
            lda #$07
            sta ld900
            jsr l3080
            lda #$03                                        // (0000) Load A with #03. This will set the "falling" character action.
            sta Character_action                            // (0000) Store #03 to Character_Action.
            jsr l1a90
            lda #$00
            ldy #$80


l18c6:
            sta l3500,y
            dey
            bne l18c6
            ldy #$00


l18ce:
            lda lbd00,y
            sta l312f,y
            lda lbe00,y
            sta l322f,y
            lda lbf00,y
            sta l332f,y
            dey
            bne l18ce
            jsr l3080
            lda #$00
            sta Second_minute
            lda #$09
            sta First_minute
            lda #$00
            sta l1b24
            lda #$00
            sta l1b90
            jsr l1770
            rts

.byte $fe, $fe

l1900:
            dec l1b60
            beq l1906
            rts


l1906:
            lda l1b61
            sta l1b60
            lda l1b54
            bpl l1921
            lda #$1f
            ldx l1b62
            beq l192e


l1918:
            clc                             // Clear carry flag
            adc #$20
            dex                             // Decrease X
            bne l1918
            jmp l192e


l1921:
            lda #$7f
            ldx l1b62
            beq l192e


l1928:
            sec                             // Set carry flag
            sbc #$20
            dex                             // Decrease X
            bne l1928


l192e:
            tay                             // Transfer A to Y
            ldx #$1f


l1931:
            lda l1975,y
            sta l5090,x
            dey
            dex                             // Decrease X
            bpl l1931
            lda l1b55
            bpl l1950
            lda #$1f
            ldx l1b62
            beq l195d


l1947:
            clc                             // Clear carry flag
            adc #$20
            dex                             // Decrease X
            bne l1947
            jmp l195d


l1950:
            lda #$7f
            ldx l1b62
            beq l195d


l1957:
            sec                             // Set carry flag
            sbc #$20
            dex                             // Decrease X
            bne l1957


l195d:
            tay                             // Transfer A to Y
            ldx #$1f


l1960:
            lda l1975,y
            sta l50f0,x
            dey
            dex                             // Decrease X
            bpl l1960
            dec l1b62
            bpl l1974
            ldx #$03
            stx l1b62


l1974:
            rts


l1975:

.byte $ff, $ff, $03, $03, $02, $0a, $0a, $0a, $ff, $ff, $03, $03, $80, $a0, $a0, $a0, $0a, $0a, $0a, $02, $c0, $c0, $ff, $ff, $a0, $a0, $a0, $80, $c0, $c0, $ff, $ff, $ff, $ff, $0c, $0c, $02, $0a, $0a, $0a, $ff, $ff, $0c, $0c, $80, $a0, $a0, $a0, $0a, $0a, $0a, $02, $30, $30, $ff, $ff, $a0, $a0, $a0, $80, $30, $30, $ff, $ff, $ff, $ff, $30, $30, $02, $0a, $0a, $0a, $ff, $ff, $30, $30, $80, $a0, $a0, $a0, $0a, $0a, $0a, $02, $0c, $0c, $ff, $ff, $a0, $a0, $a0, $80, $0c, $0c, $ff, $ff, $ff, $ff, $c0, $c0, $02, $0a, $0a, $0a, $ff, $ff, $c0, $c0, $80, $a0, $a0, $a0, $0a, $0a, $0a, $02, $03, $03, $ff, $ff, $a0, $a0, $a0, $80, $03, $03, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe

l1a00:
            lda #$01                        // Load A with #01
            ldx Character_action            // (271e) Character movement. Standing = 00, 01 = moving (left / right) / 02 = Jumping / 03 = falling / 04 = climbing / 05 = crouching
            beq l1a13                       // () Branch to $2735 as no movement detected.
            dex                             // Decrease X
            beq l1a6e                       // (0000) Branch to $273b as character is moving (left / right). 
            dex                             // Decrease X
            beq l1a25                       // (0000) Branch to $2747 as character is jumping. 
            dex                             // Decrease X
            beq l1a39                       // (0000) Branch to $2741 as character is falling.
            dex                             // Decrease X
            beq l1a41                       // (0000) Branch to $274d as character is climbing.


l1a13:
            rts


l1a14:
            ldy Character_direction         // Load Y with Character_direction. 01 = Right / 02 = Left.

l1a17:
            beq l1a13                       // Branch to l1a13 if no direction.
            dey                             // 
            beq l1a20
            sta l1b3e
            rts

l1a20:
            dey
            sty l1b3e
            rts

l1a25:
            ldx l1b27
            dex                             // Decrease X
            beq l1a33
            dex                             // Decrease X
            dex                             // Decrease X
            stx l1b3f
            jmp l1a14


l1a33:
            sta l1b3f
            jmp l1a14


l1a39:
            ldx #$01
            stx l1b3f
            jmp l1a53


l1a41:
            ldx l1b27
            beq l1a13
            dex                             // Decrease X
            beq l1a4f
            dex                             // Decrease X
            dex                             // Decrease X
            stx l1b3f
            rts


l1a4f:
            sta l1b3f
            rts


l1a53:
            dec l1b63
            bne l1a13
            lda l1b64
            sta l1b63
            dec l1b66
            bne l1a14
            lda #$09
            sta l1b66
            inc l1b64
            jmp l1a14


l1a6e:
            lda Standing_on_conveyor
            beq l1a7d
            lda Clock_first_millisecond
            and #$01
            beq l1a7d
            nop                             // No operation
            nop                             // No operation
            rts


l1a7d:
            lda #$01                    // Load A with #01
            jmp l1a14

.byte $00, $02, $02, $02, $02, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff

l1a90:
            lda l1b67
            sta active_input_mode_low
            lda l1b68
            sta active_input_mode_high
            ldy #$03
            lda #$00


l1a9e:
            sta (active_input_mode_low),y
            dey
            bpl l1a9e
            lda #$14
            sta Lift_position
            lda #$25
            sta l1b67
            sta active_input_mode_low
            lda #$86
            sta l1b68
            sta active_input_mode_high
            lda #$63
            ldy #$03


l1aba:
            sta (active_input_mode_low),y
            dey
            bpl l1aba
            ldx #$74
            stx l1263
            inx                             // Increase X
            stx l12e3
            ldx #$00
            stx l1363
            stx l13e3
            rts

.byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe

l1b00:

.byte $06

l1b01:

.byte $07

l1b02:

.byte $ee

l1b03:

.byte $82

X_axis_low_byte:

.byte $14

X_axis_high_byte:

.byte $00

Y_axis_low_byte:

.byte $0c

l1b07:

.byte $00

Clock_first_millisecond:

.byte $02

Clock_second_millisecond:

.byte $03

Clock_first_second:

.byte $02

Clock_second_second:

.byte $04

First_minute:

.byte $06

Second_minute:

.byte $08

l1b0e:

.byte $00

l1b0f:

.byte $00, $01, $12, $0a, $2c, $01, $04

l1b16:

.byte $02, $01, $01, $01, $02, $03, $04, $03, $01, $02, $04

l1b21:

.byte $01, $04, $00

l1b24:

.byte $00

Character_action:

.byte $00

Character_direction:

.byte $00

l1b27:

.byte $01

l1b28:

.byte $01, $00, $00, $00, $00

l1b2d:

.byte $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

l1b3e:

.byte $00

l1b3f:

.byte $00, $00, $00, $00, $00

l1b44:

.byte $01

l1b45:

.byte $08

l1b46:

.byte $08

l1b47:

.byte $03

l1b48:

.byte $05

l1b49:

.byte $06

l1b4a:

.byte $07

l1b4b:

.byte $01

l1b4c:

.byte $04

l1b4d:

.byte $00

l1b4e:

.byte $01

l1b4f:

.byte $00

Standing_on_conveyor:

.byte $00

Standing_on_lift:               // (1b51)

.byte $00

l1b52:

.byte $00, $00

l1b54:

.byte $ff

l1b55:

.byte $01, $00, $00, $01, $01

l1b5a:

.byte $5f

l1b5b:

.byte $00

l1b5c:

.byte $30, $01

l1b5e:

.byte $30, $01

l1b60:

.byte $01

l1b61:

.byte $02

l1b62:

.byte $02

l1b63:

.byte $04

l1b64:

.byte $08, $06

l1b66:

.byte $01

l1b67:

.byte $25

l1b68:

.byte $86

Lift_position:

.byte $14

l1b6a:

.byte $00

l1b6b:

.byte $00, $00, $00

grapling_hook_deployed:

.byte $00

l1b6f:

.byte $c8

l1b70:

.byte $84, $05

l1b72:

.byte $00, $00, $00, $00, $00, $00

num_codes_entered:

.byte $00

l1b79:

.byte $00, $00, $00, $00, $00, $00, $00, $00

l1b81:

.byte $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff

l1b90:

.byte $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff

l1ba0:

.byte $01, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $7f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01

l1c20:
            lda l1b0e
            beq l1c8d
            lda #$00
            ldx Clock_second_millisecond
            inx                             // Increase X
            inx                             // Increase X
            cpx #$0a
            bcs l1c34
            stx Clock_second_millisecond
            rts


l1c34:
            sta Clock_second_millisecond
            ldx Clock_first_millisecond
            inx                             // Increase X
            cpx #$0a
            beq l1c43
            stx Clock_first_millisecond
            rts


l1c43:
            sta Clock_first_millisecond
            ldx Clock_second_second
            inx                             // Increase X
            cpx #$0a
            beq l1c52
            stx Clock_second_second
            rts


l1c52:
            sta Clock_second_second
            ldx Clock_first_second
            inx                             // Increase X
            cpx #$06
            beq l1c61
            stx Clock_first_second
            rts


l1c61:
            sta Clock_first_second
            ldx Second_minute
            inx                             // Increase X
            cpx #$0a
            beq l1c7b
            cpx #$04
            bne l1c77
            ldy First_minute
            cpy #$02
            beq l1c86


l1c77:
            stx Second_minute
            rts


l1c7b:
            sta Second_minute
            ldx First_minute
            inx                             // Increase X
            stx First_minute
            rts


l1c86:
            sta Second_minute


l1c89:
            sta First_minute
            rts


l1c8d:
            lda #$09
            ldy #$05
            ldx Clock_second_millisecond
            dex                             // Decrease X
            dex                             // Decrease X
            bmi l1c9c
            stx Clock_second_millisecond
            rts


l1c9c:
            sta Clock_second_millisecond
            ldx Clock_first_millisecond
            dex                             // Decrease X
            bmi l1ca9
            stx Clock_first_millisecond
            rts


l1ca9:
            sta Clock_first_millisecond
            ldx Clock_second_second
            dex                             // Decrease X
            bmi l1cb6
            stx Clock_second_second
            rts


l1cb6:
            sta Clock_second_second
            ldx Clock_first_second
            dex                             // Decrease X
            bmi l1cc3
            stx Clock_first_second
            rts


l1cc3:
            sty Clock_first_second
            ldx Second_minute
            dex                             // Decrease X
            bmi l1cd0
            stx Second_minute
            rts


l1cd0:
            sta Second_minute
            ldx First_minute
            dex                             // Decrease X
            bmi l1cdd
            stx First_minute
            rts


l1cdd:
            lda #$01                    // Load A with #01
            sta l1b24
            rts

.byte $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe

l1d00:
            lda #$35
            sta $e0
            lda #$40
            sta $e1
            ldx #$04
            ldy #$00


l1d0c:
            lda Clock_first_millisecond,x
            asl
            asl
            clc                             // Clear carry flag
            adc #$d7
            sta ($e0),y
            clc                             // Clear carry flag
            adc #$01
            iny
            sta ($e0),y
            clc                             // Clear carry flag
            adc #$01
            pha
            tya                             // Transfer Y to A
            clc                             // Clear carry flag
            adc #$27
            tay                             // Transfer A to Y
            pla
            sta ($e0),y
            clc                             // Clear carry flag
            adc #$01
            iny
            sta ($e0),y
            tya                             // Transfer Y to A
            sec                             // Set carry flag
            sbc #$27
            tay                             // Transfer A to Y
            inx                             // Increase X
            txa
            and #$01
            bne l1d3e
            dex                             // Decrease X
            dex                             // Decrease X
            dex                             // Decrease X
            dex                             // Decrease X
            iny


l1d3e:
            cpy #$0f
            bne l1d0c
            rts

.byte $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $5f, $00, $00, $00, $00, $5f, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $01, $34, $35, $36, $37, $38, $39, $3a, $01, $00, $00, $00, $00, $00, $00, $00, $5f, $00, $00, $00, $00, $5f, $00, $00, $00, $00, $00, $00, $00, $00, $01, $60, $60, $60, $60, $60, $61, $01, $00, $00, $01, $3b, $3c, $3d, $3e, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $01, $00, $00, $01, $3f, $40, $41, $42, $43, $44, $45, $01, $00, $00, $00, $00, $00, $01, $01, $01, $01, $5d, $5e, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $01, $00, $00, $01, $46, $47, $48, $49, $4a, $4b, $4c, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d1, $d2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $01, $01, $01, $4d, $4e, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d3, $d4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $66, $67, $68, $69, $01, $01, $00, $00, $01, $4f, $50, $51, $52, $53, $54, $55, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $62, $63, $01, $01, $62, $63, $01, $00, $00, $01, $56, $57, $58, $59, $5a, $5b, $5c, $01, $00, $00, $00, $00, $00, $01, $01, $01, $01, $5d, $5e, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $01, $64, $65, $01, $01, $64, $65, $01, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $ac, $ac, $be, $b1, $c0, $c1, $be, $ba, $ac, $ac

l2118:
            lda l1b81
            beq l2156
            lda l1b3e
            beq l214b
            bmi l2133
            inc ld008                       // sprite #4 X position (bits 0-7)
            inc ld008                       // sprite #4 X position (bits 0-7)
            inc ld00a                       // sprite #5 X position (bits 0-7)
            inc ld00a                       // sprite #5 X position (bits 0-7)
            jmp l214b


l2133:
            dec ld008                       // sprite #4 X position (bits 0-7)
            dec ld008                       // sprite #4 X position (bits 0-7)
            dec ld00a                       // sprite #5 X position (bits 0-7)
            dec ld00a                       // sprite #5 X position (bits 0-7)
            lda ld00a                       // sprite #5 X position (bits 0-7)
            cmp #$1b
            bcs l214b
            lda #$00
            sta l1b81


l214b:
            jmp l22a1

.byte $21, $ea

l2150:
            lda l1b4e
            beq l2118
            rts


l2156:
            lda #$01                    // Load A with #01
            sta l1b4e
            lda #$00
            sta l1b07
            sta l1b0f
            ldx l1b00
            lda l1b3e
            bne l216e
            jmp l21eb


l216e:
            cmp #$ff
            beq l21b0
            inx                             // Increase X
            inx                             // Increase X
            lda #$00
            sta l1b3e
            cpx #$08
            bne l21eb
            lda X_axis_low_byte
            sec                             // Set carry flag
            sbc #$01
            sta X_axis_low_byte
            pha
            lda X_axis_high_byte
            sbc #$00
            sta X_axis_high_byte
            pla
            and #$01
            beq l21a8
            lda l1b02
            sec                             // Set carry flag
            sbc #$01
            sta l1b02
            lda l1b03
            sbc #$00
            sta l1b03
            inc l1b07


l21a8:
            inc l1b0f
            ldx #$00
            jmp l21eb


l21b0:
            dex                             // Decrease X
            dex                             // Decrease X
            lda #$00
            sta l1b3e
            cpx #$fe
            bne l21eb
            lda X_axis_low_byte
            clc                             // Clear carry flag
            adc #$01
            sta X_axis_low_byte
            pha
            lda X_axis_high_byte
            adc #$00
            sta X_axis_high_byte
            pla
            and #$01
            bne l21e6
            lda l1b02
            clc                             // Clear carry flag
            adc #$01
            sta l1b02
            lda l1b03
            adc #$00
            sta l1b03
            inc l1b07


l21e6:
            inc l1b0f
            ldx #$06


l21eb:
            stx l03fe
            ldx l1b01
            lda l1b3f
            bne l21f9
            jmp l2270


l21f9:
            cmp #$ff
            bne l2238
            inx                             // Increase X
            inx                             // Increase X
            lda #$00
            sta l1b3f
            cpx #$03
            beq l2211
            cpx #$09
            bne l2270
            ldx #$01
            jmp l2270


l2211:
            lda Y_axis_low_byte
            sec                             // Set carry flag
            sbc #$01
            sta Y_axis_low_byte
            and #$01
            beq l2232
            lda l1b02
            sec                             // Set carry flag
            sbc #$96
            sta l1b02
            lda l1b03
            sbc #$00
            sta l1b03
            inc l1b07


l2232:
            inc l1b0f
            jmp l2270


l2238:
            dex                             // Decrease X
            dex                             // Decrease X
            lda #$00
            sta l1b3f
            cpx #$01
            beq l224c
            cpx #$ff
            bne l2270
            ldx #$07
            jmp l2270


l224c:
            lda Y_axis_low_byte
            clc                             // Clear carry flag
            adc #$01
            sta Y_axis_low_byte
            and #$01
            bne l226d
            lda l1b02
            clc                             // Clear carry flag
            adc #$96
            sta l1b02
            lda l1b03
            adc #$00
            sta l1b03
            inc l1b07


l226d:
            inc l1b0f


l2270:
            stx l03ff
            lda l1b07
            ora l1b4f
            beq l227e
            jsr l1100


l227e:
            lda l1b0f
            ora l1b4f
            beq l2289
            jsr l2600


l2289:
            jsr l1700
            lda l03fe
            sta l1b00
            lda l03ff
            sta l1b01
            lda #$00
            sta l1b4e
            sta l1b4f
            rts


l22a1:
            lda l1b3f
            beq l22b4
            bpl l22b7
            inc ld009                       // sprite #4 Y position
            inc ld009                       // sprite #4 Y position
            inc ld00b                       // sprite #5 Y position
            inc ld00b                       // sprite #5 Y position


l22b4:
            jmp l2156


l22b7:
            dec ld009                       // sprite #4 Y position
            dec ld009                       // sprite #4 Y position
            dec ld00b                       // sprite #5 Y position
            dec ld00b                       // sprite #5 Y position
            jmp l2156

.byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff

l22d0:
            ldx Character_action            // (271e) Character movement. Standing = 00, 01 = moving (left / right) / 02 = Jumping / 03 = falling / 04 = climbing / 05 = crouching
            beq l22ee                       // (0000) Branch to $2735 as no movement detected.
            dex                             // Decrease X
            beq l22f3                       // (0000) Branch to $273b as character is moving (left / right).
            dex                             // Decrease X
            beq l230c                       // (0000) Branch to $2747 as character is jumping. 
            dex                             // Decrease X
            beq l2322                       // (0000) Branch to $2741 as character is falling.
            dex                             // Decrease X
            beq l2330                       // (0000) Branch to $274d as character is climbing.
            lda Character_direction         // Load A with Character_direction. 01 = Right / 02 = Left.
            ldx #$81                        // Load X with #81.
            cmp #$01                        // Compare Character_direction to #01
            bne l233b                       // Branch to l233b if going left. X will be 81.
            inx                             // Increase X to #82
            jmp l233b                       // Branch to l233b as going right. X will be 82.


l22ee:
            ldx #$60
            jmp l233b


l22f3:
            lda #$61
            ldx Character_direction         // Load X with Character_direction. 01 = Right / 02 = Left.
            cpx #$02                        // Compare X to #$02 (Left)
            beq l22ff                       // Branch if left.
            clc                             // Clear carry flag
            adc #$08


l22ff:
            tax                             // Transfer A to X.
            ldy l1b28                       // Load Y with l1b28.
            beq l233b


l2305:
            inx                             // Increase X
            dey
            bne l2305
            jmp l233b


l230c:
            lda l1b28
            ldx #$71
            ldy Character_direction         // Load Y with Character_direction. 01 = Right / 02 = Left.
            cpy #$01
            bne l231a
            inx                             // Increase X
            inx                             // Increase X


l231a:
            cmp #$06
            bcc l231f
            inx                             // Increase X


l231f:
            jmp l233b


l2322:
            ldx #$75
            ldy l1b28
            beq l233b


l2329:
            inx                             // Increase X
            dey
            bne l2329
            jmp l233b


l2330:
            ldx #$79
            ldy l1b28
            beq l233b


l2337:
            inx                             // Increase X
            dey
            bne l2337


l233b:
            stx l43f8                       // Store X to l43f8. Right = 82, Left = 81.
            txa                             // Transfer X to A.
            clc                             // Clear carry flag.
            adc #$23                        // Add with carry #23.
            sta l43f9                       // 
            adc #$23
            sta l43fa
            adc #$23
            sta l43fb
            rts

.byte $8e, $f9, $43, $60, $20, $e2, $20, $20, $50, $52, $45, $60, $20, $00, $3e, $01

l2360:
            lda Character_action            // (0000) Character movement. 00 = Standing, 01 = moving (left / right) / 02 = Jumping / 03 = falling / 04 = climbing / 05 = crouching
            cmp #$05                        // Compare Character_action to #05 - checking if crouching.
            beq l2386                       // If falling, branch to l2386.
            lda #$ad
            sta Sprite_0_X_Coord                       // sprite #0 X position (bits 0-7)
            sta Sprite_1_X_Coord                       // sprite #1 X position (bits 0-7)
            sta ld004                       // sprite #2 X position (bits 0-7)
            sta ld006                       // sprite #3 X position (bits 0-7)
            lda #$c2
            sta ld007                       // sprite #3 Y position
            lda #$ad


l237c:
            sta ld001                       // sprite #0 Y position
            sta ld003                       // sprite #1 Y position
            sta ld005                       // sprite #2 Y position
            rts


l2386:
            lda #$ad
            sta Sprite_0_X_Coord                       // sprite #0 X position (bits 0-7)
            sta Sprite_1_X_Coord                       // sprite #1 X position (bits 0-7)
            sta ld004                       // sprite #2 X position (bits 0-7)
            lda #$c5
            sta ld006                       // sprite #3 X position (bits 0-7)
            lda #$c0
            jmp l237c

.byte $8d, $03, $d0, $8d, $05

l23a0:
            lda #$00

.byte $8d, $25, $1b, $20, $f3, $23, $a2, $ab, $a9, $2c, $48, $a0, $c0, $a9, $01, $8d, $3f, $1b, $ad, $3f, $1b, $d0, $fb, $ca, $88, $ca, $88, $20, $e9, $23, $8c, $07, $d0, $68, $38, $e9, $01, $48, $d0, $e5, $a9, $ff, $8d, $3f, $1b, $ad, $3f, $1b, $d0, $fb, $e8, $c8, $e8, $c8, $20, $e9, $23, $8c, $07, $d0, $68, $18, $69, $01, $48, $c9, $2c, $d0, $e3, $68, $60, $8e, $01, $d0, $8e, $03, $d0, $8e, $05, $d0, $60, $ae, $06, $1b, $e0, $b7, $90, $ee, $68, $68, $60, $fe, $fe, $fe

l2400:
            lda l1b4d
            beq l2408
            jmp l2412


l2408:
            lda Y_axis_low_byte
            cmp #$16
            bcs l2412
            jmp l2456


l2412:
            dec l1b45
            beq l2418
            rts


l2418:
            ldx l1b46
            stx l1b45
            jsr l2456
            lda #$1e
            inc l1b44
            ldx l1b44
            cpx #$0a
            bne l2434
            ldx #$00
            stx l1b44
            beq l243a


l2434:
            clc                             // Clear carry flag
            adc #$10
            dex                             // Decrease X
            bne l2434


l243a:
            ldy #$1e
            tax
            cpx #$ae
            bne l2443
            ldx #$0e


l2443:
            lda l2461,y
            sta l5250,x
            dex                             // Decrease X
            cpx #$ff
            bne l2450
            ldx #$9e


l2450:
            dey
            cpy #$ff
            bne l2443
            rts


l2456:
            ldy #$a0
            lda #$00


l245a:
            sta l524f,y
            dey
            bne l245a
            rts


l2461:

.byte $00, $00, $06, $15, $1a, $15, $26, $1a, $00, $00, $80, $60, $a0, $50, $90, $50, $25, $1a, $09, $00, $00, $00, $00, $00, $a0, $60, $80, $00, $00, $00, $00

l2480:
            ldx l1b48
            dex                             // Decrease X
            stx l1b48
            beq l248a
            rts


l248a:
            ldx l1b49
            stx l1b48
            jsr l24bc
            lda #$07
            inc l1b47
            ldx l1b47
            cpx #$0a
            bne l24a4
            ldx #$00
            stx l1b47


l24a4:
            beq l24ac


l24a6:
            clc                             // Clear carry flag
            adc #$08
            dex                             // Decrease X
            bne l24a6


l24ac:
            ldy #$07
            tax


l24af:
            lda l24ca,y
            sta l5200,x
            dex                             // Decrease X
            dey
            cpy #$ff
            bne l24af
            rts


l24bc:
            ldy #$4f
            lda #$00
            ldx #$50


l24c2:
            sta l5200,y
            dey
            dex                             // Decrease X
            bne l24c2
            rts


l24ca:

.byte $00, $20, $20, $20, $a8, $a8, $a8, $30, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff

l24e0:
            ldx l1b4b
            dex                             // Decrease X
            stx l1b4b
            beq l24ea
            rts


l24ea:
            ldx l1b4c
            stx l1b4b
            jsr l251c
            lda #$07
            inc l1b4a
            ldx l1b4a
            cpx #$08
            bne l2504
            ldx #$00
            stx l1b4a


l2504:
            beq l250c


l2506:
            clc                             // Clear carry flag
            adc #$08
            dex                             // Decrease X
            bne l2506


l250c:
            ldy #$07
            tax


l250f:
            lda l252a,y
            sta l52f0,x
            dex                             // Decrease X
            dey
            cpy #$ff
            bne l250f
            rts


l251c:
            ldy #$3f
            lda #$00
            ldx #$40


l2522:
            sta l52f0,y
            dey
            dex                             // Decrease X
            bne l2522
            rts


l252a:

.byte $00, $00, $00, $0c, $3f, $3f, $3f, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

l2540:
            sei
            jsr l17d0


l2544:
            jsr l1100
            jsr l1700
            jsr l1000


l254d:
            ldx #$05
            ldy #$00


l2551:
            dey
            bne l2551
            dex                             // Decrease X
            bne l2551
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            lda #$00
            sta l1b6a
            sta l1b6b
            lda X_axis_low_byte             // $1b04
            cmp #$15                        // X position is right above winch
            bne l2575                       // Branch if not above winch
            lda X_axis_high_byte            // $1b05
            cmp #$00
            bne l2575
            jmp l25c2


l2575:
            jsr l3000
            nop                             // No operation
            jsr l2700                       // Think this is an input check routine at $2700
            jsr l1a00
            ldx l1b2d
            dex                             // Decrease X
            stx l1b2d
            bne l2594
            nop                             // No operation
            nop                             // No operation
            jsr l0900
            ldx #$03
            stx l1b2d
            nop                             // No operation
            nop                             // No operation


l2594:
            jsr l2360
            jsr l22d0
            lda l1b81
            bne l25ae
            lda #$00
            nop                             // No operation
            sta ld008                       // sprite #4 X position (bits 0-7)
            sta ld009                       // sprite #4 Y position
            sta ld00a                       // sprite #5 X position (bits 0-7)
            sta ld00b                       // sprite #5 Y position


l25ae:
            nop                             // No operation
            lda l1b24
            bne l25d0
            nop                             // No operation
            lda Character_action            // (271e) Character movement. 00 = Standing, 01 = Running (left / right) / 02 = Jumping / 03 = Falling / 04 = Climbing / 05 = Crouching          
            cmp #$03                        // Compare Character_action to #03 - check if falling.
            bne l25bf                       // If falling, branch to l25bf.
            inc l1b5a


l25bf:
            jmp l254d


l25c2:
            lda l1b4d
            beq l2575               // Branch if zero. 
            jmp l25e0               //

.byte $ea, $02, $02, $02, $ff, $ff

l25d0:
            jsr l1170
            jsr l1170
            jsr l1170
            jsr l1170
            jmp l2540

.byte $02

l25e0:
            ldy num_codes_entered           // Load the number of codes entered
            cpy #$05                        // Compare Y to the number of codes entered
            bne l2575                       // Branch if number of codes isnt 5


l25e7:                                      // This is the area we want
            lda l1b72,y                     // Check the codes entered 06/07/01/03/04
            cmp l26ef,y
            bne l25d0                       // Branch if code doesnt match
            dey                             
            bne l25e7                       // Looping for the code check
            lda l1ba0                       
            beq l25d0
            jmp l0a00

.byte $fe, $fe, $fe, $fe, $fe, $fe

l2600:
            lda X_axis_high_byte
            bne l2612
            lda X_axis_low_byte
            cmp #$14
            bcs l261c
            jsr l2631
            jmp l261c


l2612:
            lda X_axis_low_byte
            cmp #$19
            bcc l261c
            jsr l2664


l261c:
            lda Y_axis_low_byte
            cmp #$04
            bcs l2626
            jsr l2697


l2626:
            lda Y_axis_low_byte
            cmp #$bf
            bcc l2630
            jsr l26bc


l2630:
            rts


l2631:
            tax
            ldy #$00
            lda #$01                    // Load A with #01


l2636:
            sta l1400,y
            sta l142a,y
            sta l1454,y
            sta l147e,y
            sta l14a8,y
            sta l14d2,y
            sta l14fc,y
            sta l1526,y
            sta l1550,y
            sta l157a,y
            sta l15a4,y
            sta l15ce,y
            sta l15f8,y
            inx                             // Increase X
            iny
            cpx #$14
            bcc l2636
            rts


l2664:
            tax
            ldy #$29
            lda #$01                    // Load A with #01


l2669:
            sta l1400,y
            sta l142a,y
            sta l1454,y
            sta l147e,y
            sta l14a8,y
            sta l14d2,y
            sta l14fc,y
            sta l1526,y
            sta l1550,y
            sta l157a,y
            sta l15a4,y
            sta l15ce,y
            sta l15f8,y
            dex                             // Decrease X
            dey
            cpx #$17
            bcs l2669
            rts


l2697:
            tax
            lda #$00
            sta active_input_mode_low
            lda #$14
            sta active_input_mode_high


l26a0:
            ldy #$29
            lda #$01                    // Load A with #01


l26a4:
            sta (active_input_mode_low),y
            dey
            bpl l26a4
            lda active_input_mode_low
            clc                             // Clear carry flag
            adc #$2a
            sta active_input_mode_low
            lda active_input_mode_high
            adc #$00
            sta active_input_mode_high
            inx                             // Increase X
            cpx #$04
            bcc l26a0
            rts


l26bc:
            tax
            lda #$22
            sta active_input_mode_low
            lda #$16
            sta active_input_mode_high


l26c5:
            ldy #$29
            lda #$01                    // Load A with #01


l26c9:
            sta (active_input_mode_low),y
            dey
            bpl l26c9
            lda active_input_mode_low
            sec                             // Set carry flag
            sbc #$2a
            sta active_input_mode_low
            lda active_input_mode_high
            sbc #$00
            sta active_input_mode_high
            dex                             // Decrease X
            cpx #$bf
            bcs l26c5
            rts

.byte $02, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe

l26ef:

.byte $fe, $06, $07, $01, $03, $04, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe

l2700:
            lda #$00
            sta Standing_on_conveyor        // (2702) Store #$00 to $1b50.
            sta Standing_on_lift            // (2705) Store #$00 to $1b51.
            sta l1b52                       // (2708) Store #$00 to $1b52.
            lda #$42                        // (270b) Load A with #$42
            sta active_input_mode_low           // (270d) Setting active_input_mode_low to "movement"
            lda #$42                        // (270f) Load A with #$42 (Again which is weird).
            sta active_input_mode_high                         // (2711) Setting active_input_mode_low to "movement"
            lda #$00                        // (2713) Load A with #$00
            sta $fd                         // (2715) Store #$42 to $fd. Dont know what $fd is yet.
            lda #$52                        // (2717) Load A with #$52.
            sta $fe                         // (2719) Store #$52 to $fe.
            jsr Get_Joystick_Input          // (271b) Get joystick inputs
            ldx Character_action            // (271e) Character movement. 00 = Standing, 01 = moving (left / right) / 02 = Jumping / 03 = falling / 04 = climbing / 05 = crouching
            beq l2735                       // (2721) Branch to $2735 as no movement detected.
            dex                             // (2723) Decrease X
            beq Movement_branch             // (2724) Branch to $273b as character is moving (left / right).
            dex                             // (2726) Decrease X
            beq l2747                       // (2727) Branch to $2747 as character is jumping.        
            dex                             // (2729) Decrease X
            beq l2741                       // (272a) Branch to $2741 as character is falling.
            dex                             // (272c) Decrease X
            beq l274d                       // (272d) Branch to $274d as character is climbing.
            jsr l2b29                       // (272f) Branch to $2b29 as character is crouching.
            jmp l2ca3                       // (2732)  


l2735:
            jsr l2753                       // (2735) 
            jmp l2ca3                       // (2738) 


Movement_branch:
            jsr l2827                       // (273b) 
            jmp l2ca3                       // (273e) 


l2741:
            jsr l29e1
            jmp l2ca3


l2747:
            jsr l28e0
            jmp l2ca3


l274d:
            jsr l2a58
            jmp l2ca3


l2753:
            jsr l2b4d
            cpx #$01
            beq l2770
            lda Joy_Up_Down
            cmp #$ff
            bne l2781
            cpy #$01
            bne l2781
            lda #$04                        // (0000) Load A with #04. This will set the "on rope" character action.                    
            sta Character_action            // (0000) Store #04 to Character_Action.
            lda #$02                        // Load A with #02
            sta l1b27
            rts                             // Return from subroutine


l2770:
            lda l1b5e
            sta l1b5c
            lda #$1e
            sta l1b5b
            lda #$05                        // (0000) Load A with #05. This will set the "crouching" character action.
            sta Character_action            // (0000) Store #05 to Character_Action.
            rts


l2781:
            jsr Check_tile_routine              // Rope Y=05|X=02, Spikes Y=04|X=02, Conveyor Y=03|X=02, Falling Y=00|X=02, Lift Y=01|X=02, Rock Y=00|X=01
            cpx #$01                            // Compare X to #$01
            beq Enter_first_menu                // If standing on rock, branch to the Enter_first_menu routine.             
            cpy #$04                            // Compare Y to #$04
            bcs Enter_first_menu                // If standing on spikes, branch to Enter_first_menu routine.
            cpy #$00                            // Compare Y to #$00
            bne Check_on_lift                   // If not falling, branch to Check_on_lift.
            lda #$03                            // (0000) Load A with #03. This will set the "falling" character action.
            sta Character_action                // (0000) Store #03 to Character_Action.
            lda #$00 
            sta l1b5a
            sta l1b64
            sta l1b63
            jmp l29e1


Check_on_lift:
            dey                                 // Decrease Y.
            bne l27ad                           // If not on lift, branch to l27ad.
            iny                                 // Increase Y. Resetting to original Y value for lift.
            sty Standing_on_lift                // Store Y value to Standing_on_lift (1b51).
            jmp Enter_first_menu                // Jump to Enter_first_menu.


l27ad:
            dey                                 // Decrease Y.
            bne Check_on_conveyor               // If not on XXXX, branch to Check_on_conveyor.
            iny                                 // Increase Y.
            sty l1b52 
            jmp Enter_first_menu


Check_on_conveyor:
            sty Standing_on_conveyor


Enter_first_menu:                       // (27ba) Enter into duck shoot menu
            lda Joy_Fire                // (27ba) Load joystick fire value ($033b)
            beq l27f2                   // (27bd) Branch if no joystick fire value registered. If registered, this will enter first level menu.
            lda Joy_Left_Right          // (27bf) Load joystick left/right value ($0339). Left = #ff / right = 01.
            beq First_Menu_Jump         // (27c2) Branch if no joystick left/right value registered, jump to first menu.
            cmp #$01                    // (27c4) Compare joystick left/right value to #01 (Right) 
            bne l27e2                   // (27c6) Branch to l27e2 since going left
            lda #$02                    // (27c8) Load A with #02
            sta Character_action        // (27ca) Store #02 to Character_action
            lda #$01                    // (27cd) Load A with #01
            sta Character_direction     // (27cf) Store #01 to Character_direction. 01 = Right / 02 = Left.


l27d2:
            lda #$02                    // Load A with #02
            sta l1b27                   // Store #02 to l1b27
            lda #$00                    // Load A with #00
            sta l1b28                   // Store #02 to l1b28
            sta l1b5a                   // Store #02 to l1b5a
            jmp l28e0                   // Jump to l28e0 as this is the finish of trying to jump right while injured.


l27e2:
            lda #$02                    // Load A with #02
            sta Character_action        // Store #02 to Character_action 
            lda #$02                    // Load A with #02
            sta Character_direction     // Store #02 to Character_direction. 01 = Right / 02 = Left.
            jmp l27d2                   // Jump to l27d2 as this is the finish of trying to jump left while injured but now do the same from the right hand side. Weird.


First_Menu_Jump:
            jmp First_menu_entry


l27f2:
            lda Joy_Left_Right          // Load value from Joy_Left_Right. Left = #ff / right = 01.
            beq l2815                   // 
            cmp #$01
            bne l2808
            lda #$01                    // (0000) Load A with #01. This will set the "running" character action.
            sta Character_action        // Store #01 to Character_action.
            lda #$01                    // Load A with #01
            sta Character_direction     // Store A to Character_direction. 01 = Right / 02 = Left.
            jmp l2827


l2808:
            lda #$01                    // (0000) Load A with #01. This will set the "running" character action.
            sta Character_action        // Store #01 to Character_action.
            lda #$02                    // Load A with #02
            sta Character_direction     // Store A to Character_direction. 01 = Right / 02 = Left.
            jmp l2827


l2815:
            lda Joy_Up_Down
            beq l2826
            cmp #$01
            bne l2826
            lda Standing_on_lift        // Load A with value from Standing_on_lift ($1b51)
            bne l2826
            jsr l23a0


l2826:
            rts


l2827:
            jsr l2b4d
            cpx #$01
            bne l2831
            jmp l2770


l2831:
            lda Joy_Up_Down
            cmp #$01
            bne l2847
            cpy #$01
            bne l2847
            lda #$04                                // Load A with #04. This will set the "on rope" character action.
            sta Character_action                    // Store #04 to Character_Action.
            lda #$02                                // Load A with #02
            sta l1b27
            rts


l2847:
            jsr Check_tile_routine                  // (2847) Rope Y=05|X=02, Spikes Y=04|X=02, Conveyor Y=03|X=02, Falling Y=00|X=02, Lift Y=01|X=02, Rock Y=00|X=01
            cpx #$01                                // (284a) Compare X to #$01
            beq Movement_Routine                    // (284c) Branch if on rock.
            cpy #$05                                // (284e) Compare Y to #$05
            bne l2858                               // (2850) Branch if not rock or rope.
            lda #$04                                // (2852) Load A with #04. This will set the "on rope" character action.
            sta Character_action                    // (2852) Store #04 to Character_Action.
            rts                                     // (2852) Return from subroutine.


l2858:
            cpy #$04                                // (2858) Compare Y to #$04.
            beq Movement_Routine                    // (285a) Branch if on spikes.
            cpy #$03                                // (285c) Compare Y to #$03. 
            bne l2868                               // (285e) Branch if not on conveyor belt.
            lda #$01                                // (2860) Load A with #$01.
            sta Standing_on_conveyor                // (2862) Store #$01 on Standing_on_conveyor.
            jmp Movement_Routine                    //


l2868:
            cpy #$02
            bne l2874
            lda #$01                                // Load A with #01
            sta l1b52
            jmp Movement_Routine


l2874:
            cpy #$01
            bne l2880
            lda #$01                                // Load A with #01
            sta Standing_on_lift
            jmp Movement_Routine


l2880:                                              // Triggered when falling.
            lda #$03                                // (2880) Load A with #03. This will set the "falling" character action.
            sta Character_action                    // (2882) Store #03 to Character_Action.
            lda #$01                                // (2885) Load A with #01
            sta l1b63                               // (2887)
            sta l1b64                               // (288a)
            sta l1b5a                               // (288d)
            jmp l29e1                               // (2890)


Movement_Routine:
            lda l1b00                               // (2893) Load A with $1b00
            cmp #$02                                // (2896) Compare to #$02
            bne Jump_Routine                        // (2898) If $1b00 not equal to #$02, branch to Jump_Routine.
            jsr l2c6a                               // (289a)
            cpx #$01                                // (289d)
            bne Jump_Routine                        // (289f)
            jmp l2770                               // (28a1)


Jump_Routine:
            lda Joy_Fire                            // (28a4) Load Joystick fire value.
            beq l28be                               // (28a7) Branch if fire not detected.
            lda #$02                                // (28a9) Load A with #02. This will set the "jumping" character action.             
            sta Character_action                    // (28ab) Store #02 to Character_action.
            lda #$02                                // (28ae) Load A with #02.
            sta l1b27                               // (28b0) Store #02 to l1b27.
            lda #$00                                // (28b3) Load A with #00.
            sta l1b28                               // (28b5) Store #00 to l1b28.
            sta l1b5a                               // (28b8) Store #00 to l1b5a.
            jmp l28e0                               // (28bb) 


l28be:
            lda Joy_Left_Right                      // (28be) Load value from Joy_Left_Right. Left = #ff / right = 01.
            bne l28d0                               // Branch if either left or right.
            lda #$00                                // Load A with #00. This will set the "standing" character action.
            sta Character_action                    // Store #00 to Character_action
            lda #$01                                // Load A with #01
            sta l1b28
            jmp l2753


l28d0:
            cmp #$01                                // Compare A to #$01. Checking if it is left.
            bne l28da                               // Branch as left is detected.
            lda #$01                                // Load A with #01
            sta Character_direction                 // Store A to Character_direction. 01 = Right / 02 = Left.
            rts


l28da:
            lda #$02                                // Load A with #02
            sta Character_direction                 // Store A to Character_direction. 01 = Right / 02 = Left.
            rts


l28e0:
            jsr l2b4d
            cpx #$01
            bne l28f9
            lda #$03                                // Load A with #03. This will set the "falling" character action.
            sta Character_action                    // Store #03 to Character_action.
            lda #$46
            sta l1b5a
            lda #$01                                // Load A with #01
            sta l1b28
            jmp l29e1


l28f9:
            cpy #$01
            bne l290a
            lda #$04                                // Load A with #04. This will set the "on rope" character action.
            sta Character_action                    // Store #04 to Character_action.
            lda #$01                                // Load A with #01
            sta l1b28
            jmp l2a58


l290a:
            lda l1b28
            cmp #$06
            bcs l296b
            lda l1b01
            cmp #$07
            bne l2935
            jsr l2c90
            cpx #$01
            bne l2935
            lda #$03                                // Load A with #03. This will set the "falling" character action.
            sta Character_action                    // Store #03 to Character_action.      
            lda #$46
            sta l1b5a
            lda #$01                                // Load A with #01
            sta l1b63
            sta l1b64
            sta l1b28
            rts


l2935:
            lda l1b00
            cmp #$02
            bne l2965
            jsr l2c6a
            cpx #$01
            bne l2965
            lda #$46
            sta l1b5a
            lda #$03                                // Load A with #03. This will set the "falling" character action.
            sta Character_action                    // Store #03 to Character_action.
            lda Character_direction                 // Load A with Character_direction. 01 = Right / 02 = Left.
            cmp #$01
            beq l2966
            lda #$01                                // Load A with #01


l2956:
            sta Character_direction                 // Store A to Character_direction. 01 = Right / 02 = Left.
            lda #$01                                // Load A with #01
            sta l1b64
            sta l1b63
            sta l1b28
            rts


l2965:
            rts


l2966:
            lda #$02                                // Load A with #02
            jmp l2956


l296b:
            lda #$01                                // Load A with #01
            sta l1b27
            lda l1b5a
            cmp #$1c
            bcc l298f
            lda #$46
            sta l1b5a
            lda #$03                                // Load A with #03. This will set the "falling" character action.
            sta Character_action                    // Store #03 to Character_action.
            lda #$01                                // Load A with #01
            sta l1b63
            sta l1b64
            sta l1b28
            jmp l29e1


l298f:
            lda l1b01
            cmp #$07
            bne l29de
            jsr Check_tile_routine
            cpx #$01
            bne l29aa


l299d:
            lda #$00                            // (0000) Load A with #00. This will set the "standing" character action.                               
            sta Character_action                // Store #00 to Character_action.
            lda #$01                            // Load A with #01
            sta l1b28
            jmp l2753


l29aa:
            cpy #$01
            bne l29b6
            lda #$01                    // Load A with #01
            sta Standing_on_lift
            jmp l299d


l29b6:
            cpy #$02
            bne l29c2
            lda #$01                    // Load A with #01
            sta l1b52
            jmp l299d


l29c2:
            cpy #$03
            bne l29ce
            lda #$01                    // Load A with #01
            sta Standing_on_conveyor
            jmp l299d


l29ce:
            cpy #$04
            bne l29d5
            jmp l2770


l29d5:
            cpy #$05
            bne l29de
            lda #$04                                    // Load A with #04. This will set the "on rope" character action.
            sta Character_action                        // Store #04 to Character_action.


l29de:
            jmp l2935


l29e1:
            jsr l2b4d
            cpx #$01
            bne l29ed
            lda #$46
            sta l1b5a


l29ed:
            lda l1b01
            cmp #$07
            bne l29de
            jsr Check_tile_routine
            jsr l2a13
            cmp #$00
            beq l29de
            lda l1b5a
            cmp #$41
            bcs l2a10
            lda #$00                                    // (0000) Load A with #00. This will set the "standing" character action.
            sta Character_action                        // Store #00 to Character_action.
            lda #$01                                    // Load A with #01
            sta l1b28
            rts


l2a10:
            jmp l2770


l2a13:
            cpx #$01
            bne l2a1a


l2a17:
            lda #$01                    // Load A with #01
            rts


l2a1a:
            cpy #$01
            bne l2a26
            lda #$01                    // Load A with #01
            sta Standing_on_lift
            jmp l2a17


l2a26:
            cpy #$02
            bne l2a32
            lda #$01                    // Load A with #01
            sta l1b52
            jmp l2a17


l2a32:
            cpy #$03
            bne l2a3e
            lda #$01                    // Load A with #01
            sta Standing_on_conveyor
            jmp l2a17


l2a3e:
            cpy #$04
            bne l2a45
            jmp l2770


l2a45:
            cpy #$05
            bne l2a55
            lda l1b00
            cmp #$02
            bne l2a55
            lda #$04                                // Load A with #04. This will set the "on rope" character action.
            sta Character_action                    // Store #04 to Character_action.


l2a55:
            lda #$00
            rts


l2a58:
            lda l1b4d
            beq l2a6a
            lda X_axis_high_byte
            beq l2a6a
            lda #$03                                // Load A with #03. This will set the "falling" character action.
            sta Character_action                    // Store #03 to Character_action.
            jmp l29e1


l2a6a:
            lda #$02                    // Load A with #02
            sta l1b00
            jsr l2c90
            cpx #$00
            beq l2a82
            lda Joy_Up_Down
            beq l2af1
            cmp #$01
            bne l2af1
            jmp l2aeb


l2a82:
            jsr l2b4d
            cpy #$01
            beq l2aa4
            lda #$00
            sta Character_direction                 // Store A to Character_direction. 01 = Right / 02 = Left.


l2a8e:
            lda #$03                                // Load A with #03. This will set the "falling" character action.
            sta Character_action                    // Store #03 to Character_action.
            lda #$00                                // Load A with #00.
            sta l1b5a                               // Store #00 to l1b5a.
            lda #$01                                // Load A with #01
            sta l1b63                               // Store #00 to l1b63.
            sta l1b64                               // Store #00 to l1b64.
            jsr l2af7
            rts


l2aa4:
            lda l1b01
            cmp #$07
            bne l2ac3
            jsr Check_tile_routine
            jsr l2a13
            cmp #$00
            beq l2ac3
            lda #$00                                // (0000) Load A with #00. This will set the "standing" character action.
            sta Character_action                    // (0000) Store #00 to Character_action
            lda #$01                                // Load A with #01
            sta l1b28
            jsr l2af7
            rts


l2ac3:
            lda Joy_Left_Right                      // Load Joy_Left_Right. Left = #ff / right = 01.
            beq l2adc                               // Branch if no input.
            cmp #$01                                // Compare Joy_Left_Right to #01.
            bne l2ad4                               // Branch to l2ad4 if left.
            lda #$01                                // Load A with #01. 01 = Right / 02 = Left so setting character to face left.
            sta Character_direction                 // Store #01 to Character_action which is Right.
            jmp l2a8e


l2ad4:
            lda #$02                                // Load A with #02.
            sta Character_direction                 // Store #02 to Character_action which is Left.
            jmp l2a8e                               // Jump to l2a8e.

l2adc:
            lda Joy_Up_Down
            beq l2af1
            cmp #$01
            beq l2aeb
            lda #$02                    // Load A with #02
            sta l1b27
            rts


l2aeb:
            lda #$01                    // Load A with #01
            sta l1b27
            rts


l2af1:
            lda #$00
            sta l1b27
            rts


l2af7:
            lda grapling_hook_deployed              // Load A with grapling_hook_deployed.
            beq l2b23                               // Branch if grapling_hook_deployed.
            lda l1b6f                               // Load A with l1b6f.
            sta active_input_mode_low                   // store A to active_input_mode_low.
            lda l1b70                               // Load A with l1b70.
            sta active_input_mode_high                                 // Store A to active_input_mode_high.
            ldy #$00                                // Load Y with #00.


l2b08:
            lda #$00                                // Load A with #00.
            sta (active_input_mode_low),y               // Store A to 
            lda active_input_mode_low
            sec                                     // Set carry flag
            sbc #$96
            sta active_input_mode_low
            lda active_input_mode_high
            sbc #$00
            sta active_input_mode_high
            dec l1b79
            bne l2b08
            lda #$01                                // Load A with #01
            sta l1b4f


l2b23:
            lda #$00
            sta grapling_hook_deployed
            rts


l2b29:
            jsr Check_tile_routine
            ldx l1b5c
            stx l0338


l2b32:
            jsr l1c20
            dec l0338
            bne l2b32
            dec l1b5b
            beq l2b40
            rts


l2b40:
            lda #$00                                        // Load A with #00. This will set the "standing" character action.
            sta Character_action                            // Store #00 to Character_action.
            lda #$01                                        // Load A with #01
            sta l1b28
            jmp l2753


l2b4d:
            ldy #$01
            ldx #$06


l2b51:
            lda (active_input_mode_low),y
            cmp #$28
            beq l2b66
            tya                             // Transfer Y to A
            clc                             // Clear carry flag
            adc #$28
            tay                             // Transfer A to Y
            dex                             // Decrease X
            bne l2b51
            lda #$00
            sta $02
            jmp l2b6a


l2b66:
            lda #$01                    // Load A with #01
            sta $02


l2b6a:
            ldy #$02
            sty $a3
            ldx #$06


l2b70:
            lda (active_input_mode_low),y
            cmp #$40
            bcc l2b7d
            cmp #$66
            bcs l2b7d
            jsr l2b93


l2b7d:
            dey
            dec $a3
            bne l2b70
            tya                             // Transfer Y to A
            clc                             // Clear carry flag
            adc #$2a
            tay                             // Transfer A to Y
            lda #$02                    // Load A with #02
            sta $a3
            dex                             // Decrease X
            bne l2b70
            ldy $02
            ldx #$00
            rts


l2b93:
            sty l0334
            sta l0335
            sec                             // Set carry flag
            sbc #$40
            asl
            asl
            asl
            tay                             // Transfer A to Y
            iny
            iny
            iny
            lda ($fd),y
            bne l2bab
            ldy l0334
            rts


l2bab:
            lda l0335
            cmp #$5e
            bcc l2bba
            lda l1b16
            bne l2bba
            jmp l2bab


l2bba:
            ldx #$01
            ldy $02
            pla
            pla
            rts


// ** Map tiles **
// 01 - 10 is rock
// 11 rocks that can be blown up
// 12 - 15 is conveyor belt
// 16 - 1d is pit rocks
// 1e - 21 is conveyor belt
// 22 - 25 is pit rocks
// 26 - xx is scaffolding

Check_tile_routine:
            ldy #$f2                        // (2bc1) Load Y with #f2. Used for indirect index.
            lda (active_input_mode_low),y       // (2bc3) Load map tile (4242),f2 which is $4334.
            beq Tile_check_blank            // (2bc5) Branch if the tile is a blank space.
            cmp #$12                        // (2bc7) Check if standing on conveyor belt (Tile #$12).
            bcc Tile_not_blank              // (2bc9) Not sure.


Tile_check_blank:
            dey                             // (2bcb) Decrease Y.
            lda (active_input_mode_low),y       // (2bcc) Load map tile (Roughly $4333).
            beq l2bd9                       // (2bce) Branch if the tile is a blank space. Trigger falling event.
            cmp #$12                        // (2bd0) Check if standing on conveyor belt (Tile #$12).
            bcs l2bd9                       // (2bd2) Falling if carry is set.


Tile_not_blank:
            lda #$01                        // (2bd4) Load A with #01
            jmp Tile_check_rope             // (2bd6) Jump to $2bdb if not on blank spaces.


l2bd9:
            lda #$00                        // (2bd9)


Tile_check_rope:
            sta $02                         // (2bdb) Store #$00 to $02
            ldy #$f1                        // (2bdd) Load Y with #$f1
            lda (active_input_mode_low),y       // (2bdf) Load map tile ($4333)
            cmp #$28                        // (2be1) Compare current tile to #$28 which is rope.
            beq Return_rope                 // (2be3) Branch if character is at rope tile.
            jmp l2bed                       // (2be5) Jump to l2bed as not rope.


Return_rope:
            ldy #$05                        // (2be8) Load Y with #$05
            ldx $02                         // (2bea) Load X with #$02
            rts                             // (2bec) Return from subroutine


l2bed:
            ldx #$02                        // (2bed) Load X with #$02


Tile_check_floor_type:
            lda (active_input_mode_low),y       // (2bef) Load map tile (Roughly $4333). 
            cmp #$22                        // (2bf1) Compare tile to #$22.
            bcc Tile_check_floor_type_2     // (2bf3) Branch if tile is below #$22. Either landed on rock, pit spikes or conveyor belt.
            cmp #$26                        // (2bf5) Compare tile to #$22
            bcs Tile_check_floor_type_2     // (2bf7) Branch if tile is above #$26. Landed on scaffolding etc.
            ldy #$04                        // (2bf9) Load Y with #$04
            ldx $02                         // (2bfb) Load X with #$02
            rts                             // (2bfd) Return from subroutine confirming spikes.


Tile_check_floor_type_2:
            iny                             // (2bfe) Increase Y to #$06. This will allow for checking the adjoining tile.
            dex                             // (2bff) Decrease X to #$01. Loop for one time to get the adjoining tile.
            bne Tile_check_floor_type       // (2c00) Loop to Tile_check_floor_type. Loop to get the adjoining tile.
            ldx #$02                        // (2c02) Load X with #$02. 
            dey                             // (2c04) Decrease Y to #$05.


Tile_check_conveyor_1:
            lda (active_input_mode_low),y       // (2c05) Load map tile (Roughly $4333). 
            cmp #$12                        // (2c07) Check if standing on rock flooring.
            bcc l2c17                       // (2c09) Branch if tile is below #$12 (Standing on rock).
            cmp #$22                        // (2c0b) Check if above #$22.
            bcs l2c17                       // (2c0d) Branch if tile is above #$22. Landed on scaffolding etc.
            ldy #$03                        // (2c0f) Load Y with #$03
            ldx $02                         // (2c11) Load X with #$02
            sty Standing_on_conveyor        // (2c13)
            rts


l2c17:
            dey                             // (2c17) Decrease Y. Used to check adjoining tile.
            dex                             // (2c18) Decrease X. This will be for two loops.
            bne Tile_check_conveyor_1       // (2c19) Continue loop.
            iny                             // (2c1b) Increase Y. Used for next check.
            ldx #$02                        // (2c1c) Resets loop counter for next check.


Tile_check_weird:
            lda (active_input_mode_low),y       // (2c1e)
            cmp #$6e                        // (2c20)
            bcc Tile_check_weird_loop       // (2c22)
            cmp #$74                        // (2c24) 
            bcs Tile_check_weird_loop       // (2c26) Touching lift tiles.
            ldy #$02                        // (2c28)
            ldx $02                         // (2c2a)
            sty l1b52                       // (2c2c)
            rts                             // (2c2f)


Tile_check_weird_loop:
            iny                             // (2c30)
            dex                             // (2c31) Decrease X
            bne Tile_check_weird            // (2c32) Loop back to Tile_check_weird.
            dey                             // (2c34)
            ldx #$02                        // (2c35)


Tile_check_lift:
            lda (active_input_mode_low),y
            cmp #$74
            bcc Tile_check_lift_loop
            cmp #$7c
            bcs Tile_check_lift_loop
            ldy #$01
            ldx $02
            sty Standing_on_lift                       // Set fla
            rts


Tile_check_lift_loop:
            dey
            dex                             // Decrease X
            bne Tile_check_lift
            ldy #$f2
            lda (active_input_mode_low),y
            beq l2c57
            cmp #$28
            bcc Tile_catch_all


l2c57:
            dey
            lda (active_input_mode_low),y
            beq Register_falling
            cmp #$28
            bcs Register_falling


Tile_catch_all:                                     // (2c60) Catch all for all other surfaces. Assumes rock or scaffolding.
            ldx #$01                                // (2c60)
            ldy #$00                                // (2c62)
            rts                                     // (2c64)


Register_falling:
            ldy #$00
            ldx $02
            rts


l2c6a:
            lda Character_direction                 // Load A with Character_direction. 01 = Right / 02 = Left.
            cmp #$01                                // Compare Character_direction to #$01.
            beq l2c76                               // If character going right, branch to l2c76
            ldy #$28                                // Load Y with #$28 as character is going left.
            jmp l2c78                               // If character going right, branch to l2c78


l2c76:
            ldy #$2b                                // Load Y with #$2b as character is going right.


l2c78:
            ldx #$05                                // Load X with #$05. Will be used to loop 5 times.


l2c7a:
            lda (active_input_mode_low),y               // (2c7a) Character movement = 4242. Right loads (4242),2b = 426d / Left loads (4242),28.
            beq l2c82                               // Branch to l2c82 if equal to zero.
            cmp #$12                                // ...
            bcc Movement_collision_detected         // ...


l2c82:
            tya                                     // (2c82) Transfer Y to A
            clc                                     // (2c83) Clear carry flag
            adc #$28                                // (2c84) Add with carry
            tay                                     // (2c86) Transfer A to Y
            dex                                     // (2c87) Decrease X
            bne l2c7a                               // (2c88) Loop while X not equal 0. 
            ldx #$00                                // (2c8a) Load X with #$00
            rts                                     // (2c8c) Return from subroutine.


Movement_collision_detected:
            ldx #$01                                // (2c8d) Load X with #$01.
            rts                                     // (2c8f) Return from subroutine.


l2c90:
            ldy #$02


l2c92:
            lda (active_input_mode_low),y
            beq l2c9a
            cmp #$12
            bcc l2ca0


l2c9a:
            dey
            bne l2c92
            ldx #$00
            rts


l2ca0:
            ldx #$01
            rts


l2ca3:
            lda Standing_on_conveyor
            beq l2cab
            jmp l2cbc


l2cab:
            lda Standing_on_lift
            beq l2cb3                           // (2cae) Branch to l2cb3 if not on lift.
            jmp Check_lift_direction                           // (2cb0) Jump to Check_lift_direction as standing on lift.


l2cb3:
            lda l1b52
            beq l2cbb
            jmp l3d39


l2cbb:
            rts


l2cbc:
            lda X_axis_high_byte
            bne l2ccf
            lda X_axis_low_byte
            cmp #$be
            bcs l2ccf
            lda l1b54
            sta l1b3e
            rts


l2ccf:
            lda l1b55
            sta l1b3e
            rts

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

l2d00:
            lda #$77                        // Load A with #77
            sta active_input_mode_low           // Set active_input_mode_low to "second menu"
            lda #$41                        // Load A with #41
            sta active_input_mode_high                         // Set active_input_mode_low to "second menu"
            ldy #$00                        // Load Y with #00
            ldx #$00                        // Load X with #00
            stx $02                         // Store X to $02


l2d0e:
            lda l2d93,x
            sta (active_input_mode_low),y
            inx
            iny
            cpy #$0a
            bne l2d0e
            ldx #$00
            stx second_menu_high_byte 
            jsr Second_Menu_Get_Fire_Event
            ldx $af


l2d22:
            stx second_menu_high_byte       // Store X to $af
            lda #$00                        // Load A with #00
            sta l1b6a                       // Store A to l1b6a
            jsr Get_Joystick_Input          // Get joystick inputs
            ldx second_menu_high_byte       // Load X with $af
            lda Joy_Fire                    // Load fire event.
            bne Second_Menu_Fire            // Branch if not equal zero.
            lda Joy_Left_Right
            beq l2d22                       // Loop again if no input.
            bmi l2d53                       // Left detected on second menu and branch to l2d53.
            lda $02                         // Load A with $02
            beq l2d22                       // Loop again if $02 equals zero.
            ldx second_menu_high_byte       // Load X with $af.
            txa                             // Transfer X to A.
            sec                             // Set carry flag.
            sbc #$0a                        // Subtract with carry.
            sta second_menu_low_byte        // Store A to $ae.


l2d46:
            dex                             // Decrease X
            jsr l2dfd                       // 
            cpx $ae
            bne l2d46
            dec $02
            jmp l2d22


l2d53:
            lda Second_Menu_Position        // Load A with $02
            cmp #$07                        // Compare Second_Menu_Position with #07 (Abort). Check if end of the menu.
            beq l2d22                       // If Abort is selected, jump to l2d22 which wont allow menu to go past abort option.
            txa                             // Transfer X to A
            clc                             // Clear carry
            adc #$0a                        // Add with carry #0a
            sta second_menu_low_byte        // Store A to $ae


l2d5f:
            inx                             // Increase X
            jsr l2dfd                       // Jump to l2dfd
            nop                             // No operation
            nop                             // No operation
            cpx second_menu_low_byte        // Compare X to $ae
            bne l2d5f                       // Loop again if not equal zero.
            inc $02                         // Increase $02 - Increasing the menu option.
            jmp l2d22                       // Jump to l2d22


Second_Menu_Fire:                           // $2d6e
            lda $02                         // Load A with $02
            asl                             // Arithmetic shift left
            tay                             // Transfer A to Y
            lda l2de5,y                     // Load A with l2de5,y
            sta l2d7f                       // Store A to l2d7f
            lda l2de6,y                     // Load A with l2de6,y  
            sta l2d80                       // Store A to l2d80
            jmp Get_X_position              // Jump to Get_X_position

.byte $00, $82, $ff, $ff, $ff, $ff, $fe, $ff, $ff, $ff, $ff, $ff, $2a, $2a, $02, $45, $54, $55

l2d93:

.byte $ac, $ac, $be, $b1, $c0, $c1, $be, $ba, $ac, $ac, $ac, $b1, $c4, $ad, $b9, $b5, $ba, $b1, $ac, $ac, $ac, $ac, $ac, $c1, $bf, $b1, $ac, $ac, $ac, $ac, $ac, $b3, $b1, $c0, $00, $b8, $b5, $b2, $c0, $ac, $ac, $c3, $b5, $ba, $af, $b4, $00, $c1, $bc, $ac, $c3, $b5, $ba, $af, $b4, $00, $b0, $bb, $c3, $ba, $ac, $ac, $bc, $ad, $c1, $bf, $b1, $ac, $ac, $ac, $ac, $ac, $ad, $ae, $bb, $be, $c0, $ac, $ac, $ac, $fe, $fe


// SECOND MENU FUNCTION //

l2dfd:
            ldy #$00                        // Load Y with #00


l2dff:
            lda l2d93,x                     // Load A with l2d93,x 
            sta (active_input_mode_low),y       // Store A with (active_input_mode_low),y 
            inx                             // Increase X
            iny                             // Increase Y
            cpy #$0a                        // Compare Y
            bne l2dff                       // Branch if not equal zero
            txa                             // Transfer X to A
            sec                             // Set carry flag
            sbc #$0a                        // Subtract with carry 
            tax                             // Transfer A to X
            lda #$05                        // Load A with #05


l2e11:
            pha                             // Push accumulator to the stack
            lda #$ff                        // Load A with 


l2e14:
            sec                             // Set carry flag
            sbc #$01                        // Subtract with carry
            bne l2e14                       // Branch if not equal zero
            pla                             // Pull from the stack to accumulator
            sec                             // Set carry flag
            sbc #$01                        // Subtract with carry
            bne l2e11                       // Branch not equal zero
            rts                             // Return from subroutine


Second_Menu_Get_Fire_Event:                 // Second menu entry $2e20 / l2e20
            jsr Get_Joystick_Input          // Set joystick input
            lda Joy_Fire                    // Load value of joy stick fire
            bne Second_Menu_Get_Fire_Event  // Loop until fire detected
            jsr Loop_For_8160               // Time wasting loop
            lda #$01                        // Load A with #01
            sta l1b6b                       // Store A (#01) to l1b6b
            rts


Time_Loop_Fire:                             // Time wasting loop to get menu ready
            jsr Get_Joystick_Input          // Get joystick inputs
            lda Joy_Fire                    // Load fire input value.
            bne Time_Loop_Fire              // Loop back to Time_Loop_Fire waiting for fire input.
            jsr Loop_For_8160               // Time wasting loop. Loops for 8160 times.
            lda #$02                        // Load A with #02
            sta l1b6b                       // Store A to l1b6b. This will store #02.
            rts                             // Return from subroutine

.byte $85, $2b, $a9, $d8, $85, $2c, $a0, $09, $b1, $2b, $c9, $02, $f0, $08, $a9, $02, $91, $2b, $88, $10, $fb, $60, $a9, $01, $4c, $52, $81

Loop_For_8160:
            lda #$20                        // Load A with #20


l2e5f:
            pha                             // Push accumulator to stack (#20)
            lda #$ff                        // Load A with #ff


l2e62:
            sec                             // Set carry flag                             // Set carry flag
            sbc #$01                        // Subtract with carry
            bne l2e62                       // Continue loop at l2e62
            pla                             // Pull from stack to accumulator
            sec                             // Set carry flag                             // Set carry flag
            sbc #$01                        // Subtract with carry
            bne l2e5f                       // Loop back to bigger loop at l2e5f
            rts                             // Return from subroutine

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

First_menu_entry:
            jsr Time_Loop_Fire              // Time wasting loop then #02 is stored to l1b6b.
            lda #$7f                        // Load A with #7f
            sta active_input_mode_low           // Set active_input_mode_low to "first menu"
            lda #$35                        // Load A with #35
            sta active_input_mode_high                         // Set active_input_mode_low to "first menu"
            ldy #$5a                        // Load Y with #5a
            lda #$fe                        // Load A with #fe


l2e8f:
            sta (active_input_mode_low),y       // Store #fe to (active_input_mode_low),y
            dey                             // Decrease Y
            bne l2e8f                       // Loop back two instructions. Will loop 90 times.
            lda #$ff                        // Load A with #ff
            sta l3581                       // Store #ff to l3581
            sta l3583                       // Store #ff to l3583
            lda #$00                        // Load A with #00
            sta l3582                       // Store #00 to l3582
            nop                             // No operation                             // No operation
            nop                             // No operation                             // No operation
            nop                             // No operation                             // No operation
            nop                             // No operation                             // No operation
            nop                             // No operation                             // No operation
            ldy #$01                        // Load Y with #01


Load_Top_Menu_Items:
            lda l3500,y                     // Load A with the value from l3500,y. Picked up items are stored in 3500 ().
                                            // 10 - 27 Dynamite
                                            // 28 = Helmet
                                            // 29 = Helmet                                            
                                            // 2a = 1
                                            // 2b = 2
                                            // 2c = 3
                                            // 2d = 4                                            
                                            // 2e = 5
                                            // 2f = 6
                                            // 30 = 7
                                            // 31 = Grapling hook
                                            // 32 = Detonator
                                            // 33 = Hook
                                            // 34 = Rope
                                            // 35 = Winch drum
                                            // 36 = Plank
                                            // 37 = Plank
                                            // 38 = Lighter
                                            // 39 = Conveyor Winch
                                            // 3a = Winch
            beq l2eb5                       // Branch if the value from A is zero. If not zero, will continue load values until 60.
            sta l3582,y                     // Store the value of A to l3582,y.
            iny                             // Increase Y.
            cpy #$60                        // Compare Y to #60.
            bne Load_Top_Menu_Items         // Continue loop until either value is 0 or 60 times.


l2eb5:
            lda #$ff                        // Load A with #ff
            sta l3582,y                     // Store #ff to l3582,y


l2eba:
            ldx #$01                        // Load X with #01
            stx $ff                         // Store #01 to $ff
            ldx $ff                         // Load X with #01
            txa                             // Transfer X (01) to A
            tay                             // Transfer A to Y                             // Transfer A (01) to Y
            iny                             // Increase Y (02)
            iny                             // Increase Y (03)
            iny                             // Increase Y (04)
            sty $ad                         // Store #04 to $ad
            lda #$fe                        // Load A with #fe
            sta $fd                         // Store #fe to $fd
            lda #$40                        // Load A with #40
            sta $fe                         // Store #40 to $fe


Top_Menu_Item_Check:
            lda l3580,x                     // Load A with l3580,x
            cmp #$ff                        // Compare A to #ff. Check if next item is blank (#ff).
            bne l2ed9                       // Branch to l2ed9 if item is there.
            jmp l2f6b                       // Jump to l2f6b since there is no item in the menu.


l2ed9:
            cmp #$00                        // Compare A (Loaded from l3580,x) to #00. Checking if anything else in inventory.
            beq l2f26                       // Branch if no more items in inventory.
            tay                             // Transfer A to Y                             // Transfer A to Y.
            lda l332f,y                     // Load A with l332f,y
            sta l2eed                       // Store A to l2eed
            lda l336f,y                     // Load A with l336f,y
            sta l2eee                       // Store A to l2eee (Self-modifying code)


l2eea:
            ldy #$03                        // Load Y with #03


// **** CHANGE TOP MENU OPTIONS **** //

l2eec:
            lda l367c,y                     // Load A with l367c,y  
            sta ($fd),y                     // Store A to ($fd),y
            dey                             // Decrease Y
            bmi l2f08                       // Branch if minus
            cpy #$01                        // Compare to #01
            bne l2eec                       // Loop if not zero.
            lda $fd                         // Load A with $fd
            sec                             // Set carry flag 
            sbc #$26                        // Subtract with carry #26
            sta $fd                         // Store A to $fd
            lda $fe                         // Load A with $fe
            sbc #$00                        // Subtract with carry #00
            sta $fe                         // Store A to $fe
            jmp l2eec                       // Loop back to l2eec.


l2f08:
            lda $fd                         // Load A with $fd
            clc                             // Clear carry flag
            adc #$29                        // Add with carry #29
            sta $fd                         // Store A to $fd
            lda $fe                         // Load A with $fe
            adc #$00                        // Add with carry #00
            sta $fe                         // Store A to $fe
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            inx                             // Increase X
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            cpx $ad                         // Comare X to $ad
            bne Top_Menu_Item_Check         // Branch if not equal zero.
            jmp l2f78                       // Jump to l2f78.


l2f26:
            lda #$78
            sta l2eed
            lda #$36
            sta l2eee
            jmp l2eea


l2f33:
            jsr Get_Joystick_Input

l2f36:
            lda Joy_Fire                    // Load the joystick fire value.
            beq l2f44                       // Branch if no fire event recorded.
            lda l1b6a                       // Load A with l1b6a                   
            beq l2f41                       // Branch if l1b6a equals zero.
            rts                             // Return from subroutine


l2f41:
            jmp l2d00


l2f44:
            lda Joy_Left_Right              // Load Joy_Left_Right.
            beq l2f33                       // Branch if no input. 
            bpl l2f5c                       // 
            ldx $ff
            inx
            inx
            inx
            lda l3580,x
            cmp #$fe
            beq l2f33
            inc $ff
            jmp l2ebe


l2f5c:
            ldx $ff
            dex
            lda l3580,x
            cmp #$fe
            beq l2f33
            dec $ff
            jmp l2ebe

l2f6b:
            lda #$7c                        // Load A with #7c
            sta l2eed                       // Store #7c to. This is defaulting 2eed/2eee to $367c
            lda #$36                        // Load A with #36
            sta l2eee                       // Store #36 to. This is defaulting 2eed/2eee to $367c
            jmp l2eea                       // Jump to l2eea


l2f78:
            jsr Time_Loop_Fire
            jmp l2f33

.byte $00, $00, $02, $ff, $ff, $ff, $ff, $ff, $02, $ff, $02, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe

l3000:
            lda #$c7                        // Load A with #c7
            sec                             // Set carry flag
            sbc Y_axis_low_byte             // Subtract with carry
            clc                             // Clear carry flag
            adc X_axis_low_byte             // Add with carry
            sta second_menu_low_byte        // Store A to $ae
            lda X_axis_high_byte            // Load A with X_axis_high_byte
            adc #$00                        // Add with carry #00
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            nop                             // No operation
            tay                             // Transfer A to Y
            ldx #$15                        // Load X with #15
            stx Second_Menu_Position        // Store X to $02
            lda #$00                        // Load A with #00
            sta $fd                         // Store A to $fd
            tya                             // Transfer Y to A
            ldx #$08                        // Set X with #08
            sec                             // Set carry flag


l302b:
            php                             // Push processor flags
            rol $fd                         // Rotate Left
            asl second_menu_low_byte                         // Arithmetic shift left
            rol                             // Rotate Left
            plp                             // Pull processor flags
            bcc l3039                       // Branch if carry is clear
            sbc Second_Menu_Position        // Subtract with carry
            jmp l303b                       // Jump to l303b


l3039:
            adc $02


l303b:
            dex                             // Decrease X
            bne l302b
            bcs l3043
            adc $02
            clc                             // Clear carry flag


l3043:
            rol $fd
            sta $fe
            lda $fd
            and #$03
            tax
            lda l307b,x
            ldx #$07


l3051:
            sta l4b70,x
            dex                             // Decrease X
            bpl l3051
            lda $fd
            lsr
            lsr
            tay                             // Transfer A to Y
            dey
            lda #$00
            sta Screen_Giger_line_top,y     // Gigercounter line position on screen.
            sta Screen_Giger_line_bot,y     // Gigercounter line position on screen.
            iny
            iny
            cpy #$06
            beq l3071
            sta Screen_Giger_line_top,y
            sta Screen_Giger_line_bot,y


l3071:
            dey
            lda #$6e
            sta Screen_Giger_line_top,y
            sta Screen_Giger_line_bot,y
            rts


l307b:

.byte $c0, $30, $0c, $03, $01

l3080:
            ldx #$3f


l3082:
            stx $02
            lda l312f,x
            beq l30dd
            lda #$7f
            sta active_input_mode_high
            lda l322f,x
            beq l30a1
            tay                             // Transfer A to Y
            lda #$ff
            nop                             // No operation
            nop                             // No operation


l3097:
            clc                             // Clear carry flag
            adc #$96
            bcc l309e
            inc active_input_mode_high


l309e:
            dey
            bne l3097


l30a1:
            clc                             // Clear carry flag
            adc l31af,x
            bcc l30a9
            inc active_input_mode_high


l30a9:
            sta active_input_mode_low
            lda l31ef,x
            beq l30b2
            inc active_input_mode_high


l30b2:
            lda l326f,x
            clc                             // Clear carry flag
            adc #$64
            pha
            lda l32af,x
            tay                             // Transfer A to Y
            sty $fd
            lda l32ef,x
            tax


l30c3:
            pla


l30c4:
            sta (active_input_mode_low),y
            dey
            bne l30c4
            ldy $fd
            dex                             // Decrease X
            beq l30dd
            pha
            lda active_input_mode_low
            clc                             // Clear carry flag
            adc #$96
            sta active_input_mode_low
            bcc l30da
            inc active_input_mode_high


l30da:
            jmp l30c3


l30dd:
            ldx $02
            dex                             // Decrease X
            bpl l3082
            rts

.byte $66, $66, $85, $ae, $90, $02, $e6, $af, $b9, $ff, $ff, $91, $ae, $88, $10, $f8, $a5, $ae, $18, $69, $28, $85, $ae, $a5, $af, $69, $00, $85, $af, $ad, $ec, $30, $18, $65, $fe, $8d, $ec, $30, $ad, $ed, $30, $69, $00, $8d, $ed, $30, $a4, $fe, $ca, $10, $d5, $68, $aa, $4c, $a3, $30, $01, $01, $01, $01, $01, $00, $01, $9e, $00, $01, $94, $00, $01, $ff, $00, $01, $ff, $80, $00, $ff

l312f:

.byte $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00

l316f:

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

l31af:

.byte $14, $14, $13, $2d, $74, $87, $85, $58, $0d, $00, $06, $03, $50, $54, $69, $91, $00, $33, $6d, $30, $68, $24, $22, $19, $1d, $25, $38, $54, $74, $7d, $6f, $78, $57, $3d, $2c, $0e, $24, $63, $8e, $7d, $03, $5e, $5c, $5b, $31, $79, $92, $11, $6a, $18, $88, $92, $27, $28, $27, $17, $74, $8b, $8a, $28, $51, $00, $00, $00

l31ef:

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

l322f:

.byte $25, $39, $5a, $5f, $19, $33, $0d, $46, $14, $11, $29, $4a, $43, $3f, $1e, $32, $00, $09, $09, $13, $1a, $21, $27, $2e, $34, $35, $33, $30, $27, $2c, $38, $3d, $3e, $48, $45, $55, $54, $61, $51, $18, $0e, $48, $61, $3e, $45, $1f, $2c, $38, $1d, $09, $1d, $48, $28, $54, $1d, $5e, $09, $23, $31, $3e, $23, $00, $00, $00

l326f:

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $02, $03, $04, $05, $06, $07, $08, $09, $0a, $0b, $0c, $0d, $0e, $0f, $0f, $10, $11, $12, $13, $14, $00, $00, $00

l32af:

.byte $02, $02, $01, $01, $02, $01, $09, $01, $02, $01, $03, $02, $03, $02, $02, $03, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $02, $00, $00, $00

l32ef:

.byte $01, $01, $05, $03, $03, $03, $01, $03, $01, $01, $01, $01, $01, $01, $01, $01, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $02, $00, $00, $00

l332f:

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $28, $28, $58, $5c, $60, $64, $68, $6c, $70, $24, $48, $40, $38, $3c, $2c, $2c, $44, $30, $34, $00, $00, $00, $00, $00

l336f:

.byte $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $d4, $28, $0a, $00, $00, $22, $aa, $a2, $05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fb, $31, $36, $00, $00, $4e, $76, $67, $00, $00, $79, $84, $8d, $b9, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $de, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff

l3500:

.byte

l3580:

.byte $00

l3581:

.byte $ff

l3582:

.byte $00

l3583:

.byte $2e

l3584:

.byte $ff

l3585:

.byte $fe, $2d, $39, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $94, $95, $96, $97, $a8, $a9, $aa, $ab, $98, $99, $9a, $9b, $9c, $9d, $9e, $9f, $a0, $a1, $a2, $a3, $a4, $a5, $a6, $a7, $9c, $9d, $9e, $9f, $a8, $a9, $aa, $ab, $98, $99, $9a, $9b, $db, $dc, $dd, $de, $df, $e0, $e1, $e2, $e3, $e4, $e5, $e6, $e7, $e8, $e9, $ea, $eb, $ec, $ed, $ee, $ef, $f0, $f1, $f2, $f3, $f4, $f5, $f6, $00, $00, $00, $00, $d1, $d2, $d3, $d4

l367c:

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $20, $2e, $20, $7d, $3b, $60, $a6, $ff, $e8, $bd, $80, $35, $f0, $19, $c9, $ff, $f0, $15, $a8, $b9, $6f, $32, $0a, $a8, $b9, $ce, $36, $8d, $c6, $36, $b9, $cf, $36, $8d, $c7, $36, $4c, $ff, $ff, $20, $9c, $3b, $4c, $00, $2d, $a0, $36, $27, $38, $99, $38, $9c, $38, $b7, $38, $bf, $38, $c4, $38, $c9, $38, $ce, $38, $d3, $38, $d8, $38, $24, $39, $27, $39, $30, $39, $64, $39, $70, $39, $e0, $39, $0d, $3a, $3d, $3a, $46, $3a

l36a0:
            jsr 2e20
            jsr 3b7d
            rts 

Second_Menu_Use:                            // l36a7 / $36a7
            ldx ff                          // Load X with #ff. This is the index of the inventory. e.g Item #2 is #03.
            inx                             // Increase X. This will ensure we are off the arrow at the start of the inventory. e.g. Index #03 becomes #04.
            lda 3580,x                      // Load A with 3580,x. Locating the item with the index from above. e.g Load 3580, 04 = 3584. Which could load dynamite as 1b.
            beq 36c8                        // Branch to 36c8 if equal zero. If dynamite loaded, it continues.
            cmp #ff                         // Compare #ff. Check if it is the empty slot in inventory. e.g. Dynamite = 1b.
            beq 36c8                        // Branch to 36c8 if equal zero.
            tay                             // Transfer A to Y. Transfer the item identifier to Y. e.g. Transfer 1b to Y.
            lda 326f,y                      // Load A with 326f,y. e.g. 326f,y becomes 326f,1b which is 328A. Dynamite = 01.
            asl                             // Arithmetic shift left. e.g. Makes A become #02.
            tay                             // Transfer A to Y. e.g. Transfer #02 to Y.
            lda 36ce,y                      // Load A with 36ce,y 
            sta 36c6                        // Store A to 36c6
            lda 36cf,y                      // Load A with 36cf,y
            sta 36c7                        // Store A to 36c7
                                            // 10       Dynamite jump value 326f,10 = 32f7 = #00 = ASL #01. Address becomes 36ce,01 = 36cf (a0) and 36cf,01 = 36d0 (36) stored to 36c6/36c7 as $a036
                                            // 11       Dynamite jump value 326f,11 = 3280 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (38) stored to 36c6/36c7 as $3827 / Use_Dynamite                                            
                                            // 12       Dynamite jump value 326f,12 = 3281 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 13       Dynamite jump value 326f,13 = 3282 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite                                            
                                            // 14       Dynamite jump value 326f,14 = 3283 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 15       Dynamite jump value 326f,15 = 3284 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite                                            
                                            // 16       Dynamite jump value 326f,16 = 3285 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 17       Dynamite jump value 326f,17 = 3286 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite                                            
                                            // 18       Dynamite jump value 326f,18 = 3287 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 19       Dynamite jump value 326f,19 = 3288 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite                                            
                                            // 1a       Dynamite jump value 326f,1a = 3289 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 1b       Dynamite jump value 326f,1b = 328a = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite                                            
                                            // 1c       Dynamite jump value 326f,1c = 328b = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 1d       Dynamite jump value 326f,1d = 328c = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite                                            
                                            // 1e       Dynamite jump value 326f,1e = 328d = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 1f       Dynamite jump value 326f,1f = 328e = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite                                            
                                            // 20       Dynamite jump value 326f,20 = 328f = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 21       Dynamite jump value 326f,21 = 3290 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite                                            
                                            // 22       Dynamite jump value 326f,22 = 3291 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 23       Dynamite jump value 326f,23 = 3292 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite                                            
                                            // 24       Dynamite jump value 326f,24 = 3293 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 25       Dynamite jump value 326f,25 = 3294 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite                                            
                                            // 26       Dynamite jump value 326f,26 = 3295 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 27       Dynamite jump value 326f,27 = 3296 = #01 = ASL #02. Address becomes 36ce,02 = 36d0 (27) and 36cf,02 = 36d1 (36) stored to 36c6/36c7 as $3827 / Use_Dynamite
                                            // 28       Helmet   jump value 326f,28 = 3297 = #02 = ASL #04. Address becomes 36ce,04 = 36d2 (99) and 36cf,04 = 36d3 (38) stored to 36c6/36c7 as $3899 / Use_Helmet
                                            // 29       Helmet   jump value 326f,29 = 3298 = #02 = ASL #04. Address becomes 36ce,04 = 36d2 (99) and 36cf,04 = 36d3 (38) stored to 36c6/36c7 as $3899 / Use_Helmet                                         
                                            // 2a       Number 1 jump value 326f,2a = 3299 = #03 = ASL #06. Address becomes 36ce,06 = 36d4 (9c) and 36cf,06 = 36d5 (38) stored to 36c6/36c7 as $389c / Use_Number_1
                                            // 2b       Number 2 jump value 326f,2b = 329a = #04 = ASL #08. Address becomes 36ce,08 = 36d6 (b7) and 36cf,08 = 36d7 (38) stored to 36c6/36c7 as $38b7 / Use_Number_2
                                            // 2c       Number 3 jump value 326f,2c = 329b = #05 = ASL #0a. Address becomes 36ce,0a = 36d8 (bf) and 36cf,0a = 36d9 (38) stored to 36c6/36c7 as $38bf / Use_Number_3
                                            // 2d       Number 4 jump value 326f,2d = 329c = #06 = ASL #0c. Address becomes 36ce,0c = 36da (c4) and 36cf,0c = 36db (38) stored to 36c6/36c7 as $38c4 / Use_Number_4                                            
                                            // 2e       Number 5 jump value 326f,2e = 329d = #07 = ASL #0e. Address becomes 36ce,0e = 36dc (c9) and 36cf,0e = 36dd (38) stored to 36c6/36c7 as $38c9 / Use_Number_5
                                            // 2f       Number 6 jump value 326f,2f = 329e = #08 = ASL #10. Address becomes 36ce,10 = 36de (ce) and 36cf,10 = 36df (38) stored to 36c6/36c7 as $38ce / Use_Number_6
                                            // 30       Number 7 jump value 326f,30 = 329f = #09 = ASL #12. Address becomes 36ce,12 = 36e0 (d3) and 36cf,12 = 36e1 (38) stored to 36c6/36c7 as $38d3 / Use_Number_7
                                            // 31  Grapling hook jump value 326f,31 = 32a0 = #0a = ASL #14. Address becomes 36ce,14 = 36e2 (d8) and 36cf,14 = 36e3 (38) stored to 36c6/36c7 as $38d8 / Use_Grapling_Hook
                                            // 32      Detonator jump value 326f,32 = 32a1 = #0b = ASL #16. Address becomes 36ce,16 = 36e4 (24) and 36cf,16 = 36e5 (39) stored to 36c6/36c7 as $3924 / Use_Detonator
                                            // 33           Hook jump value 326f,33 = 32a2 = #0c = ASL #18. Address becomes 36ce,18 = 36e6 (27) and 36cf,18 = 36e7 (39) stored to 36c6/36c7 as $3927 / Use_Hook
                                            // 34           Rope jump value 326f,34 = 32a3 = #0d = ASL #1a. Address becomes 36ce,1a = 36e8 (30) and 36cf,1a = 36e9 (39) stored to 36c6/36c7 as $3930 / Use_Rope
                                            // 35     Winch drum jump value 326f,35 = 32a4 = #0e = ASL #1c. Address becomes 36ce,1c = 36ea (64) and 36cf,1c = 36eb (39) stored to 36c6/36c7 as $3964 / Use_Winch_Drum
                                            // 36          Plank jump value 326f,36 = 32a5 = #0f = ASL #1e. Address becomes 36ce,1e = 36ec (70) and 36cf,1e = 36ed (39) stored to 36c6/36c7 as $3970 / Use_Hemlet
                                            // 37          Plank jump value 326f,37 = 32a6 = #0f = ASL #1e. Address becomes 36ce,1e = 36ec (70) and 36cf,1e = 36ed (39) stored to 36c6/36c7 as $3970 / Use_Hemlet
                                            // 38        Lighter jump value 326f,38 = 32a7 = #10 = ASL #20. Address becomes 36ce,20 = 36ee (e0) and 36cf,20 = 36ef (39) stored to 36c6/36c7 as $39e0 / Use_Lighter
                                            // 39 Conveyor Winch jump value 326f,39 = 32a8 = #11 = ASL #22. Address becomes 36ce,22 = 36f0 (0d) and 36cf,22 = 36f1 (3a) stored to 36c6/36c7 as $3a0d / Use_Conveyor_Winch
                                            // 3a          Winch jump value 326f,3a = 32a9 = #12 = ASL #24. Address becomes 36ce,24 = 36f2 (3d) and 36cf,24 = 36f3 (3a) stored to 36c6/36c7 as $3a3d / Use_Winch
            jmp Use_Dynamite                // Jump to Use_Dynamite / $3827
            jsr 3b9c
            jmp 2d00


Get_X_position:
            jsr Second_Menu_Get_Fire_Event  // Get second menu fire event
            ldx #$11                        // Load X with #11
            lda X_axis_low_byte             // Load A with X_axis_low_byte ($1b04)
            sec                             // Set carry flag
            sbc #$03                        // Subtract with carry #03
            lsr                             // Logical shift right
            ldy X_axis_high_byte            // Load the X axis high byte ($1b04)
            beq Get_Y_position              // Branch if X_axis_high_byte is zero
            ora #$80                        // Logical OR on accumulator


Get_Y_position:
            sta active_input_mode_low           // Store X position to active_input_mode_low
            lda Y_axis_low_byte             // Load A with Y axis low byte
            clc                             // Clear carry flag
            adc #$05                        // Add with carry
            lsr                             // Logical shift right
            sta $fd                         // Store Y position to $fd


Examine_action:                             // Examine / $3714
            lda l316f,x                     // Load A with l316f,x  
            bne l373f                       // Branch to l373f if not equal zero. Basically keep going if something is there.
            lda l322f,x                     // Load A with l322f,x 
            cmp $fd                         // Compare to $fd (Y position)
            bne l373f                       // Branch to l373f if not equal zero.
            lda l31af,x                     // Load A with l31af,x
            cmp active_input_mode_low                         // Compare to active_input_mode_low (X position)
            bcc l373f                       // Branch to l373f if carry is clear.
            sec                             // Set carry flag
            sbc #$05                        // Subtract with carry #05
            cmp active_input_mode_low                         // Compare to active_input_mode_low
            bcs l373f                       // Branch to l373f if carry is set.
            txa                             // Transfer X to A
            sta l3583                       // Store A to l3583. I recon this is putting the item into the top menu for viewing - not in inventory.
            lda #$ff                        // Load A with #ff
            sta l3584                       // Store A to l3584
            lda #$fe                        // Load A with #fe
            sta l3585                       // Store A to l3585
            jmp l3747                       // Jump to l3747


l373f:
            inx                             // Increase X
            cpx #$40                        // Compare X to #40
            bne l3714                       // If not equal, branch to l3714
            jmp Finish_Use_Routines_2       // Jump to l3b9c / Finish_Use_Routines_2


l3747:
            lda #$01                        // Load A with #01
            sta l1b6a                       // Store A to l1b6a
            jsr l2eba                       // Jump to subroutine l2eba. Think this is setting up top menu.
            ldx $ff                         // Load X with #ff
            cpx #$01                        // Compare X with #01
            bne l375b                       // Branch to l375b if not equal
            jsr Finish_Use_Routines_1                       //
            jmp l2d00


l375b:
            inx                             // Increase X
            lda l3580,x                     // Load value of item found. e.g. Detonator = #32
            cmp #$32                        // Compare item found to #32
            bne l3774                       // If item is not 32 / detonator, branch to l3774.
            ldx l1b90                       // Load Winch, Rope, Hook, Drum check value.
            cpx #$04                        // Check if all are used.
            bne Jump_To_l3b9c               //
            ldx num_codes_entered
            cpx #$05
            beq l3774


Jump_To_l3b9c:
            jmp Finish_Use_Routines_2


l3774:
            pha
            tay                             // Transfer A to Y
            lda #$01                        // Load A with #01
            sta l316f,y
            lda l326f,y
            asl
            tay                             // Transfer A to Y
            lda l37ae,y
            sta l378d
            lda l37af,y
            sta l378e
            jsr l3a5f
            ldy #$01


l3791:
            lda l3500,y
            beq l379a
            iny
            jmp l3791


l379a:
            pla
            tax
            sta l3500,y
            iny
            lda #$00
            sta l3500,y
            jsr l37d6
            jsr Finish_Use_Routines_1
            jmp Get_X_position


l37ae:

.byte $a0

l37af:

.byte $36, $47, $3a, $4b, $3a, $4f, $3a, $53, $3a, $57, $3a, $5b, $3a, $5f, $3a, $63, $3a, $67, $3a, $6b, $3a, $6f, $3a, $73, $3a, $77, $3a, $7b, $3a, $7f, $3a, $83, $3a, $87, $3a, $8b, $3a, $8f, $3a

l37d6:
            lda #$7f
            sta active_input_mode_high
            lda l322f,x
            beq l37ec
            tay                             // Transfer A to Y
            lda #$ff


l37e2:
            clc                             // Clear carry flag
            adc #$96
            bcc l37e9
            inc active_input_mode_high


l37e9:
            dey
            bne l37e2


l37ec:
            clc                             // Clear carry flag
            adc l31af,x
            bcc l37f4
            inc $fc


l37f4:
            sta active_input_mode_low
            lda l31ef,x
            beq l37fd
            inc active_input_mode_high


l37fd:
            lda l32af,x
            tay                             // Transfer A to Y
            sty $fd
            lda l32ef,x
            tax


l3807:
            lda #$00


l3809:
            sta (active_input_mode_low),y
            dey
            bne l3809
            ldy $fd
            dex                             // Decrease X
            beq l3821
            lda active_input_mode_low
            clc                             // Clear carry flag
            adc #$96
            sta active_input_mode_low
            bcc l381e
            inc active_input_mode_high


l381e:
            jmp l3807

l3821:
            lda #$01
            sta l1b4f
            rts


Use_Dynamite:                               // $3827
            lda l1b72
            bne l3886
            dec l1b11
            ldx $ff


l3831:
            lda l3582,x
            sta l3581,x
            lda l3500,x
            sta l34ff,x
            inx
            cpx #$3c
            bne l3831
            lda X_axis_low_byte
            lsr
            ldy X_axis_high_byte
            beq l384d
            ora #$80


l384d:
            sta active_input_mode_low
            lda Y_axis_low_byte
            lsr
            sta $fd
            ldx #$0f


l3857:
            lda l312f,x
            beq l3889
            lda l31af,x
            sec
            sbc active_input_mode_low
            cmp #$06
            bcc l386d
            cmp #$f8
            bcs l386d
            jmp l3889


l386d:
            lda l322f,x
            sec
            sbc $fd
            cmp #$06
            bcc l387b
            cmp #$f8
            bcc l3889


l387b:
            stx l1b71
            lda #$01
            sta l1b72
            jmp Finish_Use_Routines_1


l3886:
            jmp Finish_Use_Routines_2


l3889:
            dex
            bpl l3857
            lda #$10
            sta l1b71
            lda #$01
            sta l1b72
            jmp Finish_Use_Routines_1

Use_Helmet:                                 // $3899
            jmp Finish_Use_Routines_2

Use_Number_1:                               // $389c
            lda #$01


l389e:
            ldx X_axis_high_byte            // Load X with X_axis_high_byte #1b05. 
            beq Jmp_to_finish_routine       // Branch to l38bc if equal zero. Do nothing.
            ldx Y_axis_low_byte             // Load X with Y_axis_low_byte #1b06.
            cpx #$55                        // Compare X to #55
            bcs Jmp_to_finish_routine       // Branch to l38bc if carry set. Do nothing.
            ldy num_codes_entered           // Load Y with l1b78
            sta l1b73,y                     // Store A to l1b73,y
            iny                             // Increase Y
            sty num_codes_entered           // Store Y to l1b78
            jmp Finish_Use_Routines_1       // Jump to l3b7d / Finish_Use_Routines


Use_Number_2:                               // $38b7
            lda #$02
            jmp l389e


Jmp_to_finish_routine:
            jmp Finish_Use_Routines_2


Use_Number_3:                               // $38bf
            lda #$03
            jmp l389e


Use_Number_4:                               // $38c4
            lda #$04
            jmp l389e


Use_Number_5:                               // $38c9
            lda #$05
            jmp l389e

Use_Number_6:                               // $38ce
            lda #$06
            jmp l389e

Use_Number_7:                               // $38d3 
            lda #$07
            jmp l389e

Use_Grapling_Hook:                          // $38d8
            lda grapling_hook_deployed      // Load A with grapling_hook_deployed. 01 = deployed.
            bne l3921                       // If grapling_hook_deployed = 01, branch to l3921.
            lda l1b02                       // Load A with l1b02.
            clc                             // Clear carry
            adc #$cb                        // Add with carry #cb
            sta l1b6f                       // Store A to l1b6f.
            sta active_input_mode_low           // Store A to active_input_mode_low.
            lda l1b03 
            adc #$01
            sta l1b70
            sta active_input_mode_high
            ldy #$00
            lda (active_input_mode_low),y
            bne l3921
            sty l1b79


l38fb:
            lda #$41
            sta (active_input_mode_low),y
            inc l1b79
            lda active_input_mode_low
            sec
            sbc #$96
            sta active_input_mode_low
            lda active_input_mode_high
            sbc #$00
            sta active_input_mode_high
            lda (active_input_mode_low),y
            beq l38fb
            lda #$01
            sta grapling_hook_deployed
            sta l1b4f
            jsr l2e31
            jmp Finish_Use_Routines_1


l3921:
            jmp Finish_Use_Routines_2

Use_Detonator:                              // $3924
            jmp Finish_Use_Routines_2


Use_Hook:                                   // $3927
            jsr Only_Use_At_Crane
            inc l1b90
            jmp l3e91

Use_Rope:                                     // $3930
            lda l1b96
            beq l396d
            jsr Only_Use_At_Crane
            inc l1b90
            jsr l3e91
            lda #$0d
            sta active_input_mode_low
            lda #$84
            sta active_input_mode_high
            ldx #$17
            ldy #$00


l394a:
            lda #$41
            sta (active_input_mode_low),y
            lda active_input_mode_low
            clc
            adc #$96
            sta active_input_mode_low
            lda active_input_mode_high
            adc #$00
            sta active_input_mode_high
            dex
            bne l394a
            inc l1b4f
            jmp Finish_Use_Routines_1

Use_Winch_Drum:                            // $3964
            jsr Only_Use_At_Crane
            inc l1b90
            jmp l3e91


l396d:
            jmp Finish_Use_Routines_2


Use_Hemlet:                                 // $3970
            lda l3580,x
            sec
            sbc #$54
            bne l39c9
            jsr l398f
            lda #$51
            sta active_input_mode_low
            lda #$86
            sta active_input_mode_high
            jsr l39a8
            jsr l39b5
            dec l1b15
            jmp Finish_Use_Routines_1


l398f:
            lda Y_axis_low_byte
            cmp #$0d
            beq l399b


l3996:
            pla
            pla
            jmp Finish_Use_Routines_2


l399b:
            lda X_axis_high_byte
            bne l3996
            lda X_axis_low_byte
            cmp #$dc
            bcc l3996
            rts


l39a8:
            ldy #$04
            lda #$43


l39ac:
            sta (active_input_mode_low),y
            dey
            bpl l39ac
            inc l1b4f
            rts


l39b5:
            ldx $ff


l39b7:
            lda l3582,x
            sta l3581,x
            lda l3500,x
            sta l34ff,x
            inx
            cpx #$3c
            bne l39b7
            rts


l39c9:
            jsr l398f
            lda #$56
            sta active_input_mode_low
            lda #$86
            sta active_input_mode_high
            jsr l39a8
            jsr l39b5
            dec l1b15
            jmp Finish_Use_Routines_1


Use_Lighter:                                // $39e0
            lda l1b72
            beq l3a0a
            jsr l1170
            ldx l1b71
            cpx #$10
            beq l39fd
            jsr l37d6
            ldx l1b71
            lda #$00
            sta l312f,x
            sta l31af,x


l39fd:
            lda #$00
            sta l1b72
            cpx #$03
            bne l3a09
            jmp l3e00


l3a09:
            rts


l3a0a:
            jmp Finish_Use_Routines_2


Use_Conveyor_Winch:                             // $3a0d
            lda Y_axis_low_byte                 // Load Y low byte
            cmp #$99                            // Check if low Y low byte is #99
            bne Jmp_Finish_Use_Routines_2       // If not equal, jump out.
            lda X_axis_high_byte                // Load X high byte #00
            bne l3a2f                           // Jump out if not equal #00
            lda X_axis_low_byte                 
            cmp #$3c
            bcc Jmp_Finish_Use_Routines_2
            cmp #$be
            bcs l3a2f
            lda l1b54
            eor #$fe
            sta l1b54
            jmp Finish_Use_Routines_1


l3a2f:
            lda l1b55
            eor #$fe
            sta l1b55
            jmp Finish_Use_Routines_1


Jmp_Finish_Use_Routines_2:
            jmp Finish_Use_Routines_2

Use_Winch:                                  // $3a3d
            jsr Only_Use_At_Crane
            inc l1b90
            jmp l3e91

l3a43:
            jmp l3e91


l3a46:
            rts


l3a47:
            inc l1b11
            rts


Register_Helmet_1:                      // $3a4b
            inc l1b16
            rts


Regsister_Num_1:                        // $3a4f
            inc l1b1d
            rts


Regsister_Num_2:                        // $3a53
            inc l1b1e
            rts


Regsister_Num_3:                        // $3a57
            inc l1b1f
            rts


Register_Num_4:                         // $3a5b
            inc l1b20
            rts


Register_Num_5:                         // $3a5f
            inc l1b21
            rts


Register_Num_6:                         // $3a63
            inc l1b22
            rts


Register_Num_7:                         // $3a67
            inc l1b23
            rts


Register_Grapling_Pickup:               // $3a6b
            inc l1b13
            rts


l3a6f:
            inc l1b4d
            rts


Register_Hook:                          // $3a73
            inc l1b1a
            rts


l3a77:
            inc l1b18
            rts


Regsiter_Winch_Drum:                    // $3a7b
            inc l1b19
            rts


Register_Plank_1:                       // $3a7f
            inc l1b15
            rts


Register_Lighter:                       // $3a83
            inc l1b12
            rts


Register_Winch:                         // $3a87
            inc l1b1c
            rts


Register_Conveyor_Winch:                // $3a8b
            inc l1b1b
            rts

.byte $60, $68, $68, $4c, $40, $25, $ad, $04, $1b, $c9, $82, $90, $0b, $c9, $aa, $b0, $07, $ad, $06, $1b, $c9, $98, $90, $03, $4c, $9c, $3b, $a2, $10, $a0, $00, $88, $d0, $fd, $ca, $d0, $fa, $ad, $69, $1b, $38, $e9, $07, $cd, $06, $1b, $d0, $03, $4c, $7a, $3b, $90, $5b, $29, $01, $d0, $14, $a2, $74, $8e, $63, $12, $e8, $8e, $e3, $12, $a2, $00, $8e, $63, $13, $8e, $e3, $13, $4c, $16, $3b, $ad, $67, $1b, $38, $e9, $96, $8d, $67, $1b, $85, $fb, $ad, $68, $1b, $e9, $00, $8d, $68, $1b, $85, $fc, $a2, $00, $8e, $63, $12, $8e, $e3, $12, $a2, $74, $8e, $63, $13, $e8, $8e, $e3, $13, $a0, $03, $a9, $63, $91, $fb, $88, $10, $fb, $a0, $99, $a9, $00, $91, $fb, $88, $c0, $95, $d0, $f9, $ee, $4f, $1b, $ce, $69, $1b, $4c, $95, $3a, $29, $01, $f0, $14, $a2, $00, $8e, $63, $12, $8e, $e3, $12, $a2, $74, $8e, $63, $13, $e8, $8e, $e3, $13, $4c, $71, $3b, $ad, $67, $1b, $85, $fb, $18, $69, $96, $8d, $67, $1b, $ad, $68, $1b, $85, $fc, $69, $00, $8d, $68, $1b, $a2, $74, $8e, $63, $12, $e8, $8e, $e3, $12, $a2, $00, $8e, $63, $13, $8e, $e3, $13, $a0, $03, $a9, $00, $91, $fb, $88, $10, $fb, $a0, $99, $a9, $63, $91, $fb, $88, $c0, $95, $d0, $f9, $ee, $4f, $1b, $ee, $69, $1b, $4c, $95, $3a, $4c, $7d, $3b

Finish_Use_Routines_1:                      // $3b79
            lda #$00                        // Load A with #00
            sta ld40b                       // voice 2 control register
            lda #$32                        // Load A with #32
            sta ld407                       // voice 2 frequency low byte
            lda #$20
            sta ld408                       // voice 2 frequency high byte
            lda #$09
            sta ld40c                       // voice 2 attack and decay length
            lda #$09
            sta ld40d                       // voice 2 sustain volume and release length
            lda #$11
            sta ld40b                       // voice 2 control register
            rts


Finish_Use_Routines_2:                      // $3b9c
            lda #$00
            sta ld40b                       // voice 2 control register
            lda #$32
            sta ld407                       // voice 2 frequency low byte
            lda #$08
            sta ld408                       // voice 2 frequency high byte
            lda #$07
            sta ld40c                       // voice 2 attack and decay length
            lda #$08
            sta ld40d                       // voice 2 sustain volume and release length
            lda #$21
            sta ld40b                       // voice 2 control register
            rts

Second_Menu_Pause:                          // $3bbb
            jsr Second_Menu_Get_Fire_Event  // Jump to subroutine Second_Menu_Get_Fire_Event
            lda #$01                        // Load A with #01
            sta l1b80                       // Store #01 to l1b80


Second_Menu_Pause_Cont:
            jsr Get_Joystick_Input          // Get joystick inputs
            lda Joy_Fire                    // Get joystick fire value
            beq Second_Menu_Pause_Cont      // If no fire detected loop
            lda #$00                        // Load A with #00
            sta l1b80                       // Store A to l1b80
            rts

.byte $80, $c8, $3b, $00, $32, $33, $00, $9e, $3b, $0a, $b2, $1b, $00, $c4, $39, $d5, $12, $3b, $48, $fa, $1b, $16, $12, $b9, $01, $f0, $bb, $a2, $23, $bb, $3f, $ae, $3b, $32, $8b, $2e, $4f, $50, $e7, $20, $4c, $49, $02, $00, $08, $00, $00

l3c00:
            rts


Check_lift_direction:
            lda Joy_Up_Down                 // Load Joy_Up_Down input value.
            beq l3c00                       // Branch to l3c00 if no input.
            bmi Lift_direction_down         // Branch if up pressed.
            jmp l3c9e                       // Branch if down pressed.


Lift_direction_down:
            jsr Loop_265_times              // Perform loop delay.
            ldx Lift_position               // Top position = 14, bottom position = 98.        
            cpx #$14                        // Check if lift at top position.
            beq l3c00                       // If at top position, branch to l3c00.
            dex                             // Decrease X
            stx Lift_position               // Decrease lift position by 1 and update value.
            txa                             // Transfer lift position to A.
            and #$01                        // Logic AND on A and #$01
            bne Lift_direction_up           // Branch if lift going up.
            lda l3d31                       // Load A with l3d31
            sta l1263
            lda l3d32
            sta l12e3
            lda l3d33
            sta l1363
            lda l3d34
            sta l13e3
            jmp l3c7a


Lift_direction_up:
            lda l1b67
            sec                             // Set carry flag
            sbc #$96
            sta l1b67
            sta active_input_mode_low
            lda l1b68
            sbc #$00
            sta l1b68
            sta active_input_mode_high
            lda l3d35
            sta l1263
            lda l3d36
            sta l12e3
            lda l3d37
            sta l1363
            lda l3d38
            sta l13e3
            ldy #$03                        // Set loop at 3 for next area.
            lda #$63                        // Value for "on lift"


l3c6a:
            sta (active_input_mode_low),y       // (aba5),03. Set aba5-aba7 to 63.
            dey                             // Decrease Y for loop.
            bpl l3c6a                       // Continue loop until negative.
            ldy #$99                        // Load Y with #99
            lda #$00                        // Load A with #00


l3c73:
            sta (active_input_mode_low),y       // (aba5),99
            dey                             // Decrease Y.
            cpy #$95                        // Compare Y to #95. Started at 99 so looping for 4.
            bne l3c73                       // Loop until 95.


l3c7a:
            lda Y_axis_low_byte
            sec                             // Set carry flag
            sbc #$01
            sta Y_axis_low_byte
            and #$01
            beq l3c98
            lda l1b02
            sec                             // Set carry flag
            sbc #$96
            sta l1b02
            lda l1b03
            sbc #$00
            sta l1b03


l3c98:
            inc l1b4f


l3c9b:
            jmp l3d45


l3c9e:
            jsr Loop_265_times
            ldx Lift_position
            cpx #$98
            beq l3c9b
            inx                             // Increase X
            stx Lift_position
            txa
            and #$01
            beq l3ccc
            lda l3d35
            sta l1263
            lda l3d36
            sta l12e3
            lda l3d37
            sta l1363
            lda l3d38
            sta l13e3
            jmp l3d0d


l3ccc:
            lda l1b67
            sta active_input_mode_low
            clc                             // Clear carry flag
            adc #$96
            sta l1b67
            lda l1b68
            sta active_input_mode_high
            adc #$00
            sta l1b68
            lda l3d31
            sta l1263
            lda l3d32
            sta l12e3
            lda l3d33
            sta l1363
            lda l3d34
            sta l13e3
            ldy #$03
            lda #$00


l3cfd:
            sta (active_input_mode_low),y
            dey
            bpl l3cfd
            ldy #$99
            lda #$63


l3d06:
            sta (active_input_mode_low),y
            dey
            cpy #$95
            bne l3d06


l3d0d:
            lda Y_axis_low_byte
            clc                             // Clear carry flag
            adc #$01
            sta Y_axis_low_byte
            and #$01
            bne l3d2b
            lda l1b02
            clc                             // Clear carry flag
            adc #$96
            sta l1b02
            lda l1b03
            adc #$00
            sta l1b03


l3d2b:
            inc l1b4f
            jmp l3d45


l3d31:

.byte $74

l3d32:

.byte $75

l3d33:

.byte $00

l3d34:

.byte $00

l3d35:

.byte $00

l3d36:

.byte $00

l3d37:

.byte $74

l3d38:

.byte $75

l3d39:
            rts


Loop_265_times:
            ldx #$0a                        // Load X with #0a
            ldy #$00                        // Load Y with #00


Loop_265_times_2:
            dey                             // Decrease Y.
            bne Loop_265_times_2            // If not 0, loop.
            dex                             // Decrease X.
            bne Loop_265_times_2            // Loop if X not 0.
            rts                             // Return from subroutine.


l3d45:
            ldx #$00


l3d47:
            dex                             // Decrease X
            nop                             // No operation
            nop                             // No operation
            bne l3d47
            rts

.byte $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $ce, $65, $1b, $d0, $0a, $a9, $08, $8d, $65, $1b, $4c, $70, $3d, $60, $60, $60, $ad, $6b, $1b, $f0, $1c, $ea, $c9, $01, $f0, $1e, $a9, $07, $ae, $af, $d8, $e0, $07, $d0, $02, $a9, $02, $a2, $0a, $9d, $ae, $d8, $ca, $d0, $fa, $20, $b0, $3d, $60, $20, $b0, $3d, $20, $c0, $3d, $60, $a9, $07, $ae, $4f, $d9, $e0, $07, $d0, $02, $a9, $02, $a2, $0a, $9d, $4e, $d9, $ca, $d0, $fa, $20, $c0, $3d, $60, $fe, $a9, $02, $a2, $0a, $9d, $4e, $d9, $ca, $d0, $fa, $60, $ea, $ea, $ea, $ea, $ea

l3dc0:
            lda #$02                    // Load A with #02
            ldx #$0a


l3dc4:
            sta ld8ae,x
            dex                             // Decrease X
            bne l3dc4
            rts

.byte $ea, $ea, $ea, $ea, $ea, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe

l3e00:
            lda l1b04
            cmp #$69
            bcc l3e08
            rts


l3e08:
            lda Y_axis_low_byte
            cmp #$bd
            beq l3e1c
            lda #$a5
            sta ld009                       // sprite #4 Y position
            lda #$ba
            sta ld00b                       // sprite #5 Y position
            jmp l3e2e


l3e1c:
            lda #$ad
            sta ld009                       // sprite #4 Y position
            lda #$c2
            sta ld00b                       // sprite #5 Y position
            ldx #$00
            stx ld008                       // sprite #4 X position (bits 0-7)
            stx ld00a                       // sprite #5 X position (bits 0-7)


l3e2e:
            ldy #$10
            sty l43fc
            iny
            sty l43fd
            ldx #$04


l3e39:
            inc ld008                       // sprite #4 X position (bits 0-7)
            inc ld00a                       // sprite #5 X position (bits 0-7)
            dex
            bne l3e61
            ldx #$04
            inc l43fc
            inc l43fc
            inc l43fd
            inc l43fd
            lda l43fc
            cmp #$20
            bne l3e61
            lda #$10
            sta l43fc
            lda #$11
            sta l43fd


l3e61:
            lda #$05


l3e63:
            pha
            lda #$00


l3e66:
            sec
            sbc #$01
            bne l3e66
            pla
            sec
            sbc #$01
            bne l3e63
            lda #$69
            sec
            sbc l1b04
            clc
            adc #$5b
            cmp ld008                       // sprite #4 X position (bits 0-7)
            bne l3e39
            ldx #$fe
            stx l43fc
            inx
            stx l43fd
            lda #$01
            sta l1b81
            sta l1b96
            rts


l3e91:
            ldx $ff


l3e93:
            lda l3500,x
            sta l34ff,x
            lda l3582,x
            sta l3581,x
            inx
            cpx #$3c
            bne l3e93
            lda l1b96
            beq l3eb0
            lda l1b90
            cmp #$04
            beq l3eb1


l3eb0:
            rts


l3eb1:
            lda #$ad
            sta ld009                       // sprite #4 Y position
            lda #$c2
            sta ld00b                       // sprite #5 Y position
            ldx #$00
            stx ld008                       // sprite #4 X position (bits 0-7)
            stx ld00a                       // sprite #5 X position (bits 0-7)
            ldy #$10
            sty l43fc
            iny
            sty l43fd
            ldx #$04


l3ece:
            inc ld008                       // sprite #4 X position (bits 0-7)
            inc ld00a                       // sprite #5 X position (bits 0-7)
            dex
            bne l3ef6
            ldx #$04
            inc l43fc
            inc l43fc
            inc l43fd
            inc l43fd
            lda l43fc
            cmp #$20
            bne l3ef6
            lda #$10
            sta l43fc
            lda #$11
            sta l43fd


l3ef6:
            lda #$05


l3ef8:
            pha
            lda #$00


l3efb:
            sec
            sbc #$01
            bne l3efb
            pla
            sec
            sbc #$01
            bne l3ef8
            lda #$69
            sec
            sbc l1b04
            clc
            adc #$5b
            cmp ld008                       // sprite #4 X position (bits 0-7)
            bne l3ece
            ldx #$fe
            stx l43fc
            inx
            stx l43fd
            lda #$01
            sta l1b81
            rts

.byte $ad, $96, $1b, $f0, $0e, $ad, $90, $1b, $c9, $04, $d0, $07, $ad, $06, $1b, $c9, $0d, $f0, $03, $4c, $9c, $3b, $ad, $05, $1b, $f0, $f8, $a9, $d7, $8d, $02, $1b, $a9, $82, $8d, $03, $1b, $a9, $13, $8d, $04, $1b, $a9, $01, $8d, $05, $1b, $a9, $0a, $8d, $06, $1b, $a9, $02, $8d, $00, $1b, $a9, $07, $8d, $01, $1b, $20, $e0, $3f, $a9, $04, $8d, $25, $1b, $20, $d0, $22, $a2, $aa, $a0, $01, $8c, $3f, $1b, $ad, $3f, $1b, $d0, $fb, $ca, $d0, $f5, $60

Only_Use_At_Crane:
            lda Y_axis_low_byte             // $1b06
            cmp #$0d
            bne l3f89
            lda X_axis_high_byte            // $1b05
            beq l3f89
            rts


l3f89:
            pla
            pla
            jmp l3b9c

.byte $ad, $90, $1b, $c9, $04, $d0, $0a, $ad, $78, $1b, $c9, $05, $d0, $03, $4c, $a2, $3f, $4c, $9c, $3b, $a9, $25, $8d, $02, $1b, $a9, $8f, $8d, $03, $1b, $a9, $13, $8d, $04, $1b, $a9, $01, $8d, $05, $1b, $a9, $35, $8d, $06, $1b, $a9, $02, $8d, $00, $1b, $a9, $07, $8d, $01, $1b, $ee, $4f, $1b, $a9, $04, $8d, $25, $1b, $20, $d0, $22, $a2, $aa, $a0, $ff, $8c, $3f, $1b, $ad, $3f, $1b, $d0, $fb, $ca, $d0, $f5, $60, $a9, $00, $8d, $81, $1b, $ee, $4f, $1b, $a9, $00, $8d, $08, $d0, $8d, $0a, $d0, $8d, $09, $d0, $8d, $0b, $d0, $60, $a7, $00, $00, $00, $0a, $00, $3f, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $ef, $f0, $f7, $f8, $5f, $df, $e0, $e7, $e8, $5f, $df, $e0, $e3, $e4, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $01, $34, $35, $36, $37, $38, $39, $3a, $01, $00, $00, $00, $f1, $f2, $f9, $fa, $5f, $e1, $e2, $e9, $ea, $5f, $e1, $e2, $e5, $e6, $00, $00, $00, $00, $01, $60, $60, $60, $60, $60, $61, $01, $00, $00, $01, $3b, $3c, $3d, $3e, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01

Screen_Giger_line_top:

.byte $00, $00, $6e, $00, $00, $00, $01, $00, $00, $01, $3f, $40, $41, $42, $43, $44, $45, $01, $00, $00, $00, $00, $00, $01, $01, $01, $01, $5d, $5e, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $01

Screen_Giger_line_bot:

.byte $00, $00, $6e, $00, $00, $00, $01, $00, $00, $01, $46, $47, $48, $49, $4a, $4b, $4c, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d1, $d2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $01, $01, $01, $4d, $4e, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d3, $d4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $66, $67, $68, $69, $01, $01, $00, $00, $01, $4f, $50, $51, $52, $53, $54, $55, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $62, $63, $01, $01, $62, $63, $01, $00, $00, $01, $56, $57, $58, $59, $5a, $5b, $5c, $01, $00, $00, $00, $00, $00, $01, $01, $01, $01, $5d, $5e, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $01, $64, $65, $01, $01, $64, $65, $01, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $ac, $ac, $be, $b1, $c0, $c1, $be, $ba, $ac, $ac, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $52, $53, $00, $00, $00, $00, $00, $00, $5a, $5b, $00, $00, $00, $00, $00, $00, $00, $00, $4e, $4f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $4e, $4f, $00, $00, $00, $00, $54, $55, $00, $00, $00, $00, $00, $00, $5c, $5d, $00, $00, $00, $00, $00, $00, $00, $00, $50, $51, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $50, $51, $00, $00, $00, $00, $56, $57, $00, $00, $00, $00, $00, $00, $4a, $4b, $00, $00, $00, $00, $00, $00, $00, $00, $52, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $52, $53

l4230:

.byte $00, $00, $00, $00, $58, $59, $00, $00, $00, $00, $00, $00, $4c, $4d, $00, $00, $00, $00, $00, $00, $00, $00, $54, $55, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $54, $55, $00, $00, $00, $00, $5a, $5b, $00, $00, $00, $00, $00, $00, $4e, $4f, $00, $00, $00, $00, $00, $00, $00, $00, $56, $57, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $56, $57, $00, $00, $00, $00, $5c, $5d, $00, $00, $00, $00, $00, $00, $50, $51, $00, $00, $00, $00, $00, $00, $00, $00, $58, $59, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $58, $59, $00, $00, $00, $00, $4a, $4b, $00, $00, $00, $00, $00, $00, $52, $53, $00, $00, $00, $00, $00, $00, $00, $00, $5a, $5b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $5a, $5b, $00, $00, $00, $00, $4c, $4d, $00, $00, $00, $00, $00, $00, $54, $55, $00, $00, $00, $00, $00, $00, $00, $00, $5c, $5d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $5c, $5d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $4a, $4b, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $0f, $01, $4c, $4d, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $04, $00, $01, $01, $0d, $0c, $07, $06, $06, $0e, $0d, $07, $01, $0d, $06, $08, $05, $0b, $0a, $0b, $05, $01, $01, $01, $01, $04, $01, $0b, $08, $0e, $0b, $0e, $01, $04, $05, $01, $0b, $0e, $01, $02, $00, $00, $01, $01, $11, $00, $00, $00, $00, $00, $0c, $00, $0e, $09, $00, $00, $00, $09, $00, $0c, $00, $07, $00, $05, $04, $00, $06, $09, $00, $0a, $09, $0a, $04, $00, $00, $05, $09, $0a, $0d, $09, $00, $00, $00, $ce, $0a, $d0, $ce, $0a, $d0, $ad, $0a, $d0, $c9, $1b, $b0, $05, $a9, $00

l43f8:

.byte $60

l43f9:

.byte $83

l43fa:

.byte $a6

l43fb:

.byte $c9, $a1, $22, $21, $ea, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $1a, $00, $00, $12, $00, $00, $14, $00, $00, $18, $00, $00, $28, $00, $00, $48, $00, $00, $9c, $00, $01, $3c, $00, $01, $7a, $c0, $01, $7b, $40, $01, $78, $80, $00, $bd, $00, $00, $5a, $00, $00, $70, $00, $00, $70, $00, $00, $70, $00, $00, $00, $78, $00, $00, $bc, $00, $10, $de, $00, $39, $ce, $00, $4f, $87, $00, $07, $03, $80, $02, $03, $80, $00, $01, $c0, $00, $00, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $60, $00, $00, $60, $00, $00, $60, $00, $00, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $1a, $00, $00, $12, $00, $00, $14, $00, $00, $18, $00, $00, $28, $00, $00, $58, $00, $01, $58, $00, $00, $bc, $00, $00, $bc, $00, $00, $b8, $00, $00, $b8, $00, $00, $58, $00, $00, $4c, $00, $00, $32, $00, $00, $3c, $00, $ff, $00, $78, $00, $00, $78, $00, $00, $78, $00, $00, $38, $00, $00, $5c, $00, $00, $5c, $00, $00, $ec, $00, $07, $ec, $00, $07, $cc, $00, $04, $0c, $00, $04, $0c, $00, $00, $0c, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $02, $00, $00, $01, $00, $00, $00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $1a, $00, $00, $12, $00, $00, $14, $00, $00, $18, $00, $00, $28, $00, $00, $28, $00, $00, $58, $00, $00, $5c, $00, $00, $dd, $80, $00, $ea, $80, $01, $6d, $00, $01, $72, $00, $00, $fc, $00, $00, $78, $00, $00, $00, $38, $00, $00, $38, $00, $00, $78, $00, $00, $78, $00, $00, $7c, $00, $00, $3a, $00, $00, $3a, $00, $00, $b8, $00, $01, $b0, $00, $03, $b0, $00, $01, $30, $00, $00, $b0, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $10, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $1a, $00, $00, $12, $00, $00, $34, $00, $00, $58, $00, $00, $a8, $00, $00, $e8, $00, $01, $74, $00, $01, $72, $30, $01, $79, $d0, $01, $7c, $20, $01, $7b, $c0, $01, $78, $00, $00, $f8, $00, $00, $78, $00, $00, $38, $00, $ff, $00, $38, $00, $00, $38, $00, $00, $3c, $00, $00, $7a, $00, $00, $7b, $00, $00, $77, $80, $00, $e3, $80, $00, $e1, $c0, $01, $c0, $c0, $03, $80, $c0, $03, $01, $c0, $06, $01, $80, $0c, $03, $00, $18, $06, $00, $18, $04, $00, $08, $04, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $1a, $00, $00, $12, $00, $00, $14, $00, $00, $38, $00, $00, $6c, $00, $00, $b4, $00, $01, $74, $00, $01, $72, $c0, $01, $7b, $40, $01, $78, $80, $00, $fd, $00, $00, $3a, $00, $00, $38, $00, $00, $38, $00, $00, $78, $00, $00, $00, $70, $00, $00, $f4, $00, $10, $ee, $00, $39, $ce, $00, $4f, $87, $00, $07, $07, $00, $02, $03, $80, $00, $01, $80, $00, $01, $c0, $00, $01, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $1a, $00, $00, $12, $00, $00, $14, $00, $00, $18, $00, $00, $28, $00, $00, $58, $00, $00, $58, $00, $00, $b8, $00, $00, $bc, $00, $00, $bc, $00, $00, $b8, $00, $00, $58, $00, $00, $4c, $00, $00, $32, $00, $00, $3c, $00, $ff, $00, $78, $00, $00, $78, $00, $00, $78, $00, $00, $38, $00, $00, $7c, $00, $00, $7c, $00, $00, $ec, $00, $07, $ec, $00, $07, $cc, $00, $04, $0c, $00, $04, $0c, $00, $00, $0c, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $02, $00, $00, $01, $00, $00, $00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $1a, $00, $00, $12, $00, $00, $14, $00, $00, $1c, $00, $00, $28, $00, $00, $28, $00, $00, $58, $00, $00, $5c, $00, $00, $bd, $80, $00, $be, $80, $01, $79, $00, $01, $7a, $00, $00, $bc, $00, $00, $58, $00, $00, $38, $00, $00, $00, $38, $00, $00, $78, $00, $00, $78, $00, $00, $7c, $00, $00, $3e, $00, $00, $3a, $00, $00, $b8, $00, $01, $b0, $00, $03, $b0, $00, $01, $30, $00, $00, $b0, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $10, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $1a, $00, $00, $12, $00, $00, $14, $00, $00, $38, $00, $00, $48, $00, $00, $bc, $00, $01, $7c, $00, $01, $7e, $30, $01, $7d, $d0, $01, $7e, $20, $01, $7b, $c0, $01, $78, $00, $00, $f8, $00, $00, $78, $00, $00, $38, $00, $ff, $00, $38, $00, $00, $38, $00, $00, $3c, $00, $00, $7e, $00, $00, $5f, $00, $00, $67, $80, $00, $f3, $80, $00, $e1, $c0, $01, $c0, $c0, $03, $80, $c0, $03, $01, $c0, $06, $01, $80, $0c, $03, $00, $18, $06, $00, $18, $04, $00, $08, $04, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $18, $24, $42, $42, $7e, $62, $62, $62, $7c, $42, $42, $7c, $42, $62, $62, $7c, $3c, $42, $40, $40, $60, $60, $62, $3c, $78, $44, $42, $42, $62, $62, $64, $78, $7e, $40, $40, $7c, $60, $60, $60, $7e, $7e, $40, $40, $7c, $60, $60, $60, $60, $3c, $42, $40, $40, $66, $62, $62, $3c, $42, $42, $42, $7e, $62, $62, $62, $62, $08, $08, $08, $08, $18, $18, $18, $18, $04, $04, $04, $04, $04, $04, $44, $38, $44, $44, $48, $70, $70, $68, $64, $62, $40, $40, $40, $40, $60, $60, $60, $7c, $42, $66, $5a, $5a, $42, $62, $62, $62, $42, $62, $52, $4a, $46, $62, $62, $62, $3c, $42, $42, $42, $62, $62, $62, $3c, $7c, $42, $42, $42, $7c, $60, $c0, $60, $3c, $42, $42, $42, $42, $4a, $46, $3f, $7c, $42, $42, $7c, $70, $68, $64, $62, $3c, $62, $60, $3c, $06, $06, $66, $3c, $7c, $10, $10, $10, $30, $30, $30, $30, $42, $42, $42, $42, $62, $62, $62, $3c, $22, $22, $22, $22, $22, $22, $14, $08, $42, $42, $42, $42, $42, $5a, $5a, $24, $42, $42, $24, $18, $18, $24, $42, $42, $42, $42, $42, $22, $1e, $06, $06, $06, $7e, $72, $04, $08, $10, $20, $4e, $7e, $3c, $42, $46, $4a, $52, $62, $42, $3c, $08, $08, $08, $08, $18, $18, $18, $18, $7e, $02, $02, $7e, $40, $40, $4e, $7e, $7e, $02, $02, $1e, $02, $02, $02, $7e, $42, $42, $42, $7e, $06, $06, $06, $06, $7e, $40, $40, $7e, $02, $02, $72, $7e, $7e, $40, $40, $7e, $62, $62, $62, $7e, $7e, $02, $02, $04, $0c, $0c, $0c, $0c, $7e, $42, $42, $7e, $62, $62, $62, $7e, $7e, $42, $42, $42, $7e, $06, $06, $06, $00, $7f, $ff, $c0, $c0, $c0, $c0, $c0, $00, $81, $c3, $c3, $c3, $c3, $c3, $c3, $00, $fe, $ff, $03, $03, $03, $03, $03, $00, $0f, $0f, $00, $00, $00, $01, $03, $00, $f0, $f0, $30, $60, $c0, $80, $00, $00, $7f, $ff, $ff, $00, $7e, $ff, $e3, $00, $06, $ff, $ff, $00, $00, $00, $00, $c0, $c0, $c0, $c0, $7f, $3f, $00, $00, $c3, $c3, $c3, $c3, $81, $00, $00, $00, $03, $03, $03, $03, $ff, $fe, $00, $00, $06, $06, $06, $06, $06, $06, $00, $00, $01, $01, $03, $03, $07, $07, $00, $00, $e6, $e6, $0c, $0c, $f8, $f0, $00, $00, $00, $00, $00, $1c, $3e, $63, $c1, $c1, $ff, $fe, $fc, $f8, $f8, $f8, $f8, $f8, $ff, $1f, $0f, $06, $c6, $c6, $c6, $c6, $ff, $87, $03, $01, $31, $31, $31, $31, $ff, $80, $80, $80, $9c, $b8, $f8, $f1, $ff, $30, $30, $30, $73, $e5, $e6, $c0, $ff, $fe, $00, $00, $3f, $3f, $7f, $ff, $ff, $7f, $3f, $3f, $ff, $ff, $ff, $ff, $f8, $f8, $f8, $f8, $f8, $fc, $fe, $ff, $c6, $c6, $c6, $c6, $06, $0f, $1f, $ff, $31, $31, $31, $31, $01, $03, $87, $ff, $f1, $e3, $e3, $c3, $c1, $c1, $c1, $ff, $00, $ff, $f8, $f8, $f6, $f6, $f6, $ef, $18, $fc, $fc, $fc, $7e, $7e, $7e, $3e, $3e, $7f, $7f, $7f, $3e, $3e, $3e, $3e, $18, $3f, $21, $33, $73, $73, $73, $73, $00, $ff, $01, $9d, $9f, $9f, $9b, $83, $00, $ff, $0c, $9e, $9e, $9e, $ce, $ce, $00, $ff, $38, $7d, $7d, $7d, $3b, $3b, $ef, $e0, $df, $df, $df, $8f, $ff, $00, $3f, $3f, $9f, $9f, $9f, $0f, $ff, $00, $1c, $1c, $1c, $1c, $89, $89, $81, $c3, $f3, $f3, $f3, $f3, $f3, $e1, $ff, $00, $9b, $9f, $9f, $9f, $9d, $01, $ff, $00, $ce, $ce, $e5, $e5, $e1, $f3, $ff, $00, $3b, $3b, $97, $97, $87, $cf, $ff, $00, $ff, $f8, $fd, $fd, $fd, $fd, $fd, $ff, $ff, $df, $af, $af, $af, $af, $df, $ff, $00, $ff, $f8, $f8, $f6, $f6, $f6, $ef, $03, $ff, $ff, $ff, $7f, $7f, $7f, $3f, $08, $9c, $99, $99, $93, $93, $87, $87, $60, $ff, $f0, $f9, $f9, $f9, $f9, $f9, $00, $ff, $f0, $f9, $f9, $f9, $f9, $f9, $00, $ff, $fe, $ff, $ff, $ff, $ff, $ff, $00, $ff, $1f, $3f, $3f, $3f, $3f, $3f, $ef, $e0, $df, $df, $df, $8f, $ff, $00, $3f, $3f, $9f, $9f, $9f, $0f, $ff, $03, $83, $93, $91, $99, $98, $9c, $9c, $08, $f9, $f9, $f9, $f9, $f9, $f0, $7f, $30, $f9, $f9, $f9, $f9, $f9, $f0, $ff, $00, $ff, $ff, $ff, $ff, $df, $1e, $ff, $00, $3f, $3f, $3f, $3f, $3d, $01, $ff, $00, $fe, $fe, $fe, $fe, $fe, $f8, $fc, $fe, $7f, $7f, $7f, $7f, $7f, $1f, $3f, $7f, $00, $00, $00, $18, $18, $00, $00, $00, $11, $11, $11, $11, $01, $01, $01, $01, $10, $10, $10, $10, $00, $00, $00, $00, $fe, $ff, $dc, $f3, $ef, $ef, $df, $5f, $7f, $ff, $3b, $cf, $e7, $d7, $bb, $7a, $df, $df, $ef, $ef, $f3, $dc, $ff, $fe, $fb, $fb, $f7, $f7, $cf, $3b, $ff, $7f, $cc, $b5, $7d, $7c, $45, $6d, $8c, $ef, $23, $f7, $f6, $76, $f6, $f6, $23, $ff, $98, $6b, $fb, $f8, $8b, $db, $18, $df, $43, $dd, $dd, $c3, $cf, $d7, $5b, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30, $30, $30, $30, $30, $30, $30, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d5, $b5, $af, $ad, $ad, $af, $ba, $ba, $57, $5d, $f5, $b5, $b5, $f5, $ad, $ab, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $3a, $31, $03, $03, $03, $03, $00, $00, $00, $00, $c0, $c0, $c0, $c0, $03, $03, $03, $03, $03, $03, $03, $00, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $00, $10, $68, $a4, $90, $48, $0d, $3e, $ff, $00, $00, $00, $00, $00, $f8, $e8, $a8, $6a, $55, $55, $55, $55, $55, $55, $00, $a8, $a8, $a8, $a8, $a8, $a0, $80, $00, $00, $00, $00, $00, $00, $00, $32, $39, $00, $00, $00, $00, $00, $a0, $48, $52, $3a, $35, $0a, $00, $00, $00, $00, $00, $aa, $55, $aa, $00, $00, $00, $00, $00, $00, $05, $05, $05, $05, $05, $05, $05, $00, $50, $58, $58, $98, $98, $98, $58, $06, $06, $06, $06, $05, $05, $05, $05, $58, $58, $58, $98, $98, $98, $58, $58, $00, $00, $00, $3f, $2a, $01, $01, $01, $00, $00, $00, $80, $80, $80, $80, $80, $01, $01, $01, $01, $01, $00, $00, $00, $80, $80, $80, $fc, $aa, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $00, $00, $00, $fc, $6a, $80, $80, $80, $03, $03, $3f, $2a, $00, $00, $00, $00, $80, $80, $80, $00, $00, $00, $00, $00, $00, $00, $06, $0f, $1f, $20, $22, $40, $00, $00, $a8, $f4, $e6, $a6, $26, $26, $28, $20, $2a, $0a, $0a, $00, $00, $00, $a6, $26, $a6, $a8, $a8, $00, $00, $00, $00, $00, $03, $04, $04, $04, $01, $02, $00, $00, $80, $20, $20, $20, $40, $80, $01, $00, $00, $00, $00, $04, $04, $02, $80, $80, $40, $20, $20, $20, $60, $7d, $00, $30, $30, $30, $10, $28, $28, $55, $20, $60, $60, $60, $60, $60, $a0, $50, $aa, $aa, $aa, $aa, $ba, $ba, $aa, $00, $50, $50, $50, $50, $50, $50, $40, $00, $00, $3f, $3f, $03, $03, $03, $16, $55, $00, $fa, $fa, $a0, $a0, $a0, $aa, $5a, $55, $6f, $69, $69, $6f, $55, $55, $00, $5a, $9a, $9a, $9a, $9a, $58, $50, $00, $01, $02, $04, $00, $01, $04, $15, $24, $80, $60, $10, $20, $40, $00, $54, $12, $15, $24, $15, $21, $15, $24, $15, $00, $54, $42, $54, $12, $54, $42, $54, $00, $00, $24, $18, $7e, $18, $24, $00, $00, $18, $3c, $66, $7e, $66, $66, $66, $00, $7c, $66, $66, $7c, $66, $66, $7c, $00, $3c, $66, $60, $60, $60, $66, $3c, $00, $78, $6c, $66, $66, $66, $6c, $78, $00, $7e, $60, $60, $78, $60, $60, $7e, $00, $7e, $60, $60, $78, $60, $60, $60, $00, $3c, $66, $60, $6e, $66, $66, $3c, $00, $66, $66, $66, $7e, $66, $66, $66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $1e, $0c, $0c, $0c, $0c, $6c, $38, $00, $66, $6c, $78, $70, $78, $6c, $66, $00, $60, $60, $60, $60, $60, $60, $7e, $00, $63, $77, $7f, $6b, $63, $63, $63, $00, $66, $76, $7e, $7e, $6e, $66, $66, $00, $3c, $66, $66, $66, $66, $66, $3c, $00, $7c, $66, $66, $7c, $60, $60, $60, $00, $3c, $66, $66, $66, $66, $3c, $0e, $00, $7c, $66, $66, $7c, $78, $6c, $66, $00, $3c, $66, $60, $3c, $06, $66, $3c, $00, $7e, $18, $18, $18, $18, $18, $18, $00, $66, $66, $66, $66, $66, $66, $3c, $00, $66, $66, $66, $66, $66, $3c, $18, $00, $63, $63, $63, $6b, $7f, $77, $63, $00, $66, $66, $3c, $18, $3c, $66, $66, $00, $66, $66, $66, $3c, $18, $18, $18, $00, $7e, $06, $0c, $18, $30, $60, $7e, $00, $3c, $66, $6e, $76, $66, $66, $3c, $00, $18, $18, $38, $18, $18, $18, $7e, $00, $3c, $66, $06, $0c, $30, $60, $7e, $00, $3c, $66, $06, $1c, $06, $66, $3c, $00, $06, $0e, $1e, $66, $7f, $06, $06, $00, $7e, $60, $7c, $06, $06, $66, $3c, $00, $3c, $66, $60, $7c, $66, $66, $3c, $00, $7e, $66, $0c, $18, $18, $18, $18, $00, $3c, $66, $66, $3c, $66, $66, $3c, $00, $3c, $66, $66, $3e, $06, $66, $3c, $00, $03, $03, $03, $03, $03, $03, $03, $03, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $ff, $ff, $3f, $3f, $0f, $0f, $03, $03, $ff, $ff, $fc, $fc, $f0, $f0, $c0, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3f, $7f, $70, $60, $60, $60, $60, $00, $f8, $fc, $1c, $0c, $0c, $0c, $0c, $78, $78, $78, $78, $78, $78, $7f, $3f, $0c, $0c, $0c, $0c, $0c, $1c, $fc, $f8, $00, $01, $01, $01, $01, $01, $01, $01, $00, $80, $80, $80, $80, $80, $80, $80, $01, $01, $01, $01, $01, $01, $01, $01, $e0, $e0, $e0, $e0, $e0, $e0, $e0, $e0, $00, $3f, $7f, $60, $00, $00, $00, $3f, $00, $f8, $fc, $1c, $0c, $0c, $1c, $fc, $7f, $78, $78, $78, $78, $78, $7f, $3f, $f8, $00, $00, $00, $00, $00, $fc, $fc, $00, $7f, $7f, $00, $00, $00, $00, $1f, $00, $f8, $fc, $1c, $0c, $0c, $0c, $fc, $1f, $00, $00, $00, $00, $00, $7f, $7f, $fc, $3c, $3c, $3c, $3c, $3c, $fc, $f8, $00, $18, $18, $18, $18, $1c, $1f, $0f, $00, $0c, $0c, $0c, $0c, $0c, $fc, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $00, $3f, $7f, $70, $60, $60, $70, $7f, $00, $f8, $f8, $00, $00, $00, $00, $f8, $3f, $00, $00, $00, $00, $00, $7f, $7f, $fc, $3c, $3c, $3c, $3c, $3c, $fc, $f8, $00, $60, $60, $60, $60, $60, $70, $7f, $00, $00, $00, $00, $00, $00, $00, $f8, $7f, $78, $78, $78, $78, $78, $7f, $3f, $fc, $1c, $0c, $0c, $0c, $1c, $fc, $f8, $00, $7f, $7f, $00, $00, $00, $00, $00, $00, $f0, $f0, $30, $30, $60, $60, $e0, $00, $01, $01, $01, $01, $01, $01, $01, $e0, $e0, $e0, $e0, $e0, $e0, $e0, $e0, $00, $3f, $7f, $70, $60, $60, $60, $7f, $00, $f8, $fc, $1c, $0c, $0c, $0c, $fc, $7f, $78, $78, $78, $78, $78, $7f, $3f, $fc, $0c, $0c, $0c, $0c, $1c, $fc, $f8, $00, $3f, $7f, $70, $60, $60, $70, $7f, $00, $f8, $fc, $1c, $0c, $0c, $1c, $fc, $3f, $00, $00, $00, $00, $00, $00, $00, $fc, $3c, $3c, $3c, $3c, $3c, $3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $59, $95, $57, $39, $65, $d6, $5a, $75, $40, $40, $70, $90, $5c, $e4, $59, $39, $01, $05, $01, $0d, $15, $9d, $56, $65, $55, $65, $5e, $94, $58, $68, $60, $40, $8d, $5a, $35, $1d, $05, $07, $01, $01, $d5, $59, $47, $45, $01, $01, $00, $00, $75, $51, $24, $14, $00, $00, $00, $00, $d6, $6d, $54, $64, $10, $10, $00, $00, $d0, $50, $80, $40, $40, $40, $00, $00, $09, $05, $07, $05, $01, $02, $01, $01, $55, $4d, $54, $74, $54, $4c, $10, $50, $40, $40, $00, $00, $00, $00, $00, $00, $56, $15, $5d, $55, $51, $b5, $50, $50, $55, $55, $87, $55, $19, $55, $17, $15, $55, $55, $55, $55, $00, $00, $00, $00, $15, $1d, $55, $65, $54, $5d, $15, $15, $94, $5c, $55, $45, $67, $55, $54, $64, $ff, $ff, $c0, $c0, $02, $0a, $0a, $0a, $ff, $ff, $c0, $c0, $80, $a0, $a0, $a0, $0a, $0a, $0a, $02, $03, $03, $ff, $ff, $a0, $a0, $a0, $80, $03, $03, $ff, $ff, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $c0, $f0, $f0, $fc, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fc, $ff, $ff, $fc, $fc, $f0, $f0, $c0, $00, $00, $03, $0f, $0f, $3f, $3f, $ff, $ff, $3f, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $3f, $3f, $0f, $0f, $03, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $3f, $ff, $ff, $03, $03, $02, $0a, $0a, $0a, $ff, $ff, $03, $03, $80, $a0, $a0, $a0, $0a, $0a, $0a, $02, $c0, $c0, $ff, $ff, $a0, $a0, $a0, $80, $c0, $c0, $ff, $ff, $03, $03, $0f, $0f, $0f, $3f, $3f, $3f, $00, $00, $c0, $c0, $c0, $f0, $f0, $f0, $43, $43, $0f, $0f, $0f, $3f, $3f, $3f, $01, $01, $c1, $c0, $c0, $f0, $f0, $f0, $03, $03, $0c, $0c, $30, $30, $c0, $c0, $c0, $c0, $30, $30, $0c, $0c, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8a, $8a, $8a, $8a, $8a, $8a, $8a, $8a, $a0, $a0, $a8, $a8, $a2, $8a, $0a, $8a, $aa, $aa, $aa, $aa, $aa, $aa, $00, $aa, $0a, $02, $00, $00, $00, $00, $00, $00, $a0, $a0, $a8, $a8, $2a, $2a, $0a, $0a, $00, $00, $00, $00, $00, $00, $80, $80, $00, $28, $82, $82, $82, $82, $28, $82, $82, $02, $0a, $08, $22, $22, $a0, $8a, $00, $00, $02, $02, $08, $08, $20, $20, $82, $0a, $08, $28, $22, $a2, $8a, $88, $a8, $aa, $a2, $a8, $8a, $a0, $20, $80, $82, $28, $82, $82, $82, $82, $28, $00, $aa, $aa, $a8, $a8, $a8, $a8, $aa, $aa, $a8, $a8, $aa, $aa, $aa, $aa, $a8, $a8, $2a, $2a, $aa, $aa, $aa, $aa, $2a, $2a

l5200:

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $20, $20, $a8, $a8, $a8, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

l524f:

.byte

l52f0:

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $3f, $3f, $3f, $0cd5, $b5, $af, $ad, $ad, $af, $ba, $ea, $57, $5d, $f5, $b5, $b5, $f5, $ad, $ab, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $34, $00, $04, $3a, $31, $03, $03, $03, $03, $00, $00, $00, $00, $c0, $c0, $c0, $c0, $03, $03, $03, $03, $03, $03, $03, $00, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $00, $10, $68, $a4, $90, $48, $0d, $3e, $ff, $00, $00, $00, $00, $00, $f8, $e8, $a8, $6a, $55, $55, $55, $55, $55, $55, $00, $a8, $a8, $a8, $a8, $a8, $a0, $80, $00, $00, $00, $00, $00, $00, $00, $32, $39, $00, $00, $00, $00, $00, $a0, $48, $52, $3a, $35, $0a, $00, $00, $00, $00, $00, $aa, $55, $aa, $00, $00, $00, $00, $00, $00, $05, $05, $05, $05, $05, $05, $05, $00, $50, $58, $58, $98, $98, $98, $58, $06, $06, $06, $06, $05, $05, $05, $05, $58, $58, $58, $98, $98, $98, $58, $58, $00, $00, $00, $3f, $2a, $01, $01, $01, $00, $00, $00, $80, $80, $80, $80, $80, $01, $01, $01, $01, $01, $00, $00, $00, $80, $80, $80, $fc, $aa, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $00, $00, $00, $fc, $6a, $80, $80, $80, $03, $03, $3f, $2a, $00, $00, $00, $00, $80, $80, $80, $00, $00, $00, $00, $00, $00, $00, $06, $0f, $1f, $20, $22, $20, $00, $00, $a8, $f4, $e6, $a6, $26, $26, $28, $20, $2a, $0a, $0a, $00, $00, $00, $a6, $26, $a6, $a8, $a8, $00, $00, $00, $00, $00, $03, $04, $04, $04, $01, $02, $00, $00, $80, $20, $20, $20, $40, $80, $01, $00, $00, $00, $00, $04, $04, $02, $80, $80, $40, $20, $20, $20, $60, $80, $00, $30, $30, $30, $10, $28, $28, $55, $20, $60, $60, $60, $60, $60, $a0, $50, $aa, $aa, $aa, $aa, $ba, $ba, $aa, $00, $50, $50, $50, $50, $50, $50, $40, $00, $00, $3f, $3f, $03, $03, $03, $16, $55, $00, $fa, $fa, $a0, $a0, $a0, $aa, $5a, $55, $6f, $69, $69, $6f, $55, $55, $00, $5a, $9a, $9a, $9a, $9a, $58, $50, $00, $01, $02, $04, $00, $01, $04, $15, $24, $80, $60, $10, $20, $40, $00, $54, $12, $15, $24, $15, $21, $15, $24, $15, $00, $54, $42, $54, $12, $54, $42, $54, $00, $00, $01, $03, $07, $0d, $01, $01, $01, $00, $80, $80, $80, $80, $80, $80, $80, $01, $01, $01, $01, $01, $0f, $0f, $00, $80, $80, $80, $80, $80, $f0, $f0, $00, $00, $07, $0f, $0c, $0c, $06, $02, $00, $00, $e0, $f0, $18, $18, $18, $30, $60, $00, $01, $03, $06, $0c, $0f, $0f, $00, $c0, $80, $00, $00, $00, $f0, $f0, $00, $00, $1f, $1f, $00, $00, $00, $00, $00, $00, $f8, $f8, $18, $30, $60, $c0, $60, $00, $00, $00, $18, $18, $0f, $07, $00, $30, $18, $18, $18, $30, $e0, $c0, $00, $00, $00, $00, $00, $00, $00, $01, $03, $00, $00, $10, $30, $70, $f0, $b0, $30, $06, $0c, $18, $3f, $3f, $00, $00, $00, $30, $30, $30, $fc, $fc, $30, $30, $00, $00, $0f, $1f, $18, $18, $18, $1f, $0f, $00, $f0, $f0, $00, $00, $00, $e0, $f0, $00, $00, $00, $00, $00, $0f, $0f, $00, $30, $30, $30, $30, $30, $f0, $e0, $00, $00, $00, $00, $00, $00, $00, $01, $03, $00, $00, $60, $60, $c0, $c0, $80, $80, $03, $07, $0f, $0c, $0c, $0f, $07, $00, $00, $c0, $e0, $30, $30, $f0, $e0, $00, $00, $1f, $1f, $00, $00, $00, $00, $00, $00, $f8, $f8, $18, $30, $30, $60, $60, $00, $00, $01, $01, $03, $03, $03, $00, $c0, $c0, $80, $80, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $20, $e4, $ff, $c9, $00, $d0, $f9, $4c, $60, $56, $01, $01, $01, $01, $01, $01

l5660:
            sei                             // (5660) Set interrupts
            lda #$00                        // (5661)
            sta border_color                // (5663) Set border color to black.
            sta background_color            // (5666) Set background color to black.
            sta Extra_bg_color_1            // (5669) extra background color #1
            sta Extra_bg_color_2            // (566c) extra background color #2
            lda #$14                        // (566f) Load A with #14
            sta ld018                       // (5671) Set ld018 to #14
            lda #$04                        // (5674) Load A with #04
            sta l0288                       // (5676) Store A to l0288
            lda Sprite_1_X_Coord            // (5679) sprite #1 X position (bits 0-7)
            ora #$03                        // (567c) ORA on A
            sta Sprite_1_X_Coord            // (567e) sprite #1 X position (bits 0-7)
            lda Sprite_0_X_Coord            // (5681) sprite #0 X position (bits 0-7)
            and #$fc                        // (5684) AND on A with #fc.
            ora #$03                        // (5686) ORA on A with #03.
            sta Sprite_0_X_Coord            // (5688) sprite #0 X position (bits 0-7).
            ldy #$00                        // (568b) Load Y with #00.


l568d:
            lda l56a0,y                     // (568d) Load A with l56a0,y. 
            cmp #$ff                        // (5690) Compare to #ff
            beq l5707                       // (5692) Branch to l5707 if A equal #ff.
            jsr lffd2                       // (5694) Jump to $f1ca
            iny                             // (5697) Increase Y.
            bne l568d                       // (5698) Branch to l568d if Y not equal to zero.
            inc l568e                       // (569a) [SELF MODIFYING CODE] Increase l568e.
            jmp l568d                       // (569d) Jump to l568e.


l56a0:

.byte $93, $08, $11, $1d, $1d, $1d, $1d, $1d, $1d, $1d, $1d, $1d, $9e, $50, $4c, $45, $41, $53, $45, $20, $45, $4e, $54, $45, $52, $20, $43, $4f, $44, $45, $0d, $11, $11, $11, $11, $11, $11, $96, $49, $46, $20, $59, $4f, $55, $20, $48, $41, $56, $45, $20, $4e, $4f, $54, $20, $43, $4f, $4d, $50, $4c, $45, $54, $45, $44, $20, $54, $48, $45, $20, $43, $49, $54, $59, $20, $48, $41, $4c, $4c, $0d, $11, $50, $4c, $45, $41, $53, $45, $20, $48, $49, $54, $20, $52, $45, $54, $55, $52, $4e, $0d, $11, $11, $11, $11, $11, $ff

l5707:
            ldy #$00                        // (5707) Set Y to #00


l5709:
            jsr lffcf                       // (5709) Jump to $f157.
            cmp #$00                        // (570c) Compare A to #00.
            beq l5709                       // (570e) Loop to l5709 if equal to zero.
            sta l574d,y                     // (5710) Store input.
            iny                             // (5713) Increase Y.
            cmp #$0d                        // (5714) Compare A to #0d
            beq l5745                       // (5716) Branch to l5745 if A equal to zero.
            cpy #$05                        // (5718) Compare Y to #05
            bne l5709                       // (571a) Loop if not equal #05
            ldy #$00                        // (571c) Load Y with #00


l571e:
            lda l574d,y
            cmp l5757,y
            bne l5733
            iny
            cpy #$05
            bne l571e
            lda #$01                    // Load A with #01
            sta l1ba0
            jmp l7cd0


l5733:
            lda #$0d
            jsr lffd2                       // CHROUT
            lda #$91
            jsr lffd2                       // CHROUT
            lda #$20
            jsr lffd2                       // CHROUT
            jmp l5707


l5745:
            lda #$00
            sta l1ba0
            jmp l7cd0


l574d:

.byte $44, $42, $34, $43, $54, $01, $01, $01, $01, $01

l5757:

.byte $44, $42, $34, $43, $54, $44, $42, $34, $43, $54, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $80, $00, $0d, $c0, $00, $0f, $c0, $00, $2f, $c0, $00, $0f, $c0, $00, $0f, $c0, $00, $0f, $c0, $00, $08, $40, $00, $0f, $c0, $00, $08, $40, $00, $07, $c0, $00, $07, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $34, $00, $00, $32, $00, $00, $39, $00, $00, $3c, $80, $03, $7e, $80, $02, $fe, $80, $01, $3e, $80, $00, $bd, $00, $00, $5a, $00, $00, $1e, $00, $00, $1e, $00, $00, $1e, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $34, $00, $00, $3a, $00, $00, $3a, $00, $00, $3d, $00, $00, $3d, $00, $00, $1d, $00, $00, $1d, $00, $00, $1a, $00, $00, $32, $00, $00, $4e, $00, $00, $3e, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $34, $00, $00, $34, $00, $00, $3a, $00, $00, $3a, $00, $01, $bb, $00, $01, $77, $00, $00, $b6, $80, $00, $4e, $80, $00, $3f, $00, $00, $1e, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $00, $00, $36, $00, $00, $27, $00, $00, $6e, $80, $0c, $4e, $80, $0b, $9e, $80, $04, $3e, $80, $03, $fe, $80, $00, $3e, $80, $00, $3f, $00, $00, $1e, $00, $00, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $34, $00, $00, $2a, $00, $00, $2d, $00, $00, $2e, $80, $03, $4e, $80, $02, $de, $80, $01, $1e, $80, $00, $bf, $00, $00, $5e, $00, $00, $1e, $00, $00, $1e, $00, $00, $1e, $00, $bf, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $34, $00, $00, $3a, $00, $00, $3a, $00, $00, $3d, $00, $00, $3d, $00, $00, $1d, $00, $00, $1d, $00, $00, $1a, $00, $00, $32, $00, $00, $4e, $00, $00, $3e, $00, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $34, $00, $00, $34, $00, $00, $3a, $00, $00, $3a, $00, $01, $bd, $00, $01, $7d, $00, $00, $be, $80, $00, $7e, $80, $00, $3d, $00, $00, $1a, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $32, $00, $00, $3d, $00, $00, $7e, $80, $0c, $7e, $80, $0b, $be, $80, $04, $7e, $80, $03, $fe, $80, $00, $3e, $80, $00, $3f, $00, $00, $1e, $00, $00, $1e, $00, $9f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $2c, $00, $00, $4c, $00, $00, $9c, $00, $01, $3c, $00, $01, $7e, $c0, $01, $7f, $40, $01, $7c, $80, $00, $bd, $00, $00, $5a, $00, $00, $78, $00, $00, $78, $00, $00, $78, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $2c, $00, $00, $5c, $00, $00, $5c, $00, $00, $bc, $00, $00, $bc, $00, $00, $b8, $00, $00, $b8, $00, $00, $58, $00, $00, $4c, $00, $00, $72, $00, $00, $7c, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $2c, $00, $00, $2c, $00, $00, $5c, $00, $00, $5c, $00, $00, $dd, $80, $00, $ee, $80, $01, $6d, $00, $01, $72, $00, $00, $fc, $00, $00, $78, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $70, $00, $00, $6c, $00, $00, $e4, $00, $01, $76, $00, $01, $72, $30, $01, $79, $d0, $01, $7c, $20, $01, $7f, $c0, $01, $7c, $00, $00, $fc, $00, $00, $78, $00, $00, $78, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $2c, $00, $00, $54, $00, $00, $b4, $00, $01, $74, $00, $01, $72, $c0, $01, $7b, $40, $01, $78, $80, $00, $fd, $00, $00, $7a, $00, $00, $78, $00, $00, $78, $00, $00, $78, $00, $bf, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $2c, $00, $00, $5c, $00, $00, $5c, $00, $00, $bc, $00, $00, $bc, $00, $00, $b8, $00, $00, $b8, $00, $00, $58, $00, $00, $4c, $00, $00, $72, $00, $00, $7c, $00, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $2c, $00, $00, $2c, $00, $00, $5c, $00, $00, $5c, $00, $00, $bd, $80, $00, $be, $80, $01, $7d, $00, $01, $7e, $00, $00, $bc, $00, $00, $58, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $4c, $00, $00, $bc, $00, $01, $7e, $00, $01, $7e, $30, $01, $7d, $d0, $01, $7e, $20, $01, $7f, $c0, $01, $7c, $00, $00, $fc, $00, $00, $78, $00, $00, $78, $00, $9f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $07, $00, $00, $0d, $80, $00, $09, $c0, $00, $1b, $a0, $03, $13, $90, $02, $e7, $c8, $01, $0f, $a8, $00, $ff, $a8, $00, $0f, $a8, $00, $0f, $a8, $00, $07, $90, $00, $07, $80, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $34, $00, $00, $3a, $00, $00, $3a, $00, $00, $3d, $00, $00, $3d, $00, $00, $1d, $00, $00, $1d, $00, $00, $1a, $00, $00, $32, $00, $00, $4e, $00, $00, $3e, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e0, $00, $01, $b0, $00, $03, $90, $00, $05, $d8, $00, $09, $c8, $c0, $13, $e7, $40, $15, $f0, $80, $15, $ff, $00, $15, $f0, $00, $15, $f0, $00, $09, $e0, $00, $01, $e0, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $2c, $00, $00, $5c, $00, $00, $5c, $00, $00, $bc, $00, $00, $bc, $00, $00, $b8, $00, $00, $b8, $00, $00, $58, $00, $00, $4c, $00, $00, $72, $00, $00, $7c, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $34, $00, $00, $3a, $00, $00, $1a, $00, $00, $0d, $00, $00, $0d, $00, $00, $3b, $80, $00, $47, $80, $00, $3f, $80, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $7e, $00, $01, $9f, $06, $02, $6f, $8f, $05, $f5, $dd, $07, $95, $f8, $07, $14, $f0, $00, $08, $60, $00, $00, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $60, $00, $00, $c0, $00, $00, $e0, $00, $00, $70, $00, $00, $38, $00, $00, $1c, $00, $00, $0e, $00, $00, $1e, $00, $00, $3c, $00, $00, $78, $00, $00, $e0, $00, $01, $fc, $00, $01, $e2, $00, $01, $dc, $00, $00, $b0, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06, $10, $00, $0f, $28, $e0, $1f, $a9, $e0, $bb, $af, $a0, $f1, $f6, $40, $60, $f9, $80, $00, $7e, $00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $de, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $df, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $07, $80, $00, $08, $f8, $00, $08, $7f, $00, $00, $3f, $c0, $00, $1f, $f0, $00, $03, $f8, $00, $00, $f8, $00, $01, $f8, $00, $03, $f0, $00, $07, $e6, $00, $0f, $9e, $00, $0f, $fa, $00, $07, $c2, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $e0, $00, $1f, $10, $00, $fe, $10, $03, $fc, $00, $0f, $f8, $00, $1f, $c0, $00, $1f, $00, $00, $1f, $80, $00, $0f, $c0, $00, $67, $e0, $00, $79, $f0, $00, $5f, $f0, $00, $43, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $07, $00, $00, $08, $80, $00, $0d, $80, $00, $0a, $80, $00, $00, $00, $00, $00, $00, $00, $05, $00, $00, $32, $00, $00, $70, $10, $00, $70, $18, $00, $60, $18, $00, $60, $18, $00, $00, $1c, $00, $07, $80, $00, $00, $00, $00, $07, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $70, $00, $00, $38, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $08, $00, $00, $0c, $00, $00, $06, $00, $00, $03, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ebf, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $70, $00, $00, $38, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $08, $00, $00, $04, $00, $00, $04, $00, $00, $02, $00, $00, $02, $00, $00, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $70, $00, $00, $38, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $08, $00, $00, $08, $00, $00, $04, $00, $00, $04, $00, $00, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $70, $00, $00, $38, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $0c, $00, $00, $02, $00, $00, $01, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $00, $00, $1c, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $10, $00, $00, $30, $00, $00, $60, $00, $00, $c0, $00, $00, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $00, $00, $1c, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $10, $00, $00, $20, $00, $00, $20, $00, $00, $40, $00, $00, $40, $00, $00, $40, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $00, $00, $1c, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $10, $00, $00, $10, $00, $00, $20, $00, $00, $20, $00, $00, $20, $00, $00, $10, $00, $00, $90, $00, $00, $80, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $00, $00, $1c, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $10, $00, $00, $18, $00, $00, $88, $00, $00, $8c, $00, $00, $84, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $00, $00, $1c, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $10, $00, $00, $28, $00, $00, $48, $00, $00, $08, $00, $00, $0c, $00, $00, $04, $00, $00, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $bf, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $00, $00, $1c, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $10, $00, $00, $20, $00, $00, $20, $00, $00, $40, $00, $00, $40, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $00, $00, $1c, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $10, $00, $00, $10, $00, $00, $20, $00, $00, $20, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $00, $00, $1c, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $30, $00, $00, $40, $00, $00, $80, $00, $00, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $0e, $00, $00, $06, $00, $00, $06, $00, $00, $00, $00, $00, $02, $00, $00, $06, $00, $00, $04, $40, $00, $0c, $60, $00, $08, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $70, $00, $00, $38, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $08, $00, $00, $04, $00, $00, $04, $00, $00, $02, $00, $00, $02, $00, $00, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $70, $00, $00, $60, $00, $00, $60, $00, $00, $00, $00, $00, $40, $00, $00, $60, $00, $02, $20, $00, $06, $30, $00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $00, $00, $1c, $00, $00, $18, $00, $00, $18, $00, $00, $00, $00, $00, $10, $00, $00, $20, $00, $00, $20, $00, $00, $40, $00, $00, $40, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $70, $00, $00, $38, $00, $00, $18, $00, $00, $18, $00, $00, $10, $00, $00, $00, $00, $00, $08, $00, $00, $04, $00, $00, $04, $00, $00, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $01, $80, $00, $72, $00, $00, $f8, $00, $00, $cf, $00, $00, $4e, $00, $01, $80, $00, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $3e, $00, $00, $3e, $00, $00, $3c, $00, $01, $94, $c0, $01, $80, $c0, $01, $80, $c0, $01, $80, $c0, $00, $80, $80, $00, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $3e, $00, $00, $3e, $00, $00, $3e, $00, $00, $14, $00, $00, $00, $00, $00, $80, $80, $00, $80, $80, $00, $80, $80, $00, $80, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $be, $00, $01, $be, $00, $01, $9e, $00, $01, $94, $00, $01, $80, $00, $01, $80, $80, $00, $80, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $80, $de, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $3e, $00, $00, $3e, $00, $00, $3e, $00, $01, $d4, $00, $01, $80, $c0, $00, $80, $c0, $00, $80, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $80, $00, $00, $80, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $3e, $00, $00, $3e, $00, $00, $3e, $00, $01, $d4, $00, $01, $80, $00, $01, $80, $80, $00, $80, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $80, $00, $00, $00, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $3e, $00, $00, $3e, $00, $00, $3e, $00, $01, $d5, $c0, $01, $80, $c0, $00, $80, $c0, $00, $00, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $3e, $00, $00, $3e, $00, $00, $3e, $00, $01, $d5, $c0, $01, $80, $c0, $00, $80, $c0, $00, $00, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $df, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $3e, $00, $00, $3e, $00, $00, $3e, $00, $01, $d5, $c0, $01, $80, $c0, $00, $80, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $77, $00, $00, $f7, $80, $00, $c1, $c0, $00, $81, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ee, $00, $01, $ef, $00, $03, $83, $00, $03, $81, $00, $03, $00, $00, $03, $00, $00, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $07, $00, $00, $02, $00, $00, $05, $00, $00, $07, $00, $00, $07, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $60, $0c, $00, $30, $0e, $00, $30, $06, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $00, $c1, $00, $00, $42, $00, $00, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $00, $00, $0c, $00, $00, $30, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $80, $00, $00, $40, $00, $00, $30, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $60, $00, $00, $70, $00, $00, $70, $00, $00, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $40, $00, $03, $c1, $00, $00, $01, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $00, $00, $01, $00, $01, $01, $00, $00, $c1, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $bf, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $00, $00, $04, $00, $00, $0c, $00, $00, $30, $00, $00, $00, $00, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $82, $00, $00, $41, $00, $00, $01, $00, $00, $02, $00, $00, $04, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $41, $00, $03, $81, $00, $00, $01, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00, $00, $07, $00, $00, $07, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $80, $80, $00, $83, $00, $00, $42, $00, $00, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00, $00, $07, $00, $00, $07, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $00, $00, $30, $00, $00, $0c, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00, $00, $07, $00, $00, $07, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $00, $00, $02, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06, $00, $00, $0e, $00, $00, $0e, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $20, $00, $83, $c0, $00, $80, $00, $00, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00, $00, $07, $00, $00, $07, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $80, $00, $00, $80, $00, $00, $80, $80, $00, $83, $00, $00, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $bf, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00, $00, $07, $00, $00, $07, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $20, $00, $00, $30, $00, $00, $0c, $00, $00, $00, $00, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00, $00, $07, $00, $00, $07, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $82, $00, $00, $80, $00, $00, $40, $00, $00, $20, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00, $00, $07, $00, $00, $07, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $82, $20, $00, $81, $c0, $00, $80, $00, $00, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $00, $38, $00, $00, $38, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $10, $00, $00, $f0, $10, $00, $00, $10, $00, $00, $10, $00, $00, $10, $00, $00, $00, $00, $00, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $00, $00, $04, $00, $00, $0c, $00, $00, $30, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $1c, $00, $00, $1c, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $80, $08, $0f, $00, $08, $00, $00, $08, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00, $00, $07, $00, $00, $07, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $20, $00, $00, $30, $00, $00, $0c, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $00, $00, $04, $00, $00, $38, $00, $00, $00, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $00, $00, $10, $00, $00, $08, $00, $00, $08, $00, $38, $08, $00, $78, $00, $00, $70, $00, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $00, $00, $1e, $00, $10, $1c, $00, $10, $00, $00, $10, $00, $00, $08, $00, $00, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $80, $80, $01, $80, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $80, $00, $01, $80, $00, $01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $de, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $00, $01, $80, $00, $01, $80, $00, $01, $80, $00, $01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $e0, $00, $00, $c0, $00, $01, $80, $00, $01, $80, $00, $01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $e0, $00, $00, $c0, $00, $01, $80, $80, $01, $80, $c0, $01, $80, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $e3, $00, $00, $c1, $80, $01, $80, $c0, $01, $80, $c0, $01, $80, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $df, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $36, $00, $00, $e3, $80, $01, $c1, $c0, $01, $80, $c0, $01, $80, $c0, $01, $80, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $00, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $80, $00, $01, $80, $00, $01, $80, $00, $01, $80, $00, $03, $00, $00, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $80, $00, $01, $80, $00, $01, $80, $00, $01, $80, $00, $00, $c0, $00, $07, $c0, $00, $07, $e0, $00, $07, $e0, $00, $0f, $f0, $00, $0f, $f0, $00, $0f, $78, $00, $0f, $38, $00, $1e, $3c, $00, $1e, $3c, $00, $1c, $1c, $00, $3c, $1c, $00, $38, $1c, $00, $38, $0e, $00, $70, $0e, $00, $60, $0e, $00, $c0, $06, $00, $c0, $06, $00, $c0, $06, $00, $00, $07, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $3d, $00, $00, $7d, $88, $00, $7b, $dc, $00, $f1, $fa, $01, $e0, $f0, $01, $e0, $60, $03, $c0, $00, $03, $80, $00, $07, $00, $00, $07, $00, $00, $07, $00, $00, $06, $00, $00, $06, $00, $00, $16, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e4, $00, $1e, $00, $00, $1e, $00, $00, $3c, $00, $00, $3c, $00, $00, $7a, $00, $00, $7a, $00, $00, $77, $00, $00, $77, $e0, $00, $7b, $e0, $00, $70, $20, $00, $70, $20, $00, $70, $00, $00, $60, $00, $00, $60, $00, $00, $60, $00, $00, $60, $00, $00, $60, $00, $00, $60, $00, $00, $40, $00, $00, $80, $00, $00, $00, $00, $64, $00, $1e, $00, $00, $1e, $00, $00, $1e, $00, $00, $1e, $00, $00, $3e, $00, $00, $5c, $00, $00, $5c, $00, $00, $1d, $00, $00, $0d, $80, $00, $0d, $c0, $00, $0c, $80, $00, $0d, $00, $00, $0c, $00, $00, $0c, $00, $00, $0c, $00, $00, $0c, $00, $00, $0c, $00, $00, $0c, $00, $00, $08, $00, $00, $38, $00, $00, $00, $00, $40, $00, $1e, $00, $00, $1e, $00, $00, $3e, $00, $00, $5f, $00, $00, $df, $00, $01, $ef, $00, $01, $ef, $00, $03, $c7, $80, $03, $83, $c0, $03, $83, $c0, $03, $81, $e0, $01, $c0, $e0, $00, $e0, $70, $00, $e0, $30, $00, $20, $20, $00, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $00, $00, $2f, $00, $00, $77, $88, $00, $7b, $dc, $00, $f1, $fa, $01, $e0, $f0, $01, $e0, $60, $03, $c0, $00, $03, $80, $00, $07, $00, $00, $07, $00, $00, $07, $00, $00, $06, $00, $00, $06, $00, $00, $16, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $bf, $00, $1e, $00, $00, $1e, $00, $00, $3e, $00, $00, $3e, $00, $00, $6e, $00, $00, $6e, $00, $00, $6f, $00, $00, $77, $e0, $00, $7b, $e0, $00, $70, $20, $00, $70, $20, $00, $70, $00, $00, $60, $00, $00, $60, $00, $00, $60, $00, $00, $60, $00, $00, $60, $00, $00, $60, $00, $00, $40, $00, $00, $80, $00, $00, $00, $00, $24, $00, $1e, $00, $00, $1e, $00, $00, $1e, $00, $00, $1e, $00, $00, $3e, $00, $00, $7c, $00, $00, $7e, $00, $00, $1f, $00, $00, $07, $80, $00, $0b, $c0, $00, $0c, $80, $00, $0d, $00, $00, $0c, $00, $00, $0c, $00, $00, $0c, $00, $00, $0c, $00, $00, $0c, $00, $00, $0c, $00, $00, $08, $00, $00, $38, $00, $00, $00, $00, $40, $00, $1e, $00, $00, $1e, $00, $00, $3e, $00, $00, $7d, $00, $00, $fb, $00, $01, $e7, $00, $01, $cf, $00, $01, $c7, $80, $01, $c3, $c0, $00, $e3, $c0, $00, $71, $e0, $00, $70, $e0, $00, $10, $70, $00, $10, $30, $00, $00, $20, $00, $00, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9f, $00, $78, $00, $00, $bc, $00, $11, $be, $00, $3b, $de, $00, $5f, $8f, $00, $0f, $07, $80, $06, $07, $80, $00, $03, $c0, $00, $01, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $60, $00, $00, $68, $00, $00, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e4, $00, $78, $00, $00, $78, $00, $00, $3c, $00, $00, $3c, $00, $00, $5e, $00, $00, $5e, $00, $00, $ee, $00, $07, $ee, $00, $07, $de, $00, $04, $0e, $00, $04, $0e, $00, $00, $0e, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $02, $00, $00, $01, $00, $00, $00, $00, $64, $00, $78, $00, $00, $78, $00, $00, $78, $00, $00, $78, $00, $00, $7c, $00, $00, $3a, $00, $00, $3a, $00, $00, $b8, $00, $01, $b0, $00, $03, $b0, $00, $01, $30, $00, $00, $b0, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $10, $00, $00, $1c, $00, $00, $00, $00, $40, $00, $78, $00, $00, $78, $00, $00, $7c, $00, $00, $fa, $00, $00, $fb, $00, $00, $f7, $80, $00, $f7, $80, $01, $e3, $c0, $03, $c1, $c0, $03, $c1, $c0, $07, $81, $c0, $07, $03, $80, $0e, $07, $00, $0c, $07, $00, $04, $04, $00, $04, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $00, $00, $f4, $00, $11, $ee, $00, $3b, $de, $00, $5f, $8f, $00, $0f, $07, $80, $06, $07, $80, $00, $03, $c0, $00, $01, $c0, $00, $00, $e0, $00, $00, $e0, $00, $00, $e0, $00, $00, $60, $00, $00, $60, $00, $00, $68, $00, $00, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $bf, $00, $78, $00, $00, $78, $00, $00, $7c, $00, $00, $7c, $00, $00, $76, $00, $00, $76, $00, $00, $f6, $00, $07, $ee, $00, $07, $de, $00, $04, $0e, $00, $04, $0e, $00, $00, $0e, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $06, $00, $00, $02, $00, $00, $01, $00, $00, $00, $00, $24, $00, $78, $00, $00, $78, $00, $00, $78, $00, $00, $78, $00, $00, $7c, $00, $00, $3e, $00, $00, $7e, $00, $00, $f8, $00, $01, $e0, $00, $03, $d0, $00, $01, $30, $00, $00, $b0, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $30, $00, $00, $10, $00, $00, $1c, $00, $00, $00, $00, $40, $00, $78, $00, $00, $78, $00, $00, $7c, $00, $00, $be, $00, $00, $df, $00, $00, $e7, $80, $00, $f3, $80, $01, $e3, $80, $03, $c3, $80, $03, $c7, $00, $07, $8e, $00, $07, $0e, $00, $0e, $08, $00, $0c, $08, $00, $04, $00, $00, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9f, $00, $0f, $00, $00, $1f, $00, $00, $1f, $00, $00, $3f, $00, $00, $3f, $00, $00, $6f, $00, $00, $ef, $00, $01, $f7, $80, $03, $e3, $80, $03, $c3, $80, $03, $81, $c0, $03, $81, $c0, $01, $c1, $c0, $01, $c0, $e0, $00, $e0, $e0, $00, $60, $70, $00, $60, $70, $00, $c0, $30, $00, $00, $38, $00, $00, $18, $00, $00, $30, $e4, $00, $1e, $00, $00, $1e, $00, $00, $3e, $00, $00, $3e, $00, $00, $3e, $00, $00, $7c, $00, $00, $7c, $00, $00, $7c, $00, $00, $f8, $00, $00, $f0, $00, $00, $78, $00, $00, $bc, $00, $00, $de, $00, $01, $cf, $00, $01, $c7, $80, $01, $83, $80, $01, $81, $80, $03, $83, $00, $03, $00, $00, $03, $00, $00, $07, $00, $00, $64, $00, $f0, $00, $00, $f8, $00, $00, $f8, $00, $00, $fc, $00, $00, $fc, $00, $00, $f6, $00, $00, $f7, $00, $01, $ef, $80, $01, $c7, $c0, $01, $c3, $c0, $03, $81, $c0, $03, $81, $c0, $03, $83, $80, $07, $03, $80, $07, $07, $00, $0e, $06, $00, $0e, $06, $00, $0c, $03, $00, $1c, $00, $00, $18, $00, $00, $0c, $00, $00, $e4, $00, $78, $00, $00, $78, $00, $00, $7c, $00, $00, $7c, $00, $00, $7c, $00, $00, $3e, $00, $00, $3e, $00, $00, $3e, $00, $00, $1f, $00, $00, $0f, $00, $00, $1e, $00, $00, $3d, $00, $00, $7b, $00, $00, $f3, $80, $01, $e3, $80, $01, $c1, $80, $01, $81, $80, $00, $c1, $c0, $00, $00, $c0, $00, $00, $c0, $00, $00, $e0, $64, $00, $07, $00, $00, $1e, $00, $00, $3c, $00, $00, $78, $00, $00, $70, $00, $00, $38, $00, $00, $1c, $00, $00, $0e, $00, $00, $06, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e4, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $01, $60, $00, $00, $b0, $00, $00, $b8, $00, $00, $58, $00, $00, $38, $00, $00, $14, $00, $00, $32, $00, $00, $32, $00, $00, $3a, $00, $00, $1cf, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $36, $00, $00, $36, $00, $00, $36, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $21, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $63, $00, $00, $77, $00, $00, $36, $00, $00, $36, $00, $00, $36, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $36, $00, $00, $36, $00, $00, $36, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $de, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $36, $00, $00, $36, $00, $00, $36, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $36, $00, $00, $36, $00, $00, $36, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $21, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $36, $00, $00, $36, $00, $00, $36, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $36, $00, $00, $36, $00, $00, $36, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $df, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $7f, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $77, $00, $00, $36, $00, $00, $36, $00, $00, $36, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fff, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01

l7b18:

.byte $09

l7b19:

.byte $19

l7b1a:

.byte $1a

l7b1b:

.byte $81

l7b1c:

.byte $21

l7b1d:

.byte $41

l7b1e:

.byte $00

l7b1f:

.byte $0e

l7b20:

.byte $06, $01, $00

l7b23:

.byte $cb

l7b24:

.byte $ef

l7b25:

.byte $86

l7b26:

.byte $e4

l7b27:

.byte $f0

l7b28:

.byte $f9

l7b29:

.byte $06

l7b2a:

.byte $06

l7b2b:

.byte $06, $e2, $d8, $00, $d8, $06, $41, $1a, $06, $36, $02, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00

// *** MUSIC *** //

l7b40:
            lda #$09
            sta l7b18
            lda #$19
            sta l7b19
            lda #$1a
            sta l7b1a
            lda #$81
            sta l7b1b
            lda #$21
            sta l7b1c
            lda #$41
            sta l7b1d
            lda #$00
            sta l7b1e
            lda #$0e
            sta l7b1f
            lda #$06
            sta l7b20
            lda #$09
            sta ld415                       // filter cut off frequency low byte
            lda #$73
            sta ld416                       // filter cut off frequency high byte
            lda #$05
            sta ld417                       // filter control
            lda #$3f
            sta ld418                       // volume and filter modes


l7b81:
            lda #$00
            sta l7b23
            lda #$e0
            sta l7b26
            lda #$d1
            sta l7b24
            lda #$ea
            sta l7b27
            lda #$55
            sta l7b25
            lda #$f7
            sta l7b28
            lda #$08
            sta l7b29
            sta l7b2a
            sta l7b2b
            rts


l7bab:
            jsr l7c98
            lda l7b21                       // Load A with l7b21
            beq l7bd3                       // Branch if l7b21 equal zero.
            inc l7b22                       // Increase l7b22.
            lda l7b22                       // Load A with l7b22.
            cmp #$02                        // Branch if l7b22 equal #02.
            bcc l7bd0                       // Branch if l7b22 greater than #02.


l7bbd:
            lda #$00                        // Load A with #00.
            sta l7b22                       // Store A to l7b22.
            lda l7b21                       // Load A with l7b21.
            clc                             // Clear carry.
            adc #$01                        // Add #01 to A with carry.
            and #$01                        // AND on A.
            sta l7b21                       // Store A to l7b21.
            jsr l7be0                       // Jump to subroutine at l7be0.


l7bd0:
            jmp l7c86


l7bd3:
            inc l7b22
            lda l7b22
            cmp #$03
            bcc l7bd0
            jmp l7bbd


l7be0:
            ldx #$00


l7be2:
            lda l7b23,x
            sta $e9
            lda l7b26,x
            sta $ea
            lda l7b18,x
            sta l7b32
            lda l7b1b,x
            sta l7b31
            lda l7b1e,x
            sta l7b30
            lda l7b29,x
            sta l7b33
            stx l7b35
            jsr l7c23
            ldx l7b35
            lda l7b33
            sta l7b29,x
            lda $e9
            sta l7b23,x
            lda $ea
            sta l7b26,x
            inx
            cpx #$03
            bne l7be2


l7c22:
            rts



l7c23:
            dec l7b33
            lda l7b33
            bne l7c22
            lda l7cc8,x
            tax
            ldy #$00
            tya
            sta ld404,x                     // voice 1 control register
            lda l7b32
            sta ld405,x                     // voice 1 attack and decay length
            jsr l7c73
            sta ld401,x                     // voice 1 frequency high byte
            iny
            jsr l7c73
            sta ld400,x                     // voice 1 frequency low byte
            sta l7b2f
            lda l7b30
            sta ld403,x                     // voice 1 pulse width high byte
            lda l7b31
            sta ld404,x                     // voice 1 control register
            iny
            jsr l7c73
            sta l7b33
            lda $e9
            clc
            adc #$03
            sta $e9
            bcc l7c69
            inc $ea


l7c69:
            ldx l7b35
            lda l7b2f
            sta l7b2c,x
            rts


l7c73:
            lda $01
            sta l7b34
            lda #$00
            sta $01
            lda ($e9),y
            pha
            lda l7b34
            sta $01
            pla
            rts


l7c86:
            lda l7b23
            cmp #$d1
            bne l7c97
            lda l7b26
            cmp #$ea
            bne l7c97
            jmp l7b81


l7c97:
            rts


l7c98:
            ldx #$00                        // Load X with #00.
            jmp l7cb6                       // Jump to l7cb6.


l7c9d:
            lda l7cc8,x
            tay
            lda l7b36,x
            clc
            adc #$04
            and #$0f
            sta l7b36,x
            clc
            adc l7b2c,x
            sta ld400,y                     // voice 1 frequency low byte
            jmp l7cc2

l7cb6:
            lda l7b2c,x
            clc
            adc #$0a
            sta l7b2c,x
            sta ld400                       // voice 1 frequency low byte
            inx
            cpx #$03
            bcc l7c9d
            rts


l7cc8:

.byte $00, $07, $0e, $a1, $ff, $fd, $20, $ab

l7cd0:
            sei
            lda #$00
            sta border_color                       // border color
            sta background_color                       // background color
            sta Extra_bg_color_1                       // extra background color #1
            sta Extra_bg_color_2                       // extra background color #2
            lda #$14
            sta ld018                       // memory setup
            lda #$04
            sta l0288
            lda Sprite_1_X_Coord                       // sprite #1 X position (bits 0-7)
            ora #$03
            sta Sprite_1_X_Coord                       // sprite #1 X position (bits 0-7)
            lda Sprite_0_X_Coord                       // sprite #0 X position (bits 0-7)
            and #$fc
            ora #$03
            sta Sprite_0_X_Coord                       // sprite #0 X position (bits 0-7)
            lda #$7d
            sta l7d04
            ldy #$00


l7d02:
            lda l7e23,y
            cmp #$ff
            beq l7d15
            jsr lffd2                       // CHROUT
            iny
            bne l7d02
            inc l7d04
            jmp l7d02


l7d15:
            jsr Get_Joystick_Input
            lda Joy_Fire
            beq l7d15
            ldx $ff
            txs
            jmp l2540

.byte $93, $08, $11, $1d, $1d, $1d, $1d, $1d, $1d, $1d, $1d, $1d, $9e, $50, $52, $45, $53, $53, $20, $46, $49, $52, $45, $20, $54, $4f, $20, $53, $54, $41, $52, $54, $0d, $11, $11, $11, $1d, $1d, $1d, $96, $57, $45, $4c, $43, $4f, $4d, $45, $20, $30, $30, $37, $2e, $2e, $2e, $11, $11, $0d, $1d, $9a, $11, $59, $4f, $55, $20, $41, $52, $45, $20, $49, $4e, $20, $41, $20, $44, $49, $53, $55, $53, $45, $44, $20, $4d, $49, $4e, $45, $20, $55, $4e, $44, $45, $52, $0d, $1d, $53, $49, $4c, $49, $43, $4f, $4e, $20, $56, $41, $4c, $4c, $45, $59, $2e, $0d, $11, $1d, $54, $48, $45, $20, $45, $56, $49, $4c, $20, $4d, $41, $58, $20, $5a, $4f, $52, $49, $4e, $20, $48, $41, $53, $20, $50, $4c, $41, $4e, $54, $45, $44, $20, $41, $20, $42, $4f, $4d, $42, $0d, $1d, $57, $48, $49, $43, $48, $20, $59, $4f, $55, $20, $4d, $55, $53, $54, $20, $44, $45, $46, $55, $53, $45, $20, $42, $59, $20, $55, $53, $49, $4e, $47, $20, $54, $48, $45, $0d, $1d, $43, $4f, $44, $45, $20, $4e, $55, $4d, $42, $45, $52, $53, $20, $59, $4f, $55, $20, $57, $49, $4c, $4c, $20, $46, $49, $4e, $44, $2e, $0d, $11, $1d, $59, $4f, $55, $20, $57, $49, $4c, $4c, $20, $41, $4c, $53, $4f, $20, $4e, $45, $45, $44, $20, $54, $48, $45, $20, $48, $45, $4c, $50, $20, $4f, $46, $20, $4d, $41, $59, $44, $41, $59, $0d, $1d, $57

l7e23:

.byte $48, $4f, $20, $49, $53, $20, $54, $52, $41, $50, $50, $45, $44, $20, $53, $4f, $4d, $45, $57, $48, $45, $52, $45, $20, $49, $4e, $20, $54, $48, $45, $20, $4d, $49, $4e, $45, $2e, $0d, $11, $11, $00, $00, $1d, $05, $4d, $49, $53, $53, $49, $4f, $4e, $20, $43, $4f, $44, $45, $20, $20, $3a, $1c, $41, $56, $54, $41, $4b, $0d, $1d, $05, $43, $4c, $41, $53, $53, $49, $46, $49, $43, $41, $54, $49, $4f, $4e, $3a, $1c, $54, $4f, $50, $20, $53, $45, $43, $52, $45, $54, $08, $8e, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $7f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $00, $00, $34, $00, $00, $24, $00, $00, $24, $00, $00, $28, $00, $00, $30, $00, $00, $30, $00, $00, $68, $00, $00, $4c, $00, $00, $4c, $00, $00, $4c, $00, $00, $48, $00, $00, $58, $00, $00, $58, $00, $00, $50, $00, $00, $00, $50, $00, $00, $d0, $00, $00, $d0, $00, $00, $de, $2a, $2e, $30, $03, $04, $05, $06, $08, $09, $0b, $06, $08, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $2e, $30, $00, $00, $00, $00, $2e, $3e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $15, $00, $00, $00, $17, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $0f, $14, $0f, $0b, $03, $04, $01, $01, $01, $01, $35, $30, $03, $04, $05, $0f, $14, $0b, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $24, $00, $00, $00, $00, $00, $00, $00, $17, $3b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $0e, $0d, $0f, $0e, $01, $01, $01, $01, $01, $01, $01, $35, $2e, $30, $2a, $30, $3e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00, $00, $15, $00, $00, $00, $00, $00, $00, $00, $15, $00, $00, $00, $00, $2e, $2a, $0e, $35, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $2a, $2e, $30, $3b, $3a, $04, $05, $0e, $01, $01, $01, $01, $01, $01, $01, $0d, $06, $08, $09, $16, $00, $00, $00, $00, $00, $00, $00, $18, $00, $2e, $36, $0d, $03, $04, $05, $14, $02, $35, $2e, $2e, $30, $03, $04, $05, $0e, $0d, $0e, $01, $01, $0d, $07, $25, $26, $27, $28, $29, $05, $06, $0f, $07, $29, $0d, $0e, $35, $30, $2e, $30, $36, $35, $03, $04, $05, $00, $00, $15, $00, $00, $0e, $0d, $06, $04, $05, $25, $28, $00, $5e, $5c, $00, $00, $00, $2e, $30, $36, $35, $3b, $01, $01, $01, $01, $00, $00, $17, $00, $00, $00, $19, $00, $00, $00, $00, $16, $00, $00, $00, $00, $00, $00, $00, $16, $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $0e, $0d, $25, $26, $26, $27, $28, $29, $35, $07, $06, $00, $00, $00, $00, $00, $16, $00, $00, $00, $0f, $03, $04, $05, $06, $0c, $0d, $00, $00, $00, $00, $17, $00, $00, $00, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $15, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $15, $00, $00, $0e, $0d, $17, $00, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $15, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $16, $00, $00, $1a, $00, $00, $1c, $00, $00, $00, $5e, $5f, $5d, $5a, $58, $00, $00, $00, $00, $00, $00, $36, $01, $01, $01, $00, $00, $18, $00, $00, $00, $15, $00, $00, $00, $00, $17, $00, $00, $00, $00, $00, $00, $00, $17, $00, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $16, $00, $00, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $00, $00, $17, $00, $00, $00, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $15, $00, $00, $00, $00, $00, $16, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $16, $00, $00, $1a, $00, $18, $00, $00, $00, $00, $00, $15, $00, $00, $00, $00, $00, $00, $16, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $17, $00, $00, $1b, $00, $00, $1d, $00, $00, $00, $61, $60, $41, $5b, $57, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $00, $00, $19, $00, $00, $00, $16, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $15, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $17, $00, $00, $00, $00, $00, $00, $15, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $15, $00, $00, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $00, $16, $00, $00, $00, $00, $00, $17, $00, $00, $00, $00, $15, $00, $00, $00, $00, $00, $17, $00, $00, $1b, $00, $19, $00, $00, $00, $00, $00, $16, $00, $00, $00, $00, $00, $00, $17, $00, $00, $00, $00, $15, $00, $00, $00, $00, $00, $00, $18, $00, $00, $1c, $00, $00, $1e, $00, $00, $00, $00, $00, $00, $00, $56, $00, $00, $00, $00, $00, $00, $00, $36, $01, $01, $00, $00, $15, $00, $00, $00, $17, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $16, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $16, $00, $00, $00, $00, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $00, $16, $00, $00, $00, $00, $00, $00, $15, $00, $00, $00, $00, $00, $00, $00, $17, $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $16, $00, $00, $00, $00, $00, $18, $00, $00, $1c, $00, $15, $00, $00, $00, $00, $00, $17, $00, $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $16, $00, $00, $00, $00, $00, $00, $19, $00, $00, $1d, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $55, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $1f, $15, $00, $00, $00, $00, $6e, $17, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $17, $00, $00, $00, $00, $65, $00, $00, $00, $15, $00, $00, $00, $00, $00, $00, $00, $17, $00, $00, $00, $00, $00, $00, $16, $00, $00, $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $19, $00, $00, $00, $00, $17, $00, $00, $00, $00, $00, $19, $00, $00, $1d, $00, $16, $00, $00, $00, $00, $00, $18, $00, $00, $65, $00, $00, $00, $19, $00, $00, $74, $00, $17, $00, $00, $00, $00, $00, $00, $15, $00, $00, $1e, $00, $00, $1b, $00, $00, $00, $00, $00, $00, $00, $55, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $3b, $05, $0e, $0d, $06, $14, $2a, $36, $01, $01, $01, $3a, $00, $00, $00, $00, $36, $01, $01, $01, $01, $0d, $03, $0f, $14, $0f, $25, $26, $29, $01, $35, $2e, $30, $00, $00, $29, $35, $3b, $3a, $2a, $35, $26, $27, $28, $29, $35, $2a, $36, $01, $01, $01, $01, $01, $63, $63, $63, $63, $01, $01, $01, $33, $00, $2f, $01, $01, $2d, $00, $31, $01, $01, $01, $01, $21, $00, $20, $01, $01, $01, $01, $01, $01, $01, $33, $00, $2f, $01, $01, $01, $01, $0d, $00, $00, $00, $04, $01, $01, $01, $01, $01, $09, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $23, $25, $26, $27, $28, $2e, $2a, $07, $03, $04, $05, $0a, $29, $0c, $0d, $0e, $0c, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06, $09, $2e, $00, $00, $00, $00, $00, $00, $2e, $0f, $04, $05, $00, $00, $00, $00, $00, $00, $00, $00, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $1c, $0e, $0d, $25, $26, $27, $00, $00, $00, $00, $01, $01, $01, $34, $00, $31, $01, $01, $33, $00, $2f, $01, $01, $01, $01, $23, $00, $22, $01, $01, $01, $01, $01, $01, $01, $34, $00, $31, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $0e, $01, $01, $01, $35, $00, $00, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $0d, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $37, $39, $38, $01, $01, $37, $39, $38, $01, $01, $01, $01, $37, $39, $38, $01, $01, $01, $01, $01, $01, $01, $37, $39, $38, $01, $01, $01, $3a, $00, $00, $00, $00, $00, $20, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $36, $01, $01, $01, $01, $01, $24, $00, $00, $00, $00, $00, $00, $00, $36, $01, $01, $01, $01, $01, $01, $01, $01

l879e:

.byte $01, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $3d, $00, $00, $00, $00, $00, $00, $22, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $64, $64, $64, $64, $64, $64, $64, $64, $64, $01, $01, $01, $01, $01, $01, $01, $01, $01, $21, $00, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $00, $00, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $34, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $35, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $20, $01, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $21, $00, $00, $29, $01, $01, $01, $01, $01, $2d, $00, $31, $01, $01, $33, $00, $2f, $01, $01, $33, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $36, $35, $03, $04, $05, $08, $09, $0e, $0d, $25, $26, $27, $28, $07, $03, $04, $05, $0e, $0d, $0e, $01, $01, $09, $0f, $07, $25, $29, $01, $35, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $24, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $2e, $30, $2e, $30, $36, $01, $35, $30, $2e, $30, $30, $30, $30, $30, $2e, $30, $30, $2e, $30, $30, $00, $00, $00, $22, $01, $01, $01, $01, $01, $01, $01, $3d, $00, $00, $00, $00, $25, $26, $27, $28, $29, $0d, $00, $00, $00, $00, $25, $0f, $03, $01, $01, $33, $00, $31, $01, $01, $34, $00, $31, $01, $01, $34, $00, $2f, $01, $01, $01, $01, $01, $01, $35, $30, $00, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $09, $41, $00, $1a, $00, $00, $2a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $64, $2d, $00, $00, $00, $31, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $01, $37, $39, $38, $01, $01, $37, $39, $38, $01, $01, $37, $39, $38, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $1b, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $34, $00, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $2b, $01, $34, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $03, $04, $05, $0f, $07, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $1c, $00, $00, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $44, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $24, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $34, $00, $00, $00, $2f, $01, $34, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $65, $00, $41, $00, $36, $05, $0f, $0e, $05, $07, $04, $05, $2e, $30, $03, $04, $05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $1d, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $31, $01, $2d, $00, $31, $01, $01, $01, $64, $64, $36, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $0d, $00, $00, $36, $01, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $31, $01, $01, $01, $33, $00, $2f, $01, $01, $01, $01, $0d, $00, $41, $00, $04, $01, $01, $01, $01, $01, $01, $09, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $2f, $01, $24, $00, $31, $01, $01, $35, $00, $00, $00, $04, $05, $06, $08, $09, $0b, $0e, $0d, $0f, $14, $25, $26, $27, $28, $03, $04, $05, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $3a, $00, $00, $00, $00, $2a, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $33, $00, $2f, $01, $01, $01, $34, $00, $31, $01, $01, $01, $05, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $2b, $01, $01, $01, $37, $39, $38, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $37, $39, $38, $01, $01, $01, $37, $39, $38, $01, $01, $0d, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $0f, $36, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $01, $01, $01, $01, $34, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $01, $01, $01, $01, $05, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $05, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $01, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $2e, $00, $00, $00, $2e, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $22, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $22, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $00, $25, $26, $27, $2e, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $0d, $00, $00, $00, $0e, $0d, $00, $00, $00, $00, $00, $00, $00, $65, $00, $45, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $20, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $24, $00, $00, $22, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $41, $00, $3b, $01, $01, $01, $01, $3d, $00, $00, $00, $00, $00, $00, $00, $00, $29, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $09, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $64, $64, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $22, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $35, $00, $00, $00, $20, $01, $3d, $2e, $30, $2a, $03, $04, $05, $06, $08, $09, $0a, $0b, $0e, $0d, $25, $26, $27, $29, $28, $25, $2e, $30, $2e, $00, $41, $00, $00, $2e, $30, $03, $05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $01, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $0d, $25, $0f, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $65, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $64, $64, $00, $00, $00, $00, $00, $41, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $35, $00, $00, $00, $00, $20, $01, $33, $00, $00, $10, $00, $11, $00, $00, $12, $00, $00, $13, $00, $00, $10, $00, $00, $11, $00, $00, $11, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $01, $0d, $06, $0d, $00, $1a, $00, $00, $1b, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $05, $00, $00, $3b, $01, $0d, $00, $00, $0e, $01, $2d, $00, $41, $00, $00, $00, $00, $64, $64, $00, $00, $00, $00, $00, $41, $2b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $35, $00, $00, $00, $00, $00, $31, $01, $34, $00, $00, $11, $00, $12, $00, $00, $13, $00, $00, $10, $00, $00, $11, $00, $00, $12, $00, $00, $13, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $03, $01, $01, $01, $01, $2d, $00, $2f, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $03, $04, $05, $0f, $00, $00, $00, $00, $1b, $00, $00, $1c, $00, $00, $00, $45, $01, $01, $2d, $00, $2f, $01, $2d, $00, $00, $2f, $01, $24, $00, $00, $31, $01, $21, $00, $41, $00, $00, $20, $01, $01, $01, $01, $21, $00, $00, $00, $41, $00, $3b, $01, $01, $01, $01, $01, $01, $01, $3a, $00, $00, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $00, $00, $00, $00, $00, $00, $31, $01, $23, $00, $00, $12, $00, $13, $00, $00, $10, $00, $00, $11, $00, $73, $12, $00, $00, $13, $00, $00, $10, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $35, $2e, $30, $00, $00, $00, $2e, $36, $01, $01, $35, $25, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $1d, $00, $00, $45, $01, $01, $01, $37, $39, $38, $01, $37, $39, $39, $38, $01, $44, $00, $6d, $45, $01, $23, $00, $41, $00, $00, $22, $01, $01, $01, $01, $23, $00, $00, $00, $41, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $44, $00, $00, $6f, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $25, $26, $27, $28, $29, $28, $2a, $30, $0f, $03, $04, $05, $26, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $21, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $24, $41, $00, $0e, $01, $01, $01, $01, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $35, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1d, $00, $00, $1e, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $64, $64, $01, $01, $35, $00, $41, $00, $00, $2b, $01, $01, $01, $01, $44, $00, $00, $00, $41, $00, $00, $2a, $36, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $00, $00, $00, $15, $00, $00, $17, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $25, $26, $27, $00, $00, $00, $2a, $0f, $03, $04, $05, $08, $09, $0f, $0e, $01, $01, $0d, $25, $26, $29, $01, $01, $35, $04, $05, $00, $41, $00, $00, $06, $08, $04, $05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $09, $0f, $00, $00, $0e, $01, $2d, $00, $41, $00, $00, $2f, $01, $01, $01, $01, $01, $00, $6a, $00, $41, $00, $00, $00, $00, $36, $35, $04, $05, $25, $26, $27, $28, $6f, $35, $2e, $30, $3b, $35, $2a, $3e, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $16, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $0e, $0d, $00, $18, $00, $00, $36, $35, $00, $00, $41, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $05, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $05, $00, $00, $00, $00, $00, $2a, $00, $00, $41, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $2d, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2e, $3b, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $17, $00, $00, $19, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $65, $15, $00, $00, $00, $19, $00, $00, $00, $17, $00, $00, $41, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $04, $05, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $05, $0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $05, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $01, $01, $01, $01, $01, $34, $00, $00, $00, $18, $00, $00, $15, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $16, $00, $00, $00, $15, $00, $00, $00, $18, $00, $00, $41, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $01, $01, $3d, $2e, $30, $2e, $36, $35, $2a, $06, $09, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $03, $04, $05, $0f, $25, $3a, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $21, $00, $00, $00, $19, $00, $00, $16, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $05, $00, $00, $41, $00, $00, $00, $00, $17, $00

l94a9:

.byte $00, $00, $16, $00, $00, $00, $19, $00, $00, $41, $00, $41, $00, $00, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $3c, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $47, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $3a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $75, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $15, $00, $00, $17, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $41, $00, $04, $05, $00, $18, $00, $00, $00, $17, $00, $00, $00, $15, $00, $00, $41, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $35, $04, $05, $00, $00, $00, $00, $40, $42, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $1b, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $0d, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $2f, $01, $01, $64, $64, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $41, $00, $00, $00, $00, $19, $00, $00, $00, $18, $00, $00, $00, $16, $00, $00, $41, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $42, $01, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $01, $49, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $0d, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $3d, $25, $26, $27, $28, $29, $28, $00, $00, $00, $00, $30, $30, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $41, $00, $00, $00, $00, $15, $00, $00, $00, $19, $00, $00, $00, $17, $00, $00, $41, $00, $0e, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $42, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $01, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $45, $09, $01, $04, $01, $44, $00, $00, $45, $01, $0d, $00, $41, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $01, $24, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $09, $0a, $00, $41, $00, $00, $00, $41, $00, $65, $00, $00, $16, $00, $00, $00, $15, $00, $00, $00, $18, $00, $00, $41, $00, $00, $00, $00, $00, $04, $05, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $42, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $49, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $45, $05, $00, $00, $00, $04, $01, $00, $00, $01, $0d, $00, $00, $41, $00, $00, $00, $1e, $65, $00, $00, $00, $00, $00, $00, $41, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $00, $00, $00, $00, $36, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $2b, $00, $41, $00, $01, $0d, $00, $17, $00, $71, $00, $16, $00, $00, $00, $19, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $42, $01, $01, $35, $03, $04, $05, $06, $0b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $49, $48, $00, $00, $00, $00, $03, $04, $01, $01, $01, $01, $01, $01, $0d, $00, $00, $00, $00, $00, $07, $03, $04, $05, $00, $00, $03, $04, $05, $00, $00, $0e, $0d, $00, $00, $00, $03, $04, $2d, $41, $00, $00, $03, $04, $05, $04, $01, $05, $0f, $41, $2e, $03, $04, $01, $01, $0d, $00, $00, $00, $36, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $33, $64, $64, $64, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $2b, $00, $41, $00, $21, $00, $00, $18, $04, $09, $00, $17, $00, $00, $00, $15, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $42, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $49, $47, $00, $00, $00, $00, $00, $04, $0d, $0f, $25, $26, $27, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $2a, $00, $00, $41, $00, $00, $00, $0e, $05, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $34, $00, $00, $00, $00, $00, $00, $00, $00, $20, $01, $3a, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $2b, $00, $41, $00, $24, $00, $00, $19, $00, $00, $00, $18, $00, $0e, $0d, $16, $00, $04, $05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $42, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $2e, $30, $0f, $25, $00, $41, $00, $2b, $00, $41, $00, $33, $00, $00, $15, $00, $00, $00, $19, $00, $00, $00, $17, $00, $00, $00, $00, $00, $00, $03, $09, $0e, $0d, $00, $00, $00, $00, $3c, $42, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $49, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $1b, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $23, $00, $00, $00, $00, $00, $20, $01, $3d, $04, $05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $2b, $00, $41, $00, $44, $00, $00, $16, $00, $00, $00, $15, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $42, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $65, $00, $00, $00, $00, $1c, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $6b, $00, $0e, $01, $01, $01, $01, $01, $01, $24, $00, $00, $00, $2b, $01, $01, $01, $34, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $2b, $00, $41, $00, $01, $33, $00, $17, $00, $00, $00, $16, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $42, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $0f, $03, $04, $05, $0e, $0d, $25, $26, $0e, $01, $01, $01, $49, $47, $00, $00, $00, $00, $03, $04, $05, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $31, $01, $01, $2d, $00, $2f, $01, $01, $21, $00, $2f, $01, $01, $01, $05, $00, $00, $03, $04, $05, $00, $41, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $2e, $30, $25, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $65, $00, $00, $41, $00, $2b, $00, $41, $00, $01, $44, $00, $18, $00, $00, $00, $17, $00, $00, $00, $15, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $42, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $01, $01, $01, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $37, $39, $38, $01, $01, $33, $00, $31, $01, $01, $23, $00, $31, $01, $01, $05, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $36, $35, $2e, $30, $04, $05, $29, $28, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30, $2a, $2e, $2a, $00, $41, $00, $2b, $00, $41, $00, $01, $01, $21, $19, $00, $00, $00, $18, $00, $00, $00, $16, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $42, $01, $01, $01, $01, $01, $3d, $2e, $30, $3e, $01, $01, $01, $01, $35, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $49, $47, $00, $00, $00, $00, $00, $00, $00, $04, $05, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $37, $39, $38, $01, $01, $37, $39, $38, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $2b, $00, $41, $00, $01, $01, $2d, $15, $00, $00, $00, $19, $00, $00, $00, $17, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $42, $14, $14, $0e, $01, $01, $35, $1c, $00, $00, $00, $0f, $03, $04, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $65, $45, $01, $01, $01, $01, $01, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $00, $00, $25, $26, $27, $29, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $34, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $2b, $00, $41, $00, $01, $3d, $00, $16, $00, $00, $00, $15, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $42, $35, $00, $00, $00, $2e, $30, $00, $1d, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $49, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $35, $3e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $76, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2b, $00, $41, $00, $35, $00, $00, $17, $00, $00, $00, $16, $00, $00, $00, $19, $00, $00, $00, $00, $00, $00, $00, $40, $42, $01, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2a, $2e, $30, $36, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $05, $00, $2f, $01, $01, $2d, $41, $2f, $01, $2d, $00, $36, $01, $01, $01, $01, $01, $01, $64, $64, $64, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2b, $00, $41, $00, $44, $00, $00, $18, $00, $00, $00, $17, $00, $00, $00, $15, $00, $00, $00, $00, $00, $00, $3c, $42, $01, $01, $65, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $49, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2e, $30, $04, $05, $06, $0f, $0f, $14, $04, $01, $01, $01, $01, $2d, $00, $00, $01, $00, $00, $41, $00, $64, $00, $00, $41, $0f, $03, $00, $00, $06, $08, $09, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $3d, $2e, $30, $03, $04, $05, $06, $08, $09, $0a, $0c, $0d, $0e, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $65, $2b, $00, $41, $00, $01, $44, $00, $19, $00, $00, $00, $04, $05, $00, $00, $0e, $0d, $00, $00, $00, $00, $40, $42, $01, $01, $01, $01, $3a, $00, $00, $0e, $01, $01, $01, $0d, $00, $00, $0e, $01, $01, $01, $35, $00, $00, $00, $00, $00, $06, $08, $09, $03, $04, $05, $0e, $0c, $0d, $0e, $01, $01, $0d, $04, $05, $06, $03, $0e, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $25, $29, $01, $01, $33, $00, $00, $01, $00, $00, $41, $00, $64, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $29, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $2b, $00, $41, $00, $01, $0d, $00, $65, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $42, $01, $01, $35, $2e, $30, $00, $00, $00, $00, $0e, $0d, $0f, $00, $00, $00, $00, $36, $35, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $0d, $00, $00, $00, $00, $00, $00, $0e, $01, $49, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2b, $01, $01, $2d, $00, $00, $01, $00, $00, $41, $00, $64, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $00, $41, $00, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $42, $01, $0d, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $55, $00, $00, $00, $03, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $05, $00, $00, $00, $03, $04, $05, $0e, $0d, $04, $35, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $23, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2e, $30, $3e, $01, $01, $01, $01, $01, $00, $41, $00, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $42, $01, $0d, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $29, $01, $49, $47, $00, $00, $00, $04, $05, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $41, $00, $0e, $01, $01, $01, $0d, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $00, $41, $00, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $40, $42, $01, $01, $24, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $2e, $36, $65, $01, $35, $30, $3e, $01, $01, $01, $01, $01, $01, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $41, $00, $00, $36, $01, $3a, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $20, $01, $01, $01, $01, $01, $21, $64, $64, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $00, $41, $00, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $3c, $42, $01, $01, $01, $2d, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $49, $47, $00, $00, $00, $00, $00, $00, $00, $00, $2e, $30, $00, $00, $00, $2a, $2e, $30, $0f, $25, $0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $41, $00, $00, $00, $2a, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $3a, $00, $00, $00, $00, $03, $04, $05, $06, $09, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $0d, $0f, $2e, $00, $41, $00, $2a, $2e, $30, $36, $35, $30, $00, $00, $00, $00, $00, $40, $42, $01, $01, $01, $3d, $00, $00, $41, $00, $00, $2f, $01, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $45, $01, $0d, $00, $00, $00, $00, $45, $01, $01, $01, $01, $00, $00, $00, $00, $01, $24, $00, $00, $2b, $01, $01, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $42, $01, $01, $01, $3a, $00, $00, $00, $41, $00, $0e, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $01, $01, $01, $2d, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $00, $00, $2f, $01, $01, $2d, $00, $00, $2f, $01, $01, $01, $01, $49, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $40, $42, $01, $01, $01, $35, $00, $00, $00, $00, $41, $00, $2f, $01, $01, $33, $00, $00, $00, $00, $00, $00, $06, $08, $08, $0c, $0d, $0e, $01, $01, $00, $00, $00, $00, $01, $01, $01, $00, $00, $00, $00, $64, $64, $0f, $0e, $01, $01, $33, $00, $00, $2f, $01, $44, $00, $00, $00, $00, $36, $01, $01, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $23, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $42, $01, $01, $01, $01, $24, $00, $00, $00, $00, $41, $00, $20, $01, $01, $34, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $01, $01, $00, $00, $00, $00, $01, $01, $01, $00, $00, $00, $00, $1a, $00, $00, $00, $01, $01, $34, $00, $00, $00, $36, $01, $34, $00, $00, $00, $00, $2e, $36, $01, $01, $49, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $65, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $41, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $00, $03, $04, $05, $0e, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $0d, $00, $00, $00, $00, $00, $40, $42, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $41, $00, $31, $01, $01, $44, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $22, $01, $01, $00, $00, $00, $00, $01, $01, $01, $64, $64, $64, $00, $1b, $00, $00, $65, $01, $01, $2d, $68, $00, $00, $31, $01, $2d, $00, $00, $00, $00, $00, $00, $3e, $01, $01, $49, $48, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $2d, $00, $31, $01, $01, $01, $01, $35, $2e, $30, $30, $00, $00, $41, $00, $2f, $01, $01, $01, $01, $2d, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $3c, $42, $01, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $41, $00, $20, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $00, $00, $00, $00, $01, $01, $01, $01, $0d, $00, $00, $64, $64, $00, $00, $01, $01, $01, $3a, $00, $00, $2f, $01, $21, $00, $00, $00, $00, $00, $00, $00, $3b, $01, $01, $49, $47, $00, $00, $00, $2f, $01, $01, $01, $01, $37, $38, $01, $01, $33, $00, $2f, $01, $01, $35, $2e, $00, $00, $00, $00, $00, $00, $41, $00, $00, $36, $01, $01, $01, $33, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $01, $01, $01, $01, $01, $01, $01, $37, $39, $39, $39, $40, $42, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $41, $00, $22, $01, $01, $01, $01, $01, $01, $23, $00, $00, $00, $0e, $0d, $00, $00, $45, $01, $01, $00, $00, $00, $00, $01, $01, $01, $0d, $00, $00, $00, $1d, $00, $00, $00, $01, $01, $35, $00, $00, $00, $31, $01, $23, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $49, $48, $39, $39, $38, $01, $01, $01, $01, $01, $01, $01, $01, $37, $39, $38, $01, $01, $44, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $2f, $01, $01, $01, $37, $39, $38, $01, $01, $01, $01, $01, $01, $01, $01, $34, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $22, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $2e, $30, $0f, $0e, $01, $01, $01, $0d, $00, $00, $41, $00, $20, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $00, $00, $00, $00, $01, $01, $0d, $00, $00, $00, $00, $1e, $00, $00, $00, $01, $01, $2d, $00, $00, $00, $2f, $01, $24, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $36, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $2e, $30, $03, $04, $05, $06, $0b, $29, $01, $01, $01, $21, $00, $00, $00, $00, $00, $20, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $00, $00, $00, $00, $00, $0e, $0d, $0f, $00, $00, $00, $41, $00, $2f, $01, $01, $35, $3e, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $36, $01, $01, $01, $00, $00, $00, $00, $01, $01, $2d, $00, $00, $00, $00, $1a, $00, $00, $00, $01, $01, $33, $00, $00, $36, $01, $01, $2d, $00, $45, $01, $44, $00, $00, $00, $00, $36, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $24, $00, $41, $00, $00, $00, $00, $2e, $3b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $01, $01, $24, $00, $00, $00, $00, $00, $22, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $25, $00, $00, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $41, $00, $31, $01, $01, $44, $38, $01, $01, $01, $01, $0d, $00, $00, $00, $00, $00, $36, $01, $01, $00, $00, $00, $00, $01, $01, $33, $64, $64, $64, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $05, $00, $00, $00, $2e, $3e, $01, $01, $01, $01, $01, $01, $3d, $2e, $30, $2a, $36, $35, $06, $08, $09, $0b, $03, $04, $05, $29, $28, $25, $26, $27, $00, $00, $41, $00, $00, $00, $00, $00, $00, $2a, $2e, $30, $3b, $01, $01, $01, $01, $01, $01, $01, $34, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $21, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1b, $00, $00, $00, $41, $00, $00, $01, $01, $01, $01, $01, $01, $0d, $0f, $00, $00, $00, $00, $00, $00, $31, $01, $01, $00, $00, $00, $00, $01, $01, $2d, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $09, $00, $00, $00, $00, $00, $14, $0e, $01, $35, $2e, $30, $2a, $00, $00, $00, $00, $00, $00, $36, $01, $01, $01, $01, $3a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $24, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $3d, $00, $00, $00, $00, $00, $00, $00, $65, $00, $00, $00, $00, $69, $00, $00, $00, $41, $00, $00, $00, $3a, $3b, $3d, $25, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $00, $00, $00, $00, $36, $35, $00, $00, $00, $00, $03, $04, $05, $06, $0e, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $2a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2e, $30, $2a, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30, $36, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $2b, $01, $01, $21, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $00, $00, $00, $00, $00, $00, $0e, $01, $01, $00, $00, $20, $01, $01, $0d, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $2f, $01, $01, $2d, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $2f, $01, $0d, $00, $00, $2f, $01, $01, $34, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $2d, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $45, $01, $01, $01, $2d, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $20, $01, $01, $33, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $31, $01, $44, $00, $00, $31, $01, $3a, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $65, $00, $00, $00, $31, $01, $33, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $00, $00, $00, $00, $41, $45, $01, $01, $01, $01, $01, $01, $44, $00, $00, $00, $70, $45, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $3d, $00, $00, $00, $00, $22, $01, $01, $34, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $04, $05, $00, $2f, $01, $01, $00, $00, $2b, $01, $2d, $00, $00, $00, $41, $00, $00, $0e, $01, $01, $01, $01, $01, $05, $00, $00, $2f, $01, $44, $00, $00, $00, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $21, $00, $00, $31, $01, $05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $64, $64, $01, $01, $01, $01, $01, $0d, $00, $00, $00, $03, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $34, $00, $00, $00, $00, $00, $00, $00, $04, $05, $00, $00, $00, $07, $00, $00, $00, $00, $41, $00, $00, $00, $0e, $01, $01, $01, $05, $1a, $00, $00, $31, $01, $01, $01, $01, $24, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $2a, $00, $00, $00, $36, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $0d, $25, $2e, $36, $01, $35, $36, $35, $2a, $2e, $3e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $3d, $2e, $30, $2e, $30, $2a, $04, $05, $00, $00, $00, $00, $00, $25, $29, $01, $01, $2d, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $0e, $0d, $25, $00, $1b, $00, $00, $00, $36, $01, $01, $01, $21, $1b, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $0d, $0e, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $2e, $36, $01, $01, $01, $01, $35, $2e, $30, $2a, $0e, $01, $0d, $0f, $25, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $01, $0d, $0f, $0f, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $36, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $01, $01, $33, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $04, $05, $0e, $35, $36, $35, $00, $00, $00, $00, $3b, $0d, $0e, $0d, $0f, $14, $0b, $00, $00, $0f, $0f, $04, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2e, $30, $2a, $30, $00, $00, $00, $00, $00, $0f, $00, $00, $00, $00, $00, $03, $04, $05, $00, $00, $00, $00, $4a, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $23, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $04, $05, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $34, $00, $00, $00, $00, $00, $00, $00, $00, $00, $22, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $22, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $35, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $0e, $0d, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $20, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $05, $00, $00, $00, $00, $0e, $01, $01, $0d, $03, $04, $05, $07, $00, $00, $00, $00, $41, $00, $2f, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $4b, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4c, $4d, $00, $00, $00, $4f, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $50, $51, $00, $00, $2b, $01, $01, $33, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, $23, $00, $00, $00, $00, $03, $04, $05, $06, $0c, $0d, $0e, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $22, $01, $01, $01, $01, $01, $01, $01, $01, $0d, $30, $00, $00, $00, $00, $00, $00, $04, $09, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $31, $01, $01, $01, $01, $01, $01, $33, $00, $00, $01, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $01, $00, $00, $00, $01, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $01, $2d, $00, $31, $01, $01, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $65, $00, $01, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $24, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $09, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $2f, $01, $01, $01, $01, $01, $01, $34, $00, $00, $01, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $01, $00, $00, $00, $01, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $01, $33, $00, $2f, $01, $01, $00, $00, $41, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $29, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $3d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $20, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $01, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $01, $00, $00, $00, $01, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $01, $34, $00, $2b, $01, $01, $00, $00, $41, $00, $00, $00, $00, $0e, $0d, $06, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $01, $01, $01, $33, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $65, $00, $00, $00, $72, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $22, $01, $01, $01, $01, $01, $01, $33, $00, $00, $01, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $01, $00, $00, $00, $01, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $01, $33, $00, $31, $01, $01, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $34, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $65, $22, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $03, $04, $05, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $24, $00, $31, $01, $01, $01, $3a, $00, $41, $00, $2f, $01, $01, $01, $01, $01, $01, $34, $00, $00, $01, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $01, $00, $00, $00, $01, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $01, $2d, $00, $2f, $01, $01, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06, $08, $09, $36, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2b, $01, $65, $01, $21, $00, $00, $00, $00, $00, $20, $01, $01, $01, $01, $01, $01, $34, $00, $2f, $01, $01, $24, $0f, $0e, $01, $01, $34, $31, $01, $21, $00, $2b, $01, $01, $01, $33, $00, $41, $00, $2b, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $01, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $01, $00, $00, $00, $01, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $01, $37, $39, $38, $01, $01, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $01, $01, $24, $00, $00, $00, $00, $00, $22, $01, $01, $01, $01, $01, $01, $44, $00, $31, $01, $01, $21, $00, $31, $01, $01, $2d, $20, $01, $23, $00, $2f, $01, $01, $01, $34, $00, $41, $00, $2f, $01, $01, $01, $01, $01, $01, $37, $39, $38, $01, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $01, $00, $00, $00, $01, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $01, $01, $01, $01, $01, $01, $00, $00, $41, $00, $04, $01, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $34, $00, $00, $00, $00, $0e, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $24, $31, $01, $01, $2d, $00, $00, $3b, $35, $00, $22, $01, $21, $00, $31, $01, $01, $01, $21, $00, $41, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $01, $00, $00, $00, $01, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $00, $47, $00, $3c, $01, $01, $01, $01, $01, $01, $00, $00, $41, $00, $00, $04, $01, $01, $24, $00, $00, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $25, $26, $27, $29, $01, $01, $01, $01, $01, $01, $01, $24, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $44, $00, $04, $05, $00, $00, $00, $00, $00, $00, $45, $01, $2d, $00, $2b, $01, $01, $01, $24, $00, $41, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $01, $00, $00, $00, $01, $3c, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $01, $01, $01, $01, $01, $01, $00, $00, $41, $00, $00, $2b, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $2d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $25, $26, $27, $28, $29, $28, $25, $64, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $33, $00, $2f, $01, $01, $01, $44, $00, $41, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $41, $00, $00, $00, $36, $35, $04, $05, $0e, $01, $01, $01, $34, $00, $2f, $01, $01, $01, $01, $01, $01, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $34, $00, $00, $0e, $0d, $04, $05, $00, $41, $00, $00, $3b, $3a, $3b, $35, $04, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $35, $2e, $30, $36, $35, $30, $2e, $2a, $0e, $0d, $04, $05, $03, $04, $05, $00, $00, $00, $00, $00, $00, $00, $00, $41, $00, $00, $00, $00, $00, $00, $00, $00, $25, $26, $27, $00, $00, $31, $01, $01, $01, $01, $01, $01, $34, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $01, $01, $3d, $25, $26, $27, $28, $29, $28, $25, $36, $01, $01, $2d, $00, $00, $1a, $00, $00, $1c, $00, $41, $00, $00, $1e, $00, $00, $1a, $2f, $01, $01, $0d, $07, $0f, $0e, $01, $01, $01, $01, $01, $01, $3d, $2e, $29, $01, $01, $01, $01, $01, $01, $3a, $2e, $30, $3e, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $04, $0d, $06, $08, $09, $0f, $25, $26, $27, $28, $29, $35, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $00, $00, $2f, $01, $01, $01, $01, $01, $01, $01, $35, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $01, $33, $00, $00, $1b, $00, $00, $1d, $00, $41, $00, $00, $1a, $00, $00, $1b, $00, $04, $05, $00, $1c, $00, $00, $0e, $0d, $0f, $1e, $26, $27, $00, $00, $00, $2e, $30, $3b, $35, $30, $2e, $00, $00, $00, $00, $03, $04, $05, $07, $04, $05, $0f, $00, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $31, $01, $01, $01, $01, $01, $01, $21, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00, $73, $00, $2b, $01, $01, $01, $01, $01, $01, $01, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $00, $00, $1c, $00, $00, $1e, $00, $41, $00, $00, $1b, $00, $00, $1c, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $3d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $1d, $00, $00, $1a, $00, $41, $00, $00, $1c, $00, $00, $1d, $00, $00, $00, $00, $1e, $00, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $1e, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $05, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $1e, $00, $00, $1b, $00, $00, $00, $00, $1d, $00, $00, $1e, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $1a, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $44, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $1a, $00, $00, $1c, $00, $00, $00, $00, $1e, $00, $00, $1a, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $00, $00, $1e, $00, $00, $00, $00, $1b, $00, $00, $00, $00, $1d, $00, $00, $00, $00, $67, $00, $00, $00, $00, $00, $00, $65, $1e, $00, $00, $00, $00, $1b, $00, $00, $45, $01, $01, $01, $01, $01, $01, $44, $00, $00, $1e, $00, $00, $00, $45, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $37, $39, $38, $01, $37, $38, $01, $37, $39, $38, $01, $01, $01, $01, $01, $37, $39, $38, $01, $01, $01, $01, $01, $01, $01, $01, $37, $39, $38, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $2df, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $02, $02, $02, $02, $04, $04, $04, $04, $04, $04, $04, $04, $02, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $02, $02, $02, $02, $02, $02, $ff, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f

lbd00:

.byted, $74, $87, $85, $58, $0d, $00, $06, $03, $50, $54, $69, $91, $00, $33, $6d, $30, $68, $24, $22, $19, $1d, $25, $38, $54, $74, $7d, $6f, $78, $57, $3d, $2c, $0e, $24, $63, $8e, $7d, $03, $5e, $5c, $5b, $31, $79, $92, $11, $6a, $18, $88, $92, $27, $28, $27, $17, $74, $8b, $8a, $28, $51, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

lbe00:

.byte $25, $39, $5a, $5f, $19, $33, $0d, $46, $14, $11, $29, $4a, $43, $3f, $1e, $32, $00, $09, $09, $13, $1a, $21, $27, $2e, $34, $35, $33, $30, $27, $2c, $38, $3d, $3e, $48, $45, $55, $54, $61, $51, $18, $0e, $48, $61, $3e, $45, $1f, $2c, $38, $1d, $09, $1d, $48, $28, $54, $1d, $5e, $09, $23, $31, $3e, $23, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $02, $03, $04, $05, $06, $07, $08, $09, $0a, $0b, $0c, $0d, $0e, $0f, $0f, $10, $11, $12, $13, $14, $00, $00, $00, $02, $02, $01, $01, $02, $01, $09, $01, $02, $01, $03, $02, $03, $02, $02, $03, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $02, $00, $00, $00, $01, $01, $05, $03, $03, $03, $01, $03, $01, $01, $01, $01, $01, $01, $01, $01, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $02, $00, $00, $00

lbf00:

.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $28, $28, $58, $5c, $60, $64, $68, $6c, $70, $24, $48, $40, $38, $3c, $2c, $2c, $44, $30, $34, $00, $00, $00, $00, $00, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $36, $00, $00, $00, $00, $00, $00, $1a, $00, $00, $d4, $28, $0a, $00, $00, $22, $aa, $afb

Sprite_0_X_Coord:

.byte $ad

ld001:

.byte $ad

Sprite_1_X_Coord:

.byte $ad

ld003:

.byte $ad

ld004:

.byte $ad

ld005:

.byte $ad

ld006:

.byte $ad

ld007:

.byte $c2

ld008:

.byte $00

ld009:

.byte $00

ld00a:

.byte $00

ld00b:

.byte $00, $00, $00, $00, $00, $00

ld011:

.byte $9b

ld012:

.byte $37, $d1, $00, $00

ld016:

.byte $d8, $00

ld018:

.byte $03, $7e

ld01a:

.byte $f1, $00, $00, $00, $7f, $0f

border_color:

.byte $fb

background_color:

.byte $f0

Extra_bg_color_1:

.byte $f8

Extra_bg_color_2:

.byte $f9, $f3, $f4, $f0

ld027:

.byte $f3

ld028:

.byte $f9

ld029:

.byte $fa

ld02a:

.byte $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ad, $ad, $ad, $ad, $ad, $ad, $ad, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $d1, $00, $00, $d8, $00, $03, $7e, $f1, $00, $00, $00, $7f, $0f, $fb, $f0, $f8, $f9, $f3, $f4, $f0, $f3, $f9, $fa, $f3, $f5, $f6, $f7, $fc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $e2, $19, $00, $00, $81, $09, $00

ld407:

.byte $d8

ld408:

.byte $0c, $00, $0e

ld40b:

.byte $21

ld40c:

.byte $19

ld40d:

.byte $08, $0c, $00, $00, $06, $41, $1a, $00

ld415:

.byte $09

ld416:

.byte $73

ld417:

.byte $05

ld418:

.byte $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $e2, $19, $00, $00, $81, $09, $00, $d8, $0c, $00, $0e, $21, $19, $08, $0c, $00, $00, $06, $41, $1a, $00, $09, $73, $05, $3f, $00, $00, $00, $00, $00, $00, $00, $c1, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c2, $c2, $c2, $c6, $c6, $c6, $c6, $c2, $c6, $c6, $c6, $c6, $c2, $c6, $c6, $c6, $c6, $c2, $c2, $c2, $c2, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c2, $c2, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c2, $c2, $c2, $c6, $c6, $c6, $c6, $c2, $c6, $c6, $c6, $c6, $c2, $c6, $c6, $c6, $c6, $c2, $c2, $c2, $c2, $c4, $c3, $c3, $c3, $c3, $c3, $c3, $c4, $c2, $c2, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c4, $c7, $c7, $c7, $c7, $c7, $c7, $c4, $c2, $c2, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c4, $c7, $c7, $c7, $c7, $c7, $c7, $c4, $c2, $c2, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c2, $c2, $c2, $c2, $c2, $c2, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $c2, $c2, $c2, $c2, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c2, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c2, $c2, $c2, $c2, $c2, $c2

ld900:

.byte $c7, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $c2, $c2, $c2, $c2, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c2, $c2, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c2, $c2, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c2, $c2, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c2, $c2, $c2, $c2, $c2, $c3, $c3, $c3, $c3, $c3, $c3, $c3, $c3, $c3, $c3, $c2, $c2, $c2, $c2, $c2, $c2, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c4, $c2, $c2, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c7, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $c2, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $cf, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0

ldc00:

.byte $7f

ldc01:

.byte $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00

ldc0d:

.byte $00

ldc0e:

.byte $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08, $7f, $ff, $ff, $00, $c1, $11, $ff, $ff, $00, $00, $00, $01, $00, $00, $00, $08

ldd00:

.byte $96, $ff

ldd02:

.byte $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $96, $ff, $3f, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $00, $00, $08, $08, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $85, $56, $20, $0f, $bc, $a5, $61, $c9, $88, $90, $03, $20, $d4, $ba, $20, $cc, $bc, $a5, $07, $18, $69, $81, $f0, $f3, $38, $e9, $01, $48, $a2, $05, $b5, $69, $b4, $61, $95, $61, $94, $69, $ca, $10, $f5, $a5, $56, $85, $70, $20, $53, $b8, $20, $b4, $bf, $a9, $c4, $a0, $bf, $20, $59, $e0, $a9, $00, $85, $6f, $68, $20, $b9, $ba, $60, $85, $71, $84, $72, $20, $ca, $bb, $a9, $57, $20, $28, $ba, $20, $5d, $e0, $a9, $57, $a0, $00, $4c, $28, $ba, $85, $71, $84, $72, $20, $c7, $bb, $b1, $71, $85, $67, $a4, $71, $c8, $98, $d0, $02, $e6, $72, $85, $71, $a4, $72, $20, $28, $ba, $a5, $71, $a4, $72, $18, $69, $05, $90, $01, $c8, $85, $71, $84, $72, $20, $67, $b8, $a9, $5c, $a0, $00, $c6, $67, $d0, $e4, $60, $98, $35, $44, $7a, $00, $68, $28, $b1, $46, $00, $20, $2b, $bc, $30, $37, $d0, $20, $20, $f3, $ff, $86, $22, $84, $23, $a0, $04, $b1, $22, $85, $62, $c8, $b1, $22, $85, $64, $a0, $08, $b1, $22, $85, $63, $c8, $b1, $22, $85, $65, $4c, $e3, $e0, $a9, $8b, $a0, $00, $20, $a2, $bb, $a9, $8d, $a0, $e0, $20, $28, $ba, $a9, $92, $a0, $e0, $20, $67, $b8, $a6, $65, $a5, $62, $85, $65, $86, $62, $a6, $63, $a5, $64, $85, $63, $86, $64, $a9, $00, $85, $66, $a5, $61, $85, $70, $a9, $80, $85, $61, $20, $d7, $b8, $a2, $8b, $a0, $00, $4c, $d4, $bb, $c9, $f0, $d0, $07, $84, $38, $86, $37, $4c, $63, $a6, $aa, $d0, $02, $a2, $1e, $4c, $37, $a4, $20, $d2, $ff, $b0, $e8, $60, $20, $cf, $ff, $b0, $e2, $60, $20, $ad, $e4, $b0, $dc, $60, $20, $c6, $ff, $b0, $d6, $60, $20, $e4, $ff, $b0, $d0, $60, $20, $8a, $ad, $20, $f7, $b7, $a9, $e1, $48, $a9, $46, $48, $ad, $0f, $03, $48, $ad, $0c, $03, $ae, $0d, $03, $ac, $0e, $03, $28, $6c, $14, $00, $08, $8d, $0c, $03, $8e, $0d, $03, $8c, $0e, $03, $68, $8d, $0f, $03, $60, $20, $d4, $e1, $a6, $2d, $a4, $2e, $a9, $2b, $20, $d8, $ff, $b0, $95, $60, $a9, $01, $2c, $a9, $00, $85, $0a, $20, $d4, $e1, $a5, $0a, $a6, $2b, $a4, $2c, $20, $d5, $ff, $b0, $57, $a5, $0a, $f0, $17, $a2, $1c, $20, $b7, $ff, $29, $10, $d0, $17, $a5, $7a, $c9, $02, $f0, $07, $a9, $64, $a0, $a3, $4c, $1e, $ab, $60, $20, $b7, $ff, $29, $bf, $f0, $05, $a2, $1d, $4c, $37, $a4, $a5, $7b, $c9, $02, $d0, $0e, $86, $2d, $84, $2e, $a9, $76, $a0, $a3, $20, $1e, $ab, $4c, $2a, $a5, $20, $8e, $a6, $20, $33, $a5, $4c, $77, $a6, $20, $19, $e2, $20, $c0, $ff, $b0, $0b, $60, $20, $19, $e2, $a5, $49, $20, $c3, $ff, $90, $c3, $4c, $f9, $e0, $a9, $00, $20, $bd, $ff, $a2, $01, $a0, $00, $20, $ba, $ff, $20, $06, $e2, $20, $57, $e2, $20, $06, $e2, $20, $00, $e2, $a0, $00, $86, $49, $20, $ba, $ff, $20, $06, $e2, $20, $00, $e2, $8a, $a8, $a6, $49, $4c, $ba, $ff, $20, $0e, $e2, $4c, $9e, $b7, $20, $79, $00, $d0, $02, $68, $68, $60, $20, $fd, $ae, $20, $79, $00, $d0, $f7, $4c, $08, $af, $a9, $00, $20, $bd, $ff, $20, $11, $e2, $20, $9e, $b7, $86, $49, $8a, $a2, $01, $a0, $00, $20, $ba, $ff, $20, $06, $e2, $20, $00, $e2, $86, $4a, $a0, $00, $a5, $49, $e0, $03, $90, $01, $88, $20, $ba, $ff, $20, $06, $e2, $20, $00, $e2, $8a, $a8, $a6, $4a, $a5, $49, $20, $ba, $ff, $20, $06, $e2, $20, $0e, $e2, $20, $9e, $ad, $20, $a3, $b6, $a6, $22, $a4, $23, $4c, $bd, $ff, $a9, $e0, $a0, $e2, $20, $67, $b8, $20, $0c, $bc, $a9, $e5, $a0, $e2, $a6, $6e, $20, $07, $bb, $20, $0c, $bc, $20, $cc, $bc, $a9, $00, $85, $6f, $20, $53, $b8, $a9, $ea, $a0, $e2, $20, $50, $b8, $a5, $66, $48, $10, $0d, $20, $49, $b8, $a5, $66, $30, $09, $a5, $12, $49, $ff, $85, $12, $20, $b4, $bf, $a9, $ea, $a0, $e2, $20, $67, $b8, $68, $10, $03, $20, $b4, $bf, $a9, $ef, $a0, $e2, $4c, $43, $e0, $20, $ca, $bb, $a9, $00, $85, $12, $20, $6b, $e2, $a2, $4e, $a0, $00, $20, $f6, $e0, $a9, $57, $a0, $00, $20, $a2, $bb, $a9, $00, $85, $66, $a5, $12, $20, $dc, $e2, $a9, $4e, $a0, $00, $4c, $0f, $bb, $48, $4c, $9d, $e2, $81, $49, $0f, $da, $a2, $83, $49, $0f, $da, $a2, $7f, $00, $00, $00, $00, $05, $84, $e6, $1a, $2d, $1b, $86, $28, $07, $fb, $f8, $87, $99, $68, $89, $01, $87, $23, $35, $df, $e1, $86, $a5, $5d, $e7, $28, $83, $49, $0f, $da, $a2, $a5, $66, $48, $10, $03, $20, $b4, $bf, $a5, $61, $48, $c9, $81, $90, $07, $a9, $bc, $a0, $b9, $20, $0f, $bb, $a9, $3e, $a0, $e3, $20, $43, $e0, $68, $c9, $81, $90, $07, $a9, $e0, $a0, $e2, $20, $50, $b8, $68, $10, $03, $4c, $b4, $bf, $60, $0b, $76, $b3, $83, $bd, $d3, $79, $1e, $f4, $a6, $f5, $7b, $83, $fc, $b0, $10, $7c, $0c, $1f, $67, $ca, $7c, $de, $53, $cb, $c1, $7d, $14, $64, $70, $4c, $7d, $b7, $ea, $51, $7a, $7d, $63, $30, $88, $7e, $7e, $92, $44, $99, $3a, $7e, $4c, $cc, $91, $c7, $7f, $aa, $aa, $aa, $13, $81, $00, $00, $00, $00, $20, $cc, $ff, $a9, $00, $85, $13, $20, $7a, $a6, $58, $a2, $80, $6c, $00, $03, $8a, $30, $03, $4c, $3a, $a4, $4c, $74, $a4, $20, $53, $e4, $20, $bf, $e3, $20, $22, $e4, $a2, $fb, $9a, $d0, $e4, $e6, $7a, $d0, $02, $e6, $7b, $ad, $60, $ea, $c9, $3a, $b0, $0a, $c9, $20, $f0, $ef, $38, $e9, $30, $38, $e9, $d0, $60, $80, $4f, $c7, $52, $58, $a9, $4c, $85, $54, $8d, $10, $03, $a9, $48, $a0, $b2, $8d, $11, $03, $8c, $12, $03, $a9, $91, $a0, $b3, $85, $05, $84, $06, $a9, $aa, $a0, $b1, $85, $03, $84, $04, $a2, $1c, $bd, $a2, $e3, $95, $73, $ca, $10, $f8, $a9, $03, $85, $53, $a9, $00, $85, $68, $85, $13, $85, $18, $a2, $01, $8e, $fd, $01, $8e, $fc, $01, $a2, $19, $86, $16, $38, $20, $9c, $ff, $86, $2b, $84, $2c, $38, $20, $99, $ff, $86, $37, $84, $38, $86, $33, $84, $34, $a0, $00, $98, $91, $2b, $e6, $2b, $d0, $02, $e6, $2c, $60, $a5, $2b, $a4, $2c, $20, $08, $a4, $a9, $73, $a0, $e4, $20, $1e, $ab, $a5, $37, $38, $e5, $2b, $aa, $a5, $38, $e5, $2c, $20, $cd, $bd, $a9, $60, $a0, $e4, $20, $1e, $ab, $4c, $44, $a6, $8b, $e3, $83, $a4, $7c, $a5, $1a, $a7, $e4, $a7, $86, $ae, $a2, $0b, $bd, $47, $e4, $9d, $00, $03, $ca, $10, $f7, $60, $00, $20, $42, $41, $53, $49, $43, $20, $42, $59, $54, $45, $53, $20, $46, $52, $45, $45, $0d, $00, $93, $0d, $20, $20, $20, $20, $2a, $2a, $2a, $2a, $20, $43, $4f, $4d, $4d, $4f, $44, $4f, $52, $45, $20, $36, $34, $20, $42, $41, $53, $49, $43, $20, $56, $32, $20, $2a, $2a, $2a, $2a, $0d, $0d, $20, $36, $34, $4b, $20, $52, $41, $4d, $20, $53, $59, $53, $54, $45, $4d, $20, $20, $00, $81, $48, $20, $c9, $ff, $aa, $68, $90, $01, $8a, $60, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $85, $a9, $a9, $01, $85, $ab, $60

le4da:
            lda l0286

.byte $91, $f3, $60, $69, $02, $a4, $91, $c8, $d0, $04, $c5, $a1, $d0, $f7, $60, $19, $26, $44, $19, $1a, $11, $e8, $0d, $70, $0c, $06, $06, $d1, $02, $37, $01, $ae, $00, $69, $00, $a2, $00, $a0, $dc, $60, $a2, $28, $a0, $19, $60, $b0, $07, $86, $d6, $84, $d3, $20, $6c, $e5, $a6, $d6, $a4, $d3, $60, $20, $a0, $e5, $a9, $00, $8d, $91, $02, $85, $cf, $a9, $48, $8d, $8f, $02, $a9, $eb, $8d, $90, $02, $a9, $0a, $8d, $89, $02, $8d, $8c, $02, $a9, $0e, $8d, $86, $02, $a9, $04, $8d, $8b, $02, $a9, $0c, $85, $cd, $85, $cc

le544:
            lda l0288
            ora #$80
            tay                             // Transfer A to Y
            lda #$00
            tax


le54d:
            sty $d9,x
            clc                             // Clear carry flag
            adc #$28
            bcc le555
            iny


le555:
            inx                             // Increase X
            cpx #$1a
            bne le54d
            lda #$ff
            sta $d9,x
            ldx #$18


le560:
            jsr le9ff
            dex                             // Decrease X
            bpl le560
            ldy #$00
            sty $d3
            sty $d6
            ldx $d6
            lda $d3


le570:
            ldy $d9,x
            bmi le57c
            clc                             // Clear carry flag
            adc #$28
            sta $d3
            dex                             // Decrease X
            bpl le570


le57c:
            jsr le9f0
            lda #$27
            inx                             // Increase X


le582:
            ldy $d9,x
            bmi le58c
            clc                             // Clear carry flag
            adc #$28
            inx                             // Increase X
            bpl le582


le58c:
            sta $d5
            jmp lea24


le591:
            cpx $c9

.byte $f0, $03, $4c, $ed, $e6, $60, $ea, $20, $a0, $e5, $4c, $66, $e5, $a9, $03, $85, $9a, $a9, $00, $85, $99, $a2, $2f, $bd, $b8, $ec, $9d, $ff, $cf, $ca, $d0, $f7, $60

le5b4:
            ldy l0277                       // Load keyboard buffer
            ldx #$00


le5b9:
            lda l0278,x
            sta l0277,x
            inx
            cpx $c6
            bne le5b9
            dec $c6
            tya
            cli
            clc
            rts


le5ca:
            jsr le716


le5cd:
            lda $c6
            sta $cc
            sta l0292
            beq le5cd
            sei
            lda $cf
            beq le5e7
            lda $ce
            ldx l0287                       // Color of character under cursor.
            ldy #$00
            sty $cf
            jsr lea13


le5e7:
            jsr le5b4
            cmp #$83
            bne le5fe
            ldx #$09
            sei
            stx $c6


le5f3:
            lda lece6,x
            sta l0276,x
            dex
            bne le5f3
            beq le5cd

le5fe:
            cmp #$0d
            bne le5ca
            ldy $d5
            sty $d0


le606:
            lda ($d1),y
            cmp #$20
            bne le60f
            dey
            bne le606


le60f:
            iny
            sty $c8
            ldy #$00
            sty l0292
            sty $d3
            sty $d4
            lda $c9
            bmi le63a
            ldx $d6
            jsr le591
            cpx $c9
            bne le63a
            lda $ca
            sta $d3
            cmp $c8
            bcc le63a
            bcs le65d

le632:
            tya                             // Transfer Y to A.
            pha                             // Push A to the stack.
            txa                             // Transfer X to A.
            pha                             // Push A to the stack.
            lda $d0                         // Load A with $90
            beq le5cd                       // Branch le5cd if equal zero.
            ldy $d3
            lda ($d1),y
            sta $d7
            and #$3f
            asl $d7
            bit $d7
            bpl le64a
            ora #$80


le64a:
            bcc le650
            ldx $d4
            bne le654


le650:
            bvs le654
            ora #$40


le654:
            inc $d3
            jsr le684
            cpy $c8
            bne le674
            lda #$00
            sta $d0
            lda #$0d
            ldx $99
            cpx #$03
            beq le66f
            ldx $9a
            cpx #$03
            beq le672


le66f:
            jsr le716


le672:
            lda #$0d


le674:
            sta $d7
            pla
            tax
            pla
            tay
            lda $d7
            cmp #$de
            bne le682
            lda #$ff


le682:
            clc
            rts


le684:
            cmp #$22
            bne le690
            lda $d4
            eor #$01
            sta $d4
            lda #$22


le690:
            rts


le691:
            ora #$40


le693:
            ldx $c7

.byte $f0, $02

le697:
            ora #$80

.byte $a6, $d8, $f0, $02, $c6, $d8, $ae, $86, $02, $20, $13, $ea, $20, $b6, $e6

le6a8:
            pla

.byte $a8, $a5, $d8, $f0, $02, $46, $d4, $68, $aa, $68, $18, $58, $60, $20, $b3, $e8, $e6, $d3, $a5, $d5, $c5, $d3, $b0, $3f, $c9, $4f, $f0, $32, $ad, $92, $02, $f0, $03, $4c, $67, $e9, $a6, $d6, $e0, $19, $90, $07, $20, $ea, $e8, $c6, $d6, $a6, $d6

le6da:
            asl $d9,x

.byte $56, $d9, $e8, $b5, $d9, $09, $80, $95, $d9, $ca, $a5, $d5, $18, $69, $28, $85, $d5, $b5, $d9, $30, $03, $ca, $d0, $f9, $4c, $f0, $e9, $c6, $d6, $20, $7c, $e8, $a9, $00, $85, $d3, $60

le701:
            ldx $d6

.byte $d0, $06, $86, $d3, $68, $68, $d0, $9d, $ca, $86, $d6, $20, $6c, $e5, $a4, $d5, $84, $d3, $60

le716:
            pha                         // Push A to the stack.
            sta $d7                     // Store A to $d7.
            txa                         // Transfer X to A.
            pha                         // Push A to the stack.
            tya                         // Transfer Y to A.
            pha                         // Push A to the stack.
            lda #$00                    // Load A with #00
            sta $d0                     // Store A to $d0
            ldy $d3                     // Load Y with $d3
            lda $d7                     // Load A with $d7
            bpl le72a                   // Branch to le72a if positive.
            jmp le7d4                   // Jump to le7d4.


le72a:
            cmp #$0d
            bne le731
            jmp le891


le731:
            cmp #$20
            bcc le745
            cmp #$60
            bcc le73d
            and #$df
            bne le73f


le73d:
            and #$3f


le73f:
            jsr le684
            jmp le693


le745:
            ldx $d8
            beq le74c
            jmp le697


le74c:
            cmp #$14
            bne le77e
            tya
            bne le759
            jsr le701
            jmp le773


le759:
            jsr le8a1
            dey
            sty $d3
            jsr lea24


le762:
            iny
            lda ($d1),y
            dey
            sta ($d1),y
            iny
            lda ($f3),y
            dey
            sta ($f3),y
            iny
            cpy $d5
            bne le762


le773:
            lda #$20
            sta ($d1),y
            lda l0286
            sta ($f3),y
            bpl le7cb


le77e:
            ldx $d4
            beq le785
            jmp le697


le785:
            cmp #$12
            bne le78b
            sta $c7


le78b:
            cmp #$13
            bne le792
            jsr le566


le792:
            cmp #$1d
            bne le7ad
            iny
            jsr le8b3
            sty $d3
            dey
            cpy $d5
            bcc le7aa
            dec $d6
            jsr le87c
            ldy #$00


le7a8:
            sty $d3


le7aa:
            jmp le6a8


le7ad:
            cmp #$11
            bne le7ce
            clc
            tya
            adc #$28
            tay
            inc $d6
            cmp $d5
            bcc le7a8
            beq le7a8
            dec $d6


le7c0:
            sbc #$28
            bcc le7c8
            sta $d3
            bne le7c0


le7c8:
            jsr le87c


le7cb:
            jmp le6a8


le7ce:
            jsr le8cb
            jmp lec44


le7d4:
            and #$7f                        // (e7d4) AND on A with #7f
            cmp #$7f                        // (e7d6) Compare A to #7f
            bne le7dc                       // (e7d8) Branch to le7dc if not equal zero.
            lda #$5e                        // (e7da) Load A with #5e

le7dc:
            cmp #$20                        // (e7dc) Compare A to #20
            bcc le7e3                       // (e7de) Branch to le7e3 if carry is clear
            jmp le691                       // (e7e0) Jump to le691


le7e3:
            cmp #$0d                        // (e7e3) Compare A to #0d
            bne le7ea                       // (e7e5) Branch le7ea if not equal zero.
            jmp le891                       // (e7e7) Jump to le891.


le7ea:
            ldx $d4                         // (e7ea) Load X with $d4
            bne le82d                       // (e7ec) Branch to le82d if not equal zero.
            cmp #$14                        // (e7ee) Compae A to #14
            bne le829                       // (e7f0) Branch to le829 if not equal zero.
            ldy $d5                         // 
            lda ($d1),y
            cmp #$20
            bne le7fe
            cpy $d3
            bne le805


le7fe:
            cpy #$4f
            beq le826
            jsr le965


le805:
            ldy $d5
            jsr lea24


le80a:
            dey
            lda ($d1),y
            iny
            sta ($d1),y
            dey
            lda ($f3),y
            iny
            sta ($f3),y
            dey
            cpy $d3
            bne le80a
            lda #$20
            sta ($d1),y
            lda l0286
            sta ($f3),y
            inc $d8


le826:
            jmp le6a8


le829:
            ldx $d8                     // (e829) Load X with $d8
            beq le832                   // (e82b) Branch to le832 if equal zero.


le82d:
            ora #$40                    // 
            jmp le697


le832:
            cmp #$11                    // (e832) Compare A to #11.
            bne le84c                   // (e834) Branch to le84c if not equal zero.
            ldx $d6                     //
            beq le871
            dec $d6
            lda $d3
            sec
            sbc #$28
            bcc le847
            sta $d3
            bpl le871


le847:
            jsr le56c
            bne le871


le84c:
            cmp #$12                    // (e84c) Compare A to #12
            bne le854                   // (e84e) 
            lda #$00
            sta $c7


le854:
            cmp #$1d
            bne le86a
            tya
            beq le864
            jsr le8a1
            dey
            sty $d3
            jmp le6a8


le864:
            jsr le701
            jmp le6a8


le86a:
            cmp #$13
            bne le874
            jsr le544


le871:
            jmp le6a8


le874:
            ora #$80
            jsr le8cb
            jmp lec4f


le87c:
            lsr $c9
            ldx $d6


le880:
            inx
            cpx #$19
            bne le888
            jsr le8ea


le888:
            lda $d9,x
            bpl le880
            stx $d6
            jmp le56c


le891:
            ldx #$00
            stx $d8
            stx $c7
            stx $d4
            stx $d3
            jsr le87c
            jmp le6a8


le8a1:
            ldx #$02
            lda #$00


le8a5:
            cmp $d3
            beq le8b0
            clc
            adc #$28
            dex
            bne le8a5
            rts


le8b0:
            dec $d6
            rts


le8b3:
            ldx #$02
            lda #$27


le8b7:
            cmp $d3
            beq le8c2
            clc
            adc #$28
            dex
            bne le8b7
            rts


le8c2:
            ldx $d6
            cpx #$19
            beq le8ca
            inc $d6


le8ca:
            rts


le8cb:
            ldx #$0f


le8cd:
            cmp le8da,x
            beq le8d6
            dex
            bpl le8cd
            rts


le8d6:
            stx l0286
            rts


le8da:

.byte $90, $05, $1c, $9f, $9c, $1e, $1f, $9e, $81, $95, $96, $97, $98, $99, $9a, $9b

le8ea:
            lda $ac
            pha
            lda $ad
            pha
            lda $ae
            pha
            lda $af
            pha


le8f6:
            ldx #$ff
            dec $d6
            dec $c9
            dec l02a5


le8ff:
            inx
            jsr le9f0
            cpx #$18
            bcs le913
            lda lecf1,x
            sta $ac
            lda $da,x
            jsr le9c8
            bmi le8ff


le913:
            jsr le9ff
            ldx #$00


le918:
            lda $d9,x
            and #$7f
            ldy $da,x
            bpl le922
            ora #$80


le922:
            sta $d9,x
            inx
            cpx #$18
            bne le918
            lda $f1
            ora #$80
            sta $f1
            lda $d9
            bpl le8f6
            inc $d6
            inc l02a5
            lda #$7f
            sta ldc00                       // CIA #1 - port A, keyboard matrix and joystick 2
            lda ldc01                       // CIA #1 - port B, keyboard matrix and joystick 1
            cmp #$fb
            php
            lda #$7f
            sta ldc00                       // CIA #1 - port A, keyboard matrix and joystick 2
            plp
            bne le956
            ldy #$00


le94d:
            nop
            dex
            bne le94d
            dey
            bne le94d
            sty $c6


le956:
            ldx $d6


le958:
            pla
            sta $af
            pla
            sta $ae
            pla
            sta $ad
            pla
            sta $ac
            rts


le965:
            ldx $d6


le967:
            inx
            lda $d9,x
            bpl le967
            stx l02a5
            cpx #$18
            beq le981
            bcc le981
            jsr le8ea
            ldx l02a5
            dex
            dec $d6
            jmp le6da


le981:
            lda $ac
            pha
            lda $ad
            pha
            lda $ae
            pha
            lda $af
            pha
            ldx #$19


le98f:
            dex
            jsr le9f0
            cpx l02a5
            bcc le9a6
            beq le9a6
            lda lecef,x
            sta $ac
            lda $d8,x
            jsr le9c8
            bmi le98f


le9a6:
            jsr le9ff
            ldx #$17


le9ab:
            cpx l02a5
            bcc le9bf
            lda $da,x
            and #$7f
            ldy $d9,x
            bpl le9ba
            ora #$80


le9ba:
            sta $da,x
            dex
            bne le9ab


le9bf:
            ldx l02a5
            jsr le6da
            jmp le958


le9c8:
            and #$03
            ora l0288
            sta $ad
            jsr le9e0
            ldy #$27


le9d4:
            lda ($ac),y
            sta ($d1),y
            lda ($ae),y
            sta ($f3),y
            dey
            bpl le9d4
            rts


le9e0:
            jsr lea24
            lda $ac
            sta $ae
            lda $ad
            and #$03
            ora #$d8
            sta $af
            rts


le9f0:
            lda lecf0,x
            sta $d1
            lda $d9,x
            and #$03
            ora l0288
            sta $d2
            rts


le9ff:
            ldy #$27
            jsr le9f0
            jsr lea24


lea07:
            jsr le4da
            lda #$20
            sta ($d1),y
            dey
            bpl lea07
            rts

.byte $ea

lea13:
            tay                             // (ea13) Transfer A to Y
            lda #$02                        // (ea14) Load A with #02
            sta $cd                         // (ea16) Store A to $cd
            jsr lea24                       // (ea18) Jump to subroutine at lea24
            tya                             // (ea1b) Transfer Y to A
            ldy $d3                         // (ea1c) 
            sta ($d1),y                     // (ea1e) Render character to screen 
            txa                             // (ea20) 
            sta ($f3),y                     // (ea21) 
            rts                             // (ea23) Return from subroutine


lea24:
            lda $d1
            sta $f3
            lda $d2
            and #$03
            ora #$d8
            sta $f4
            rts

.byte $20, $ea, $ff, $a5, $cc, $d0, $29, $c6, $cd, $d0, $25, $a9, $14, $85, $cd, $a4, $d3, $46, $cf, $ae, $87, $02, $b1, $d1, $b0, $11, $e6, $cf, $85, $ce, $20, $24, $ea, $b1, $f3, $8d, $87, $02, $ae, $86, $02, $a5, $ce, $49, $80, $20, $1c, $ea, $a5, $01, $29, $10, $f0, $0a, $a0, $00, $84, $c0, $a5, $01, $09, $20, $d0, $08, $a5, $c0, $d0, $06, $a5, $01, $29, $1f

lea79:
            sta $01
            jsr lea87
            lda ldc0d                       // CIA #1 - interrupt control and status
            pla
            tay                             // Transfer A to Y
            pla
            tax
            pla
            rti


lea87:
            lda #$00
            sta l028d
            ldy #$40
            sty $cb
            sta ldc00                       // CIA #1 - port A, keyboard matrix and joystick 2
            ldx ldc01                       // CIA #1 - port B, keyboard matrix and joystick 1
            cpx #$ff
            beq leafb
            tay                             // Transfer A to Y
            lda #$81
            sta $f5
            lda #$eb
            sta $f6
            lda #$fe
            sta ldc00                       // CIA #1 - port A, keyboard matrix and joystick 2


leaa8:
            ldx #$08
            pha


leaab:
            lda ldc01                       // CIA #1 - port B, keyboard matrix and joystick 1
            cmp ldc01                       // CIA #1 - port B, keyboard matrix and joystick 1
            bne leaab


leab3:
            lsr
            bcs leacc
            pha
            lda ($f5),y
            cmp #$05
            bcs leac9
            cmp #$03
            beq leac9
            ora l028d
            sta l028d
            bpl leacb


leac9:
            sty $cb


leacb:
            pla


leacc:
            iny
            cpy #$41
            bcs leadc
            dex                             // Decrease X
            bne leab3
            sec                             // Set carry flag
            pla
            rol
            sta ldc00                       // CIA #1 - port A, keyboard matrix and joystick 2
            bne leaa8


leadc:
            pla
            jmp (l028f)


leae0:
            ldy $cb
            lda ($f5),y
            tax
            cpy $c5
            beq leaf0
            ldy #$10
            sty l028c
            bne leb26


leaf0:
            and #$7f
            bit l028a
            bmi leb0d
            bvs leb42
            cmp #$7f


leafb:
            beq leb26
            cmp #$14
            beq leb0d
            cmp #$20
            beq leb0d
            cmp #$1d
            beq leb0d
            cmp #$11
            bne leb42


leb0d:
            ldy l028c
            beq leb17
            dec l028c
            bne leb42


leb17:
            dec l028b
            bne leb42
            ldy #$04
            sty l028b
            ldy $c6
            dey
            bpl leb42


leb26:
            ldy $cb
            sty $c5
            ldy l028d
            sty l028e
            cpx #$ff
            beq leb42
            txa
            ldx $c6
            cpx l0289
            bcs leb42
            sta l0277,x
            inx                             // Increase X
            stx $c6


leb42:
            lda #$7f
            sta ldc00                       // CIA #1 - port A, keyboard matrix and joystick 2
            rts

.byte $ad, $8d, $02, $c9, $03, $d0, $15, $cd, $8e, $02, $f0, $ee, $ad, $91, $02, $30, $1d, $ad, $18, $d0, $49, $02, $8d, $18, $d0, $4c, $76, $eb

leb64:
            asl
            cmp #$08
            bcc leb6b
            lda #$06


leb6b:
            tax
            lda leb79,x
            sta $f5
            lda leb7a,x
            sta $f6
            jmp leae0


leb79:

.byte $81

leb7a:

.byte $eb, $c2, $eb, $03, $ec, $78, $ec, $14, $0d, $1d, $88, $85, $86, $87, $11, $33, $57, $41, $34, $5a, $53, $45, $01, $35, $52, $44, $36, $43, $46, $54, $58, $37, $59, $47, $38, $42, $48, $55, $56, $39, $49, $4a, $30, $4d, $4b, $4f, $4e, $2b, $50, $4c, $2d, $2e, $3a, $40, $2c, $5c, $2a, $3b, $13, $01, $3d, $5e, $2f, $31, $5f, $04, $32, $20, $02, $51, $03, $ff, $94, $8d, $9d, $8c, $89, $8a, $8b, $91, $23, $d7, $c1, $24, $da, $d3, $c5, $01, $25, $d2, $c4, $26, $c3, $c6, $d4, $d8, $27, $d9, $c7, $28, $c2, $c8, $d5, $d6, $29, $c9, $ca, $30, $cd, $cb, $cf, $ce, $db, $d0, $cc, $dd, $3e, $5b, $ba, $3c, $a9, $c0, $5d, $93, $01, $3d, $de, $3f, $21, $5f, $04, $22, $a0, $02, $d1, $83, $ff, $94, $8d, $9d, $8c, $89, $8a, $8b, $91, $96, $b3, $b0, $97, $ad, $ae, $b1, $01, $98, $b2, $ac, $99, $bc, $bb, $a3, $bd, $9a, $b7, $a5, $9b, $bf, $b4, $b8, $be, $29, $a2, $b5, $30, $a7, $a1, $b9, $aa, $a6, $af, $b6, $dc, $3e, $5b, $a4, $3c, $a8, $df, $5d, $93, $01, $3d, $de, $3f, $81, $5f, $04, $95, $a0, $02, $ab, $83, $ff

lec44:
            cmp #$0e
            bne lec4f
            lda ld018                       // Changing character set
            ora #$02                        // Change to #03
            bne lec58                       // If not equal zero, branch to lec58 to store #03.


lec4f:
            cmp #$8e
            bne lec5e
            lda ld018                       // memory setup
            and #$fd


lec58:
            sta ld018                       // Store #03 to ld018. This will set the character set at $4800


lec5b:
            jmp le6a8


lec5e:
            cmp #$08
            bne lec69
            lda #$80
            ora l0291
            bmi lec72


lec69:
            cmp #$09
            bne lec5b
            lda #$7f
            and l0291


lec72:
            sta l0291
            jmp le6a8

.byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $1c, $17, $01, $9f, $1a, $13, $05, $ff, $9c, $12, $04, $1e, $03, $06, $14, $18, $1f, $19, $07, $9e, $02, $08, $15, $16, $12, $09, $0a, $92, $0d, $0b, $0f, $0e, $ff, $10, $0c, $ff, $ff, $1b, $00, $ff, $1c, $ff, $1d, $ff, $ff, $1f, $1e, $ff, $90, $06, $ff, $05, $ff, $ff, $11, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $9b, $37, $00, $00, $00, $08, $00, $14, $0f, $00, $00, $00, $00, $00, $00, $0e, $06, $01, $02, $03, $04, $00, $01, $02, $03, $04, $05, $06, $07, $4c, $4f, $41, $44, $0d, $52, $55, $4e, $0d

lecf0:

.byte $00, $28, $50, $78, $a0, $c8, $f0, $18, $40, $68, $90, $b8, $e0, $08, $30, $58, $80, $a8, $d0, $f8, $20, $48, $70, $98, $c0, $09, $40, $2c, $09, $20, $20, $a4, $f0, $48, $24, $94, $10, $0a, $38, $66, $a3, $20, $40, $ed, $46, $94, $46, $a3, $68, $85, $95, $78, $20, $97, $ee, $c9, $3f, $d0, $03, $20, $85, $ee, $ad, $00, $dd, $09, $08, $8d, $00, $dd, $78, $20, $8e, $ee, $20, $97, $ee, $20, $b3, $ee, $78, $20, $97, $ee, $20, $a9, $ee, $b0, $64, $20, $85, $ee, $24, $a3, $10, $0a, $20, $a9, $ee, $90, $fb, $20, $a9, $ee, $b0, $fb, $20, $a9, $ee, $90, $fb, $20, $8e, $ee, $a9, $08, $85, $a5, $ad, $00, $dd, $cd, $00, $dd, $d0, $f8, $0a, $90, $3f, $66, $95, $b0, $05, $20, $a0, $ee, $d0, $03, $20, $97, $ee, $20, $85, $ee, $ea, $ea, $ea, $ea, $ad, $00, $dd, $29, $df, $09, $10, $8d, $00, $dd, $c6, $a5, $d0, $d4, $a9, $04, $8d, $07, $dc, $a9, $19, $8d, $0f, $dc, $ad, $0d, $dc, $ad, $0d, $dc, $29, $02, $d0, $0a, $20, $a9, $ee, $b0, $f4, $58, $60, $a9, $80, $2c, $a9, $03, $20, $1c, $fe, $58, $18, $90, $4a, $85, $95, $20, $36, $ed, $ad, $00, $dd, $29, $f7, $8d, $00, $dd, $60, $85, $95, $20, $36, $ed, $78, $20, $a0, $ee, $20, $be, $ed, $20, $85, $ee, $20, $a9, $ee, $30, $fb, $58, $60

leddd:
            bit $94

.byte $30, $05, $38, $66, $94, $d0, $05, $48, $20, $40, $ed, $68, $85, $95, $18, $60, $78, $20, $8e, $ee, $ad, $00, $dd, $09, $08, $8d, $00, $dd, $a9, $5f, $2c, $a9, $3f, $20, $11, $ed, $20, $be, $ed, $8a, $a2, $0a, $ca, $d0, $fd, $aa, $20, $85, $ee, $4c, $97, $ee

lee13:
            sei

.byte $a9, $00, $85, $a5, $20, $85, $ee, $20, $a9, $ee, $10, $fb, $a9, $01, $8d, $07, $dc, $a9, $19, $8d, $0f, $dc, $20, $97, $ee, $ad, $0d, $dc, $ad, $0d, $dc, $29, $02, $d0, $07, $20, $a9, $ee, $30, $f4, $10, $18, $a5, $a5, $f0, $05, $a9, $02, $4c, $b2, $ed, $20, $a0, $ee, $20, $85, $ee, $a9, $40, $20, $1c, $fe, $e6, $a5, $d0, $ca, $a9, $08, $85, $a5, $ad, $00, $dd, $cd, $00, $dd, $d0, $f8, $0a, $10, $f5, $66, $a4, $ad, $00, $dd, $cd, $00, $dd, $d0, $f8, $0a, $30, $f5, $c6, $a5, $d0, $e4, $20, $a0, $ee, $24, $90, $50, $03, $20, $06, $ee, $a5, $a4, $58, $18, $60, $ad, $00, $dd, $29, $ef, $8d, $00, $dd, $60

lee8e:
            lda ldd00                       // CIA #2 - port A, serial bus access

.byte $09, $10, $8d, $00, $dd, $60, $ad, $00, $dd, $29, $df, $8d, $00, $dd, $60, $ad, $00, $dd, $09, $20, $8d, $00, $dd, $60, $ad, $00, $dd, $cd, $00, $dd, $d0, $f8, $0a, $60, $8a, $a2, $b8, $ca, $d0, $fd, $aa, $60, $a5, $b4, $f0, $47, $30, $3f, $46, $b6, $a2, $00, $90, $01, $ca, $8a, $45, $bd, $85, $bd, $c6, $b4, $f0, $06, $8a, $29, $04, $85, $b5, $60, $a9, $20, $2c, $94, $02, $f0, $14, $30, $1c, $70, $14, $a5, $bd, $d0, $01, $ca, $c6, $b4, $ad, $93, $02, $10, $e3, $c6, $b4, $d0, $df, $e6, $b4, $d0, $f0, $a5, $bd, $f0, $ed, $d0, $ea, $70, $e9, $50, $e6, $e6, $b4, $a2, $ff, $d0, $cb, $ad, $94, $02, $4a, $90, $07, $2c, $01, $dd, $10, $1d, $50, $1e, $a9, $00, $85, $bd, $85, $b5, $ae, $98, $02, $86, $b4, $ac, $9d, $02, $cc, $9e, $02, $f0, $13, $b1, $f9, $85, $b6, $ee, $9d, $02, $60, $a9, $40, $2c, $a9, $10, $0d, $97, $02, $8d, $97, $02, $a9, $01, $8d, $0d, $dd, $4d, $a1, $02, $09, $80, $8d, $a1, $02, $8d, $0d, $dd, $60, $a2, $09, $a9, $20, $2c, $93, $02, $f0, $01, $ca, $50, $02, $ca, $ca, $60, $a6, $a9, $d0, $33, $c6, $a8, $f0, $36, $30, $0d, $a5, $a7, $45, $ab, $85, $ab, $46, $a7, $66, $aa, $60, $c6, $a8, $a5, $a7, $f0, $67, $ad, $93, $02, $0a, $a9, $01, $65, $a8, $d0, $ef, $a9, $90, $8d, $0d, $dd, $0d, $a1, $02, $8d, $a1, $02, $85, $a9, $a9, $02, $4c, $3b, $ef, $a5, $a7, $d0, $ea, $4c, $d3, $e4, $ac, $9b, $02, $c8, $cc, $9c, $02, $f0, $2a, $8c, $9b, $02, $88, $a5, $aa, $ae, $98, $02, $e0, $09, $f0, $04, $4a, $e8, $d0, $f8, $91, $f7, $a9, $20, $2c, $94, $02, $f0, $b4, $30, $b1, $a5, $a7, $45, $ab, $f0, $03, $70, $a9, $2c, $50, $a6, $a9, $01, $2c, $a9, $04, $2c, $a9, $80, $2c, $a9, $02, $0d, $97, $02, $8d, $97, $02, $4c, $7e, $ef, $a5, $aa, $d0, $f1, $f0, $ec, $85, $9a, $ad, $94, $02, $4a, $90, $29, $a9, $02, $2c, $01, $dd, $10, $1d, $d0, $20, $ad, $a1, $02, $29, $02, $d0, $f9, $2c, $01, $dd, $70, $fb, $ad, $01, $dd, $09, $02, $8d, $01, $dd, $2c, $01, $dd, $70, $07, $30, $f9, $a9, $40, $8d, $97, $02, $18, $60, $20, $28, $f0

lf017:
            ldy l029e

.byte $c8, $cc, $9d, $02, $f0, $f4, $8c, $9e, $02, $88, $a5, $9e, $91, $f9, $ad, $a1, $02, $4a, $b0, $1e, $a9, $10, $8d, $0e, $dd, $ad, $99, $02, $8d, $04, $dd, $ad, $9a, $02, $8d, $05, $dd, $a9, $81, $20, $3b, $ef, $20, $06, $ef, $a9, $11, $8d, $0e, $dd, $60, $85, $99, $ad, $94, $02, $4a, $90, $28, $29, $08, $f0, $24, $a9, $02, $2c, $01, $dd, $10, $ad, $f0, $22, $ad, $a1, $02, $4a, $b0, $fa, $ad, $01, $dd, $29, $fd, $8d, $01, $dd, $ad, $01, $dd, $29, $04, $f0, $f9, $a9, $90, $18, $4c, $3b, $ef, $ad, $a1, $02, $29, $12, $f0, $f3, $18, $60, $ad, $97, $02, $ac, $9c, $02, $cc, $9b, $02, $f0, $0b, $29, $f7, $8d, $97, $02, $b1, $f7, $ee, $9c, $02, $60, $09, $08, $8d, $97, $02, $a9, $00, $60

lf0a4:
            pha

.byte $ad, $a1, $02, $f0, $11, $ad, $a1, $02, $29, $03, $d0, $f9, $a9, $10, $8d, $0d, $dd, $a9, $00, $8d, $a1, $02, $68, $60, $0d, $49, $2f, $4f, $20, $45, $52, $52, $4f, $52, $20, $a3, $0d, $53, $45, $41, $52, $43, $48, $49, $4e, $47, $a0, $46, $4f, $52, $a0, $0d, $50, $52, $45, $53, $53, $20, $50, $4c, $41, $59, $20, $4f, $4e, $20, $54, $41, $50, $c5, $50, $52, $45, $53, $53, $20, $52, $45, $43, $4f, $52, $44, $20, $26, $20, $50, $4c, $41, $59, $20, $4f, $4e, $20, $54, $41, $50, $c5, $0d, $4c, $4f, $41, $44, $49, $4e, $c7, $0d, $53, $41, $56, $49, $4e, $47, $a0, $0d, $56, $45, $52, $49, $46, $59, $49, $4e, $c7, $0d, $46, $4f, $55, $4e, $44, $a0, $0d, $4f, $4b, $8d, $24, $9d, $10, $0d, $b9, $bd, $f0, $08, $29, $7f, $20, $d2, $ff, $c8, $28, $10, $f3, $18, $60, $a5, $99, $d0, $08, $a5, $c6, $f0, $0f, $78, $4c, $b4, $e5, $c9, $02, $d0, $18

lf14e:
            sty $97

.byte $20, $86, $f0, $a4, $97, $18, $60

lf157:
            lda $99                             // Load A with $99.
            bne lf166                           // Branch to lf166 if not equal zero.
            lda $d3                             // Load A with $d3. This stores the number of characters entered.
            sta $ca                             // Store A to $ca.
            lda $d6                             // Load A with $d6
            sta $c9                             // Store A to $c9.
            jmp le632                           // Jump to le632.


lf166:
            cmp #$03
            bne lf173
            sta $d0
            lda $d5
            sta $c8
            jmp le632


lf173:
            bcs lf1ad
            cmp #$02
            beq lf1b8
            stx $97
            jsr lf199
            bcs lf196
            pha
            jsr lf199
            bcs lf193
            bne lf18d
            lda #$40
            jsr lfe1c


lf18d:
            dec $a6
            ldx $97
            pla
            rts


lf193:
            tax
            pla
            txa


lf196:
            ldx $97
            rts


lf199:
            jsr lf80d
            bne lf1a9
            jsr lf841
            bcs lf1b4
            lda #$00
            sta $a6
            beq lf199


lf1a9:
            lda ($b2),y
            clc
            rts


lf1ad:
            lda $90
            beq lf1b5


lf1b1:
            lda #$0d


lf1b3:
            clc


lf1b4:
            rts


lf1b5:
            jmp lee13


lf1b8:
            jsr lf14e
            bcs lf1b4
            cmp #$00
            bne lf1b3
            lda l0297
            and #$60
            bne lf1b1
            beq lf1b8


lf1ca:
            pha                                 // Push A to stack.
            lda $9a                             // Load A with $9a.
            cmp #$03                            // Compare A to #03.
            bne lf1d5                           // Branch to lf1d5 if not equal.
            pla                                 // Pull A from the stack.
            jmp le716                           // Jump to le716.


lf1d5:
            bcc lf1db
            pla
            jmp leddd


lf1db:
            lsr
            pla
            sta $9e
            txa
            pha
            tya
            pha
            bcc lf208
            jsr lf80d
            bne lf1f8
            jsr lf864
            bcs lf1fd
            lda #$02
            ldy #$00
            sta ($b2),y
            iny
            sty $a6


lf1f8:
            lda $9e
            sta ($b2),y


lf1fc:
            clc


lf1fd:
            pla
            tay
            pla
            tax
            lda $9e
            bcc lf207
            lda #$00


lf207:
            rts


lf208:
            jsr lf017
            jmp lf1fc

.byte $20, $0f, $f3, $f0, $03, $4c, $01, $f7, $20, $1f, $f3, $a5, $ba, $f0, $16, $c9, $03, $f0, $12, $b0, $14, $c9, $02, $d0, $03, $4c, $4d, $f0, $a6, $b9, $e0, $60, $f0, $03, $4c, $0a, $f7, $85, $99, $18, $60, $aa, $20, $09, $ed, $a5, $b9, $10, $06, $20, $cc, $ed, $4c, $48, $f2, $20, $c7, $ed, $8a, $24, $90, $10, $e6, $4c, $07, $f7, $20, $0f, $f3, $f0, $03, $4c, $01, $f7, $20, $1f, $f3, $a5, $ba, $d0, $03, $4c, $0d, $f7, $c9, $03, $f0, $0f, $b0, $11, $c9, $02, $d0, $03, $4c, $e1, $ef, $a6, $b9, $e0, $60, $f0, $ea, $85, $9a, $18, $60, $aa, $20, $0c, $ed, $a5, $b9, $10, $05, $20, $be, $ed, $d0, $03, $20, $b9, $ed, $8a, $24, $90, $10, $e7, $4c, $07, $f7, $20, $14, $f3, $f0, $02, $18, $60, $20, $1f, $f3, $8a, $48, $a5, $ba, $f0, $50, $c9, $03, $f0, $4c, $b0, $47, $c9, $02, $d0, $1d, $68, $20, $f2, $f2, $20, $83, $f4, $20, $27, $fe, $a5, $f8, $f0, $01, $c8, $a5, $fa, $f0, $01, $c8, $a9, $00, $85, $f8, $85, $fa, $4c, $7d, $f4, $a5, $b9, $29, $0f, $f0, $23, $20, $d0, $f7, $a9, $00, $38, $20, $dd, $f1, $20, $64, $f8, $90, $04, $68, $a9, $00, $60, $a5, $b9, $c9, $62, $d0, $0b, $a9, $05, $20, $6a, $f7, $4c, $f1, $f2, $20, $42, $f6, $68, $aa, $c6, $98, $e4, $98, $f0, $14, $a4, $98, $b9, $59, $02, $9d, $59, $02, $b9, $63, $02, $9d, $63, $02, $b9, $6d, $02, $9d, $6d, $02, $18, $60, $a9, $00, $85, $90, $8a, $a6, $98, $ca, $30, $15, $dd, $59, $02, $d0, $f8, $60, $bd, $59, $02, $85, $b8, $bd, $63, $02, $85, $ba, $bd, $6d, $02, $85, $b9, $60, $a9, $00, $85, $98, $a2, $03, $e4, $9a, $b0, $03, $20, $fe, $ed, $e4, $99, $b0, $03, $20, $ef, $ed, $86, $9a, $a9, $00, $85, $99, $60, $a6, $b8, $d0, $03, $4c, $0a, $f7, $20, $0f, $f3, $d0, $03, $4c, $fe, $f6, $a6, $98, $e0, $0a, $90, $03, $4c, $fb, $f6, $e6, $98, $a5, $b8, $9d, $59, $02, $a5, $b9, $09, $60, $85, $b9, $9d, $6d, $02, $a5, $ba, $9d, $63, $02, $f0, $5a, $c9, $03, $f0, $56, $90, $05, $20, $d5, $f3, $90, $4f, $c9, $02, $d0, $03, $4c, $09, $f4, $20, $d0, $f7, $b0, $03, $4c, $13, $f7, $a5, $b9, $29, $0f, $d0, $1f, $20, $17, $f8, $b0, $36, $20, $af, $f5, $a5, $b7, $f0, $0a, $20, $ea, $f7, $90, $18, $f0, $28, $4c, $04, $f7, $20, $2c, $f7, $f0, $20, $90, $0c, $b0, $f4, $20, $38, $f8, $b0, $17, $a9, $04, $20, $6a, $f7, $a9, $bf, $a4, $b9, $c0, $60, $f0, $07, $a0, $00, $a9, $02, $91, $b2, $98, $85, $a6, $18, $60, $a5, $b9, $30, $fa, $a4, $b7, $f0, $f6, $a9, $00, $85, $90, $a5, $ba, $20, $0c, $ed, $a5, $b9, $09, $f0, $20, $b9, $ed, $a5, $90, $10, $05, $68, $68, $4c, $07, $f7, $a5, $b7, $f0, $0c, $a0, $00, $b1, $bb, $20, $dd, $ed, $c8, $c4, $b7, $d0, $f6, $4c, $54, $f6, $20, $83, $f4, $8c, $97, $02, $c4, $b7, $f0, $0a, $b1, $bb, $99, $93, $02, $c8, $c0, $04, $d0, $f2, $20, $4a, $ef, $8e, $98, $02, $ad, $93, $02, $29, $0f, $f0, $1c, $0a, $aa, $ad, $a6, $02, $d0, $09, $bc, $c1, $fe, $bd, $c0, $fe, $4c, $40, $f4, $bc, $eb, $e4, $bd, $ea, $e4, $8c, $96, $02, $8d, $95, $02, $ad, $95, $02, $0a, $20, $2e, $ff, $ad, $94, $02, $4a, $90, $09, $ad, $01, $dd, $0a, $b0, $03, $20, $0d, $f0, $ad, $9b, $02, $8d, $9c, $02, $ad, $9e, $02, $8d, $9d, $02, $20, $27, $fe, $a5, $f8, $d0, $05, $88, $84, $f8, $86, $f7, $a5, $fa, $d0, $05, $88, $84, $fa, $86, $f9, $38, $a9, $f0, $4c, $2d, $fe, $a9, $7f, $8d, $0d, $dd, $a9, $06, $8d, $03, $dd, $8d, $01, $dd, $a9, $04, $0d, $00, $dd, $8d, $00, $dd, $a0, $00, $8c, $a1, $02, $60

lf49e:
            stx $c3

.byte $84, $c4, $6c, $30, $03, $85, $93, $a9, $00, $85, $90, $a5, $ba, $d0, $03, $4c, $13, $f7, $c9, $03, $f0, $f9, $90, $7b, $a4, $b7, $d0, $03, $4c, $10, $f7, $a6, $b9, $20, $af, $f5, $a9, $60, $85, $b9, $20, $d5, $f3, $a5, $ba, $20, $09, $ed, $a5, $b9, $20, $c7, $ed, $20, $13, $ee, $85, $ae, $a5, $90, $4a, $4a, $b0, $50, $20, $13, $ee, $85, $af, $8a, $d0, $08, $a5, $c3, $85, $ae, $a5, $c4, $85, $af, $20, $d2, $f5, $a9, $fd, $25, $90, $85, $90, $20, $e1, $ff, $d0, $03, $4c, $33, $f6, $20, $13, $ee, $aa, $a5, $90, $4a, $4a, $b0, $e8, $8a, $a4, $93, $f0, $0c, $a0, $00, $d1, $ae, $f0, $08, $a9, $10, $20, $1c, $fe, $2c, $91, $ae, $e6, $ae, $d0, $02, $e6, $af, $24, $90, $50, $cb, $20, $ef, $ed, $20, $42, $f6, $90, $79, $4c, $04, $f7, $4a, $b0, $03, $4c, $13, $f7, $20, $d0, $f7, $b0, $03, $4c, $13, $f7, $20, $17, $f8, $b0, $68, $20, $af, $f5, $a5, $b7, $f0, $09, $20, $ea, $f7, $90, $0b, $f0, $5a, $b0, $da, $20, $2c, $f7, $f0, $53, $b0, $d3, $a5, $90, $29, $10, $38, $d0, $4a, $e0, $01, $f0, $11, $e0, $03, $d0, $dd, $a0, $01, $b1, $b2, $85, $c3, $c8, $b1, $b2, $85, $c4, $b0, $04, $a5, $b9, $d0, $ef, $a0, $03, $b1, $b2, $a0, $01, $f1, $b2, $aa, $a0, $04, $b1, $b2, $a0, $02, $f1, $b2, $a8, $18, $8a, $65, $c3, $85, $ae, $98, $65, $c4, $85, $af, $a5, $c3, $85, $c1, $a5, $c4, $85, $c2, $20, $d2, $f5, $20, $4a, $f8, $24, $18, $a6, $ae, $a4, $af, $60, $a5, $9d, $10, $1e, $a0, $0c, $20, $2f, $f1, $a5, $b7, $f0, $15, $a0, $17, $20, $2f, $f1, $a4, $b7, $f0, $0c, $a0, $00, $b1, $bb, $20, $d2, $ff, $c8, $c4, $b7, $d0, $f6, $60, $a0, $49, $a5, $93, $f0, $02, $a0, $59, $4c, $2b, $f1, $86, $ae, $84, $af, $aa, $b5, $00, $85, $c1, $b5, $01, $85, $c2, $6c, $32, $03, $a5, $ba, $d0, $03, $4c, $13, $f7, $c9, $03, $f0, $f9, $90, $5f, $a9, $61, $85, $b9, $a4, $b7, $d0, $03, $4c, $10, $f7, $20, $d5, $f3, $20, $8f, $f6, $a5, $ba, $20, $0c, $ed, $a5, $b9, $20, $b9, $ed, $a0, $00, $20, $8e, $fb, $a5, $ac, $20, $dd, $ed, $a5, $ad, $20, $dd, $ed, $20, $d1, $fc, $b0, $16, $b1, $ac, $20, $dd, $ed, $20, $e1, $ff, $d0, $07, $20, $42, $f6, $a9, $00, $38, $60, $20, $db, $fc, $d0, $e5, $20, $fe, $ed, $24, $b9, $30, $11, $a5, $ba, $20, $0c, $ed, $a5, $b9, $29, $ef, $09, $e0, $20, $b9, $ed, $20, $fe, $ed, $18, $60, $4a, $b0, $03, $4c, $13, $f7, $20, $d0, $f7, $90, $8d, $20, $38, $f8, $b0, $25, $20, $8f, $f6, $a2, $03, $a5, $b9, $29, $01, $d0, $02, $a2, $01, $8a, $20, $6a, $f7, $b0, $12, $20, $67, $f8, $b0, $0d, $a5, $b9, $29, $02, $f0, $06, $a9, $05, $20, $6a, $f7, $24, $18, $60, $a5, $9d, $10, $fb, $a0, $51, $20, $2f, $f1, $4c, $c1, $f5

lf69b:
            ldx #$00

.byte $e6, $a2, $d0, $06, $e6, $a1, $d0, $02, $e6, $a0, $38, $a5, $a2, $e9, $01, $a5, $a1, $e9, $1a, $a5, $a0, $e9, $4f, $90, $06, $86, $a0, $86, $a1, $86, $a2

lf6bc:
            lda ldc01                       // CIA #1 - port B, keyboard matrix and joystick 1

.byte $cd, $01, $dc, $d0, $f8, $aa, $30, $13, $a2, $bd, $8e, $00, $dc, $ae, $01, $dc, $ec, $01, $dc, $d0, $f8, $8d, $00, $dc, $e8, $d0, $02, $85, $91, $60, $78, $a5, $a2, $a6, $a1, $a4, $a0, $78, $85, $a2, $86, $a1, $84, $a0, $58, $60, $a5, $91, $c9, $7f, $d0, $07, $08, $20, $cc, $ff, $85, $c6, $28, $60, $a9, $01, $2c, $a9, $02, $2c, $a9, $03, $2c, $a9, $04, $2c, $a9, $05, $2c, $a9, $06, $2c, $a9, $07, $2c, $a9, $08, $2c, $a9, $09, $48, $20, $cc, $ff, $a0, $00, $24, $9d, $50, $0a, $20, $2f, $f1, $68, $48, $09, $30, $20, $d2, $ff, $68, $38, $60, $a5, $93, $48, $20, $41, $f8, $68, $85, $93, $b0, $32, $a0, $00, $b1, $b2, $c9, $05, $f0, $2a, $c9, $01, $f0, $08, $c9, $03, $f0, $04, $c9, $04, $d0, $e1, $aa, $24, $9d, $10, $17, $a0, $63, $20, $2f, $f1, $a0, $05, $b1, $b2, $20, $d2, $ff, $c8, $c0, $15, $d0, $f6, $a5, $a1, $20, $e0, $e4, $ea, $18, $88, $60, $85, $9e, $20, $d0, $f7, $90, $5e, $a5, $c2, $48, $a5, $c1, $48, $a5, $af, $48, $a5, $ae, $48, $a0, $bf, $a9, $20, $91, $b2, $88, $d0, $fb, $a5, $9e, $91, $b2, $c8, $a5, $c1, $91, $b2, $c8, $a5, $c2, $91, $b2, $c8, $a5, $ae, $91, $b2, $c8, $a5, $af, $91, $b2, $c8, $84, $9f, $a0, $00, $84, $9e, $a4, $9e, $c4, $b7, $f0, $0c, $b1, $bb, $a4, $9f, $91, $b2, $e6, $9e, $e6, $9f, $d0, $ee, $20, $d7, $f7, $a9, $69, $85, $ab, $20, $6b, $f8, $a8, $68, $85, $ae, $68, $85, $af, $68, $85, $c1, $68, $85, $c2, $98, $60

lf7d0:
            ldx $b2

.byte $a4, $b3, $c0, $02, $60

lf7d7:
            jsr lf7d0

.byte $8a, $85, $c1, $18, $69, $c0, $85, $ae, $98, $85, $c2, $69, $00, $85, $af, $60, $20, $2c, $f7, $b0, $1d, $a0, $05, $84, $9f, $a0, $00, $84, $9e, $c4, $b7, $f0, $10, $b1, $bb, $a4, $9f, $d1, $b2, $d0, $e7, $e6, $9e, $e6, $9f, $a4, $9e, $d0, $ec, $18, $60

lf80d:
            jsr lf7d0
            inc $a6
            ldy $a6
            cpy #$c0
            rts


lf817:
            jsr lf82e

.byte $f0, $1a, $a0, $1b, $20, $2f, $f1, $20, $d0, $f8, $20, $2e, $f8, $d0, $f8, $a0, $6a, $4c, $2f, $f1, $a9, $10, $24, $01, $d0, $02, $24, $01, $18, $60

lf838:
            jsr lf82e

.byte $f0, $f9, $a0, $2e, $d0, $dd

lf841:
            lda #$00
            sta $90
            sta $93
            jsr lf7d7
            jsr lf817
            bcs lf86e
            sei
            lda #$00
            sta $aa
            sta $b4
            sta $b0
            sta $9e
            sta $9f
            sta $9c
            lda #$90
            ldx #$0e
            bne lf875


lf864:
            jsr lf7d7
            lda #$14
            sta $ab
            jsr lf838


lf86e:
            bcs lf8dc
            sei
            lda #$82
            ldx #$08


lf875:
            ldy #$7f
            sty ldc0d                       // CIA #1 - interrupt control and status
            sta ldc0d                       // CIA #1 - interrupt control and status
            lda ldc0e                       // CIA #1 - timer A control
            ora #$19
            sta ldc0f                       // CIA #1 - timer B control
            and #$91
            sta l02a2
            jsr lf0a4
            lda ld011                       // screen control register #1, vertical scroll
            and #$ef
            sta ld011                       // screen control register #1, vertical scroll
            lda l0314                       // IRQ vector routine low byte
            sta l029f
            lda l0315                       // IRQ vector routine high byte
            sta l02a0
            jsr lfcbd
            lda #$02
            sta $be
            jsr lfb97
            lda $01
            and #$1f
            sta $01
            sta $c0
            ldx #$ff


lf8b5:
            ldy #$ff


lf8b7:
            dey
            bne lf8b7
            dex
            bne lf8b5
            cli


lf8be:
            lda l02a0
            cmp l0315                       // IRQ vector routine high byte
            clc
            beq lf8dc
            jsr lf8d0
            jsr lf6bc
            jmp lf8be


lf8d0:
            jsr lffe1                       // STOP
            clc
            bne lf8e1
            jsr lfc93
            sec
            pla
            pla


lf8dc:
            lda #$00
            sta l02a0


lf8e1:
            rts

.byte $86, $b1, $a5, $b0, $0a, $0a, $18, $65, $b0, $18, $65, $b1, $85, $b1, $a9, $00, $24, $b0, $30, $01, $2a, $06, $b1, $2a, $06, $b1, $2a, $aa, $ad, $06, $dc, $c9, $16, $90, $f9, $65, $b1, $8d, $04, $dc, $8a, $6d, $07, $dc, $8d, $05, $dc, $ad, $a2, $02, $8d, $0e, $dc, $8d, $a4, $02, $ad, $0d, $dc, $29, $10, $f0, $09, $a9, $f9, $48, $a9, $2a, $48, $4c, $43, $ff, $58, $60, $ae, $07, $dc, $a0, $ff, $98, $ed, $06, $dc, $ec, $07, $dc, $d0, $f2, $86, $b1, $aa, $8c, $06, $dc, $8c, $07, $dc, $a9, $19, $8d, $0f, $dc, $ad, $0d, $dc, $8d, $a3, $02, $98, $e5, $b1, $86, $b1, $4a, $66, $b1, $4a, $66, $b1, $a5, $b0, $18, $69, $3c, $c5, $b1, $b0, $4a, $a6, $9c, $f0, $03, $4c, $60, $fa, $a6, $a3, $30, $1b, $a2, $00, $69, $30, $65, $b0, $c5, $b1, $b0, $1c, $e8, $69, $26, $65, $b0, $c5, $b1, $b0, $17, $69, $2c, $65, $b0, $c5, $b1, $90, $03, $4c, $10, $fa, $a5, $b4, $f0, $1d, $85, $a8, $d0, $19, $e6, $a9, $b0, $02, $c6, $a9, $38, $e9, $13, $e5, $b1, $65, $92, $85, $92, $a5, $a4, $49, $01, $85, $a4, $f0, $2b, $86, $d7, $a5, $b4, $f0, $22, $ad, $a3, $02, $29, $01, $d0, $05, $ad, $a4, $02, $d0, $16, $a9, $00, $85, $a4, $8d, $a4, $02, $a5, $a3, $10, $30, $30, $bf, $a2, $a6, $20, $e2, $f8, $a5, $9b, $d0, $b9, $4c, $bc, $fe, $a5, $92, $f0, $07, $30, $03, $c6, $b0, $2c, $e6, $b0, $a9, $00, $85, $92, $e4, $d7, $d0, $0f, $8a, $d0, $a0, $a5, $a9, $30, $bd, $c9, $10, $90, $b9, $85, $96, $b0, $b5, $8a, $45, $9b, $85, $9b, $a5, $b4, $f0, $d2, $c6, $a3, $30, $c5, $46, $d7, $66, $bf, $a2, $da, $20, $e2, $f8, $4c, $bc, $fe, $a5, $96, $f0, $04, $a5, $b4, $f0, $07, $a5, $a3, $30, $03, $4c, $97, $f9, $46, $b1, $a9, $93, $38, $e5, $b1, $65, $b0, $0a, $aa, $20, $e2, $f8, $e6, $9c, $a5, $b4, $d0, $11, $a5, $96, $f0, $26, $85, $a8, $a9, $00, $85, $96, $a9, $81, $8d, $0d, $dc, $85, $b4, $a5, $96, $85, $b5, $f0, $09, $a9, $00, $85, $b4, $a9, $01, $8d, $0d, $dc, $a5, $bf, $85, $bd, $a5, $a8, $05, $a9, $85, $b6, $4c, $bc, $fe, $20, $97, $fb, $85, $9c, $a2, $da, $20, $e2, $f8, $a5, $be, $f0, $02, $85, $a7, $a9, $0f, $24, $aa, $10, $17, $a5, $b5, $d0, $0c, $a6, $be, $ca, $d0, $0b, $a9, $08, $20, $1c, $fe, $d0, $04, $a9, $00, $85, $aa, $4c, $bc, $fe, $70, $31, $d0, $18, $a5, $b5, $d0, $f5, $a5, $b6, $d0, $f1, $a5, $a7, $4a, $a5, $bd, $30, $03, $90, $18, $18, $b0, $15, $29, $0f, $85, $aa, $c6, $aa, $d0, $dd, $a9, $40, $85, $aa, $20, $8e, $fb, $a9, $00, $85, $ab, $f0, $d0, $a9, $80, $85, $aa, $d0, $ca, $a5, $b5, $f0, $0a, $a9, $04, $20, $1c, $fe, $a9, $00, $4c, $4a, $fb, $20, $d1, $fc, $90, $03, $4c, $48, $fb, $a6, $a7, $ca, $f0, $2d, $a5, $93, $f0, $0c, $a0, $00, $a5, $bd, $d1, $ac, $f0, $04, $a9, $01, $85, $b6, $a5, $b6, $f0, $4b, $a2, $3d, $e4, $9e, $90, $3e, $a6, $9e, $a5, $ad, $9d, $01, $01, $a5, $ac, $9d, $00, $01, $e8, $e8, $86, $9e, $4c, $3a, $fb, $a6, $9f, $e4, $9e, $f0, $35, $a5, $ac, $dd, $00, $01, $d0, $2e, $a5, $ad, $dd, $01, $01, $d0, $27, $e6, $9f, $e6, $9f, $a5, $93, $f0, $0b, $a5, $bd, $a0, $00, $d1, $ac, $f0, $17, $c8, $84, $b6, $a5, $b6, $f0, $07, $a9, $10, $20, $1c, $fe, $d0, $09, $a5, $93, $d0, $05, $a8, $a5, $bd, $91, $ac, $20, $db, $fc, $d0, $43, $a9, $80, $85, $aa, $78, $a2, $01, $8e, $0d, $dc, $ae, $0d, $dc, $a6, $be, $ca, $30, $02, $86, $be, $c6, $a7, $f0, $08, $a5, $9e, $d0, $27, $85, $be, $f0, $23, $20, $93, $fc, $20, $8e, $fb, $a0, $00, $84, $ab, $b1, $ac, $45, $ab, $85, $ab, $20, $db, $fc, $20, $d1, $fc, $90, $f2, $a5, $ab, $45, $bd, $f0, $05, $a9, $20, $20, $1c, $fe, $4c, $bc, $fe, $a5, $c2, $85, $ad, $a5, $c1, $85, $ac, $60

lfb97:
            lda #$08
            sta $a3
            lda #$00
            sta $a4
            sta $a8
            sta $9b
            sta $a9
            rts

.byte $a5, $bd, $4a, $a9, $60, $90, $02, $a9, $b0, $a2, $00, $8d, $06, $dc, $8e, $07, $dc, $ad, $0d, $dc, $a9, $19, $8d, $0f, $dc, $a5, $01, $49, $08, $85, $01, $29, $08, $60, $38, $66, $b6, $30, $3c, $a5, $a8, $d0, $12, $a9, $10, $a2, $01, $20, $b1, $fb, $d0, $2f, $e6, $a8, $a5, $b6, $10, $29, $4c, $57, $fc, $a5, $a9, $d0, $09, $20, $ad, $fb, $d0, $1d, $e6, $a9, $d0, $19, $20, $a6, $fb, $d0, $14, $a5, $a4, $49, $01, $85, $a4, $f0, $0f, $a5, $bd, $49, $01, $85, $bd, $29, $01, $45, $9b, $85, $9b, $4c, $bc, $fe, $46, $bd, $c6, $a3, $a5, $a3, $f0, $3a, $10, $f3, $20, $97, $fb, $58, $a5, $a5, $f0, $12, $a2, $00, $86, $d7, $c6, $a5, $a6, $be, $e0, $02, $d0, $02, $09, $80, $85, $bd, $d0, $d9, $20, $d1, $fc, $90, $0a, $d0, $91, $e6, $ad, $a5, $d7, $85, $bd, $b0, $ca, $a0, $00, $b1, $ac, $85, $bd, $45, $d7, $85, $d7, $20, $db, $fc, $d0, $bb, $a5, $9b, $49, $01, $85, $bd, $4c, $bc, $fe, $c6, $be, $d0, $03, $20, $ca, $fc, $a9, $50, $85, $a7, $a2, $08, $78, $20, $bd, $fc, $d0, $ea, $a9, $78, $20, $af, $fb, $d0, $e3, $c6, $a7, $d0, $df, $20, $97, $fb, $c6, $ab, $10, $d8, $a2, $0a, $20, $bd, $fc, $58, $e6, $ab, $a5, $be, $f0, $30, $20, $8e, $fb, $a2, $09, $86, $a5, $86, $b6, $d0, $83

lfc93:
            php
            sei
            lda ld011                       // screen control register #1, vertical scroll
            ora #$10
            sta ld011                       // screen control register #1, vertical scroll
            jsr lfcca
            lda #$7f
            sta ldc0d                       // CIA #1 - interrupt control and status
            jsr lfddd
            lda l02a0
            beq lfcb6
            sta l0315                       // IRQ vector routine high byte
            lda l029f
            sta l0314                       // IRQ vector routine low byte


lfcb6:
            plp
            rts

.byte $20, $93, $fc, $f0, $97

lfcbd:
            lda lfd93,x
            sta l0314                       // IRQ vector routine low byte
            lda lfd94,x
            sta l0315                       // IRQ vector routine high byte
            rts


lfcca:
            lda $01
            ora #$20
            sta $01
            rts

.byte $38, $a5, $ac, $e5, $ae, $a5, $ad, $e5, $af, $60, $e6, $ac, $d0, $02, $e6, $ad, $60, $a2, $ff, $78, $9a, $d8, $20, $02, $fd, $d0, $03, $6c, $00, $80, $8e, $16, $d0, $20, $a3, $fd, $20, $50, $fd, $20, $15, $fd, $20, $5b, $ff, $58, $6c, $00, $a0, $a2, $05, $bd, $0f, $fd, $dd, $03, $80, $d0, $03, $ca, $d0, $f5, $60, $c3, $c2, $cd, $38, $30, $a2, $30, $a0, $fd, $18, $86, $c3, $84, $c4, $a0, $1f, $b9, $14, $03, $b0, $02, $b1, $c3, $91, $c3, $99, $14, $03, $88, $10, $f1, $60, $31, $ea, $66, $fe, $47, $fe, $4a, $f3, $91, $f2, $0e, $f2, $50, $f2, $33, $f3, $57, $f1, $ca, $f1, $ed, $f6, $3e, $f1, $2f, $f3, $66, $fe, $a5, $f4, $ed, $f5, $a9, $00, $a8, $99, $02, $00, $99, $00, $02, $99, $00, $03, $c8, $d0, $f4, $a2, $3c, $a0, $03, $86, $b2, $84, $b3, $a8, $a9, $03, $85, $c2, $e6, $c2, $b1, $c1, $aa, $a9, $55, $91, $c1, $d1, $c1, $d0, $0f, $2a, $91, $c1, $d1, $c1, $d0, $08, $8a, $91, $c1, $c8, $d0, $e8, $f0, $e4, $98, $aa, $a4, $c2, $18, $20, $2d, $fe, $a9, $08, $8d

lfd93:

.byte $82

lfd94:

.byte $02, $a9, $04, $8d, $88, $02, $60, $6a, $fc, $cd, $fb, $31, $ea, $2c, $f9, $a9, $7f, $8d, $0d, $dc, $8d, $0d, $dd, $8d, $00, $dc, $a9, $08, $8d, $0e, $dc, $8d, $0e, $dd, $8d, $0f, $dc, $8d, $0f, $dd, $a2, $00, $8e, $03, $dc, $8e, $03, $dd, $8e, $18, $d4, $ca, $8e, $02, $dc, $a9, $07, $8d, $00, $dd, $a9, $3f, $8d, $02, $dd, $a9, $e7, $85, $01, $a9, $2f, $85, $00

lfddd:
            lda l02a6
            beq lfdec
            lda #$25
            sta ldc04                       // CIA #1 - timer A low byte
            lda #$40
            jmp lfdf3


lfdec:
            lda #$95
            sta ldc04                       // CIA #1 - timer A low byte
            lda #$42


lfdf3:
            sta ldc05                       // CIA #1 - timer A high byte
            jmp lff6e

.byte $85, $b7, $86, $bb, $84, $bc, $60, $85, $b8, $86, $ba, $84, $b9, $60, $a5, $ba, $c9, $02, $d0, $0d, $ad, $97, $02, $48, $a9, $00, $8d, $97, $02, $68, $60, $85, $9d, $a5, $90

lfe1c:
            ora $90
            sta $90
            rts

.byte $8d, $85, $02, $60, $90, $06, $ae, $83, $02, $ac, $84, $02, $8e, $83, $02, $8c, $84, $02, $60, $90, $06, $ae, $81, $02, $ac, $82, $02, $8e, $81, $02, $8c, $82, $02, $60, $78, $6c, $18, $03, $48, $8a, $48, $98, $48, $a9, $7f, $8d, $0d, $dd, $ac, $0d, $dd, $30, $1c, $20, $02, $fd, $d0, $03, $6c, $02, $80, $20, $bc, $f6, $20, $e1, $ff, $d0, $0c, $20, $15, $fd, $20, $a3, $fd, $20, $18, $e5, $6c, $02, $a0, $98, $2d, $a1, $02, $aa, $29, $01, $f0, $28, $ad, $00, $dd, $29, $fb, $05, $b5, $8d, $00, $dd, $ad, $a1, $02, $8d, $0d, $dd, $8a, $29, $12, $f0, $0d, $29, $02, $f0, $06, $20, $d6, $fe, $4c, $9d, $fe, $20, $07, $ff, $20, $bb, $ee, $4c, $b6, $fe, $8a, $29, $02, $f0, $06, $20, $d6, $fe, $4c, $b6, $fe, $8a, $29, $10, $f0, $03, $20, $07, $ff, $ad, $a1, $02, $8d, $0d, $dd, $68, $a8, $68, $aa, $68, $40, $c1, $27, $3e, $1a, $c5, $11, $74, $0e, $ed, $0c, $45, $06, $f0, $02, $46, $01, $b8, $00, $71, $00, $ad, $01, $dd, $29, $01, $85, $a7, $ad, $06, $dd, $e9, $1c, $6d, $99, $02, $8d, $06, $dd, $ad, $07, $dd, $6d, $9a, $02, $8d, $07, $dd, $a9, $11, $8d, $0f, $dd, $ad, $a1, $02, $8d, $0d, $dd, $a9, $ff, $8d, $06, $dd, $8d, $07, $dd, $4c, $59, $ef, $ad, $95, $02, $8d, $06, $dd, $ad, $96, $02, $8d, $07, $dd, $a9, $11, $8d, $0f, $dd, $a9, $12, $4d, $a1, $02, $8d, $a1, $02, $a9, $ff, $8d, $06, $dd, $8d, $07, $dd, $ae, $98, $02, $86, $a8, $60, $aa, $ad, $96, $02, $2a, $a8, $8a, $69, $c8, $8d, $99, $02, $98, $69, $00, $8d, $9a, $02, $60, $ea, $ea, $08, $68, $29, $ef, $48, $48, $8a, $48, $98, $48, $ba, $bd, $04, $01, $29, $10, $f0, $03, $6c, $16, $03, $6c, $14, $03, $20, $18, $e5, $ad, $12, $d0, $d0, $fb, $ad, $19, $d0, $29, $01, $8d, $a6, $02, $4c, $dd, $fd

lff6e:
            lda #$81
            sta ldc0d                       // CIA #1 - interrupt control and status
            lda ldc0e                       // CIA #1 - timer A control
            and #$80
            ora #$11
            sta ldc0e                       // CIA #1 - timer A control
            jmp lee8e

.byte $03, $4c, $5b, $ff, $4c, $a3, $fd, $4c, $50, $fd, $4c, $15, $fd, $4c, $1a, $fd, $4c, $18, $fe, $4c, $b9, $ed, $4c, $c7, $ed, $4c, $25, $fe, $4c, $34, $fe, $4c, $87, $ea, $4c, $21, $fe, $4c, $13, $ee, $4c, $dd, $ed, $4c, $ef, $ed, $4c, $fe, $ed, $4c, $0c, $ed, $4c, $09, $ed, $4c, $07, $fe, $4c, $00, $fe, $4c, $f9, $fd, $6c, $1a, $03, $6c, $1c, $03, $6c, $1e, $03, $6c, $20, $03, $6c, $22, $03

lffcf:
            jmp (l0324)                     // Jump to f157


lffd2:
            jmp (l0326)
            jmp lf49e

.byte $4c, $dd, $f5, $4c, $e4, $f6, $4c, $dd, $f6

lffe1:
            jmp (l0328)
            jmp (l032a)
            jmp (l032c)


lffea:
            jmp lf69b

.byte $4c, $05, $e5, $4c, $0a, $e5, $4c, $00, $e5, $52, $52, $42, $59, $43, $fe, $e2, $fc, $48, $ff