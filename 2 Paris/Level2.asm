ProgrammableLogicArray = $01
IRQExecAddr1 = $0314
IRQExecAddr2 = $0315
Sprite0_X = $d000
Sprite0_Y = $d001
Sprite1_X = $d002
Sprite1_Y = $d003
Sprite2_X = $d004
Sprite2_Y = $d005
Sprite3_X = $d006
Sprite3_Y = $d007
Sprite4_X = $d008
Sprite4_Y = $d009
Sprite5_X = $d00a
Sprite5_Y = $d00b
Sprite6_X = $d00c
Sprite6_Y = $d00d
Sprite7_X = $d00e
Sprite7_Y = $d00f
Sprite_upper_X = $d010
ScreenControlRegister = $d011
CurrentRasterLine = $d012
SpriteEnableRegister = $d015
ScreenControl = $d016
SpriteDoubleHeight = $d017
VIC2MemSetup = $d018
IRQStatusRegister = $d019
IRQControlRegister = $d01a
SpritePriority = $d01b
SpriteMulticolor = $d01c
SpriteDoubleWidth = $d01d
SpriteSpriteCollision = $d01e
SpriteBackgroundCollision = $d01f
BorderColour = $d020
BackgroundColour = $d021
ExtraBackgroundColor1 = $d022
ExtraBackgroundColor2 = $d023
ExtraBackgroundColor3 = $d024
ExtraSpriteColor1 = $d025
ExtraSpriteColor2 = $d026
Sprite0Colour = $d027
Sprite1Colour = $d028
Sprite2Colour = $d029
Sprite3Colour = $d02a
Sprite4Colour = $d02b
Sprite5Colour = $d02c
Sprite6Colour = $d02d
Sprite7Colour = $d02e
Voice1Frequency1 = $d400
Voice1Frequency2 = $d401
Voice1PulseWidth1 = $d402
Voice1PulseWidth2 = $d403
Voice1Control = $d404
Voice1AttackDecayLength = $d405
Voice1SustainVolRelease = $d406
Voice2Frequency1 = $d407
Voice2Frequency2 = $d408
Voice2PulseWidth1 = $d409
Voice2PulseWidth2 = $d40a
Voice2Control = $d40b
Voice2AttackDecayLength = $d40c
Voice2SustainVolRelease = $d40d
Voice3Frequency1 = $d40e
Voice3Frequency2 = $d40f
Voice3PulseWidth1 = $d410
Voice3PulseWidth2 = $d411
Voice3Control = $d412
Voice3AttackDecayLength = $d413
Voice3SustainVolRelease = $d414
FilterCutOff1 = $d415
FilterCutOff2 = $d416
FilterControl = $d417
KeyJoy2 = $dc00
KeyJoy1 = $dc01
KeyJoy1_DataDirection = $dc02
CIA1PortBDataDirection = $dc03
CIA1IRQControlStatus = $dc0d
TimerAControl = $dc0e
KeyJoy2_DataDirection = $dd02
CIA2PortBDataDirection = $dd03
CIA2IRQControlStatus = $dd0d
CHRIN = $ffcf
CHROUT = $ffd2
GETIN = $ffe4

; Game related variables
MayDayLandLocation = $D3

CarCollision = $02fd
MaydayLanded = $02fe                ;#00 continue circling / #01 Landed

EndGameFlag =   $0313
CarSpeed =    $0340
RegisterCollision = $0346

MaydayLoopCounter = $034f

CarFacingDirection = $03a0 ;00 N / 01 NE / 02 E / 03 SE / 04 S / 05 SW / 06 W / 07 NW

DamageCount = $03a1

ForwardReverse = $03a4   ;#00 Forward / #08 Reverse

ScrCounterDigit100 = $04f3
ScrCounterDigit10 = $04f4
ScrCounterDigit1 = $04f5

MaydayXMap =    $6900
MaydayYMap =    $6980


* = $0000
            .byte $2F,$34,$00,$AA,$B1,$91,$B3,$22,$22,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$18,$08,$19,$16,$00,$0A,$76,$A3,$00,$00,$00,$00
            .byte $00,$00,$40,$A3,$B3,$BD,$00,$00,$00,$00,$00,$01,$08,$5A,$B4,$C4
            .byte $60,$C4,$60,$00,$A0,$00,$00,$00,$A0,$C4,$07,$00,$00,$00,$08,$00
            .byte $00,$00,$08,$00,$00,$00,$00,$24,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$03,$4C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$8C,$00,$00,$08,$18,$00,$00,$00,$8C,$81,$60,$00,$00,$00,$00
            .byte $00,$80,$A3,$E6,$7A,$D0,$02,$E6,$7B,$AD,$0B,$08,$C9,$3A,$B0,$0A
            .byte $C9,$20,$F0,$EF,$38,$E9,$30,$38,$E9,$D0,$60,$80,$4F,$C7,$52,$58
            .byte $00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$80,$00,$00
            .byte $00,$00,$4E,$00,$00,$00,$09,$00,$13,$00,$00,$00,$00,$00,$00,$FC
            .byte $00,$00,$3C,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$A0,$30,$FD,$40,$00,$00,$00,$06,$00,$40,$FF,$0B,$20,$00
            .byte $00,$F0,$04,$00,$00,$27,$06,$0A,$00,$84,$84,$84,$84,$84,$84,$84
            .byte $85,$85,$85,$85,$85,$85,$86,$86,$86,$86,$86,$86,$86,$87,$87,$87
            .byte $87,$87,$87,$F0,$D8,$00,$00,$E7,$07,$00,$20,$08,$00,$08,$E6,$07
            .byte $78,$A9,$34,$85,$01,$A0,$00,$A9,$5A,$85,$AE,$A9,$B4,$85,$AF,$A9
            .byte $00,$85,$AC,$85,$AD,$A5,$AC,$D0,$02,$C6,$AD,$C6,$AC,$A5,$AE,$D0
            .byte $02,$C6,$AF,$C6,$AE,$B1,$AE,$91,$AC,$A5,$AE,$C9,$BE,$D0,$E6,$A5
            .byte $AF,$C9,$08,$D0,$E0,$A9,$00,$85,$AE,$A9,$10,$85,$AF,$B1,$AC,$C9
            .byte $BF,$D0,$12,$20,$78,$01,$B1,$AC,$AA,$A9,$00,$91,$AE,$20,$7F,$01
            .byte $CA,$D0,$F8,$F0,$16,$C9,$CF,$D0,$0D,$20,$78,$01,$B1,$AC,$AA,$20
            .byte $78,$01,$B1,$AC,$D0,$E5,$91,$AE,$20,$7F,$01,$20,$78,$01,$D0,$CD
            .byte $A9,$37,$85,$01,$58,$4C,$B0,$43,$E6,$AC,$D0,$02,$E6,$AD,$60,$E6
            .byte $AE,$D0,$02,$E6,$AF,$60,$78,$A9,$0A,$85,$FB,$A9,$19,$85,$FC,$A9
            .byte $00,$8D,$18,$D4,$A0,$00,$B1,$FB,$85,$FD,$C8,$B1,$FB,$85,$FE,$C8
            .byte $18,$D8,$A5,$FB,$65,$FD,$85,$02,$A5,$FC,$65,$FE,$85,$03,$A2,$08
            .byte $B1,$FB,$2A,$48,$B0,$06,$20,$80,$10,$4C,$3C,$10,$20,$6B,$10,$CF
            .byte $03,$EA,$D8,$38,$A5,$FB,$E5,$02,$A5,$FC,$E5,$03,$B0,$1B,$20,$8B
            .byte $10,$68,$CA,$E0,$00,$D0,$0D,$A9,$FF,$C5,$FB,$D0,$02,$E6,$FC,$E6
            .byte $FB,$4C,$28,$10,$EA,$EA,$4C,$2C,$10,$A9,$00,$8D,$18,$D4,$68,$58
            .byte $60,$A9,$0F,$8D,$18,$D4,$CF,$0F,$EA,$60,$A9,$00,$8D,$18,$6D,$01
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$08,$00,$A0,$00,$0E,$0E,$04,$0A,$00,$04,$0A,$00,$00,$48
            .byte $EB,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $8B,$E3,$83,$A4,$7C,$A5,$1A,$A7,$E4,$A7,$86,$AE,$00,$00,$00,$00
            .byte $4C,$48,$B2,$00,$31,$EA,$66,$FE,$47,$FE,$4A,$F3,$91,$F2,$0E,$F2
            .byte $50,$F2,$33,$F3,$57,$F1,$CA,$F1,$ED,$F6,$3E,$F1,$2F,$F3,$66,$FE
            .byte $A5,$F4,$ED,$F5,$A9,$00,$85,$A7,$A4,$FB,$F0,$0C,$06,$FA,$2A,$26
            .byte $A7,$C6,$FB,$CA,$D0,$F2,$A8,$60,$48,$B1,$FE,$85,$FA,$A9,$08,$85
            .byte $FB,$68,$A4,$FE,$D0,$02,$C6,$FF,$C6,$FE,$C0,$E7,$D0,$DE,$A4,$FF
            .byte $C0,$07,$D0,$D8,$A9,$37,$85,$01,$58,$4C,$13,$08,$A4,$A8,$F0,$22
            .byte $A5,$F7,$38,$E5,$A8,$B0,$03,$C6,$F8,$38,$85,$F7,$A5,$FC,$E5,$A8
            .byte $B0,$02,$C6,$FD,$85,$FC,$B1,$F7,$88,$91,$FC,$98,$D0,$F8,$C4,$A9
            .byte $F0,$0A,$B1,$F7,$C6,$FD,$C6,$F8,$C6,$A9,$10,$EC,$E6,$01,$CE,$20
            .byte $D0,$C6,$01,$60,$00,$11,$08,$C1,$07,$9E,$32,$30,$36,$37,$20,$4D
            .byte $41,$47,$49,$43,$00,$00,$00,$EC,$09,$15,$1E,$04,$1B,$01,$70,$EA
            .byte $A2,$00,$BD,$38,$08,$9D,$0F,$1C,$E8,$D0,$F7,$A2,$FF,$9A,$4C,$00
            .byte $01,$81,$78,$34,$A1,$B8,$81,$A9,$5A,$23,$B5,$B4,$34,$2D,$50,$AC
            .byte $85,$AD,$A5,$52,$8A,$C6,$AD,$C6,$75,$0B,$85,$C6,$AF,$C6,$AE,$B1
            .byte $AE,$91,$AC,$A5,$AE,$C9,$BE,$D0,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2A,$2A,$2A,$2A
            .byte $20,$03,$0F,$0D,$0D,$0F,$04,$0F,$12,$05,$20,$36,$34,$20,$02,$01
            .byte $13,$09,$03,$20,$16,$32,$20,$2A,$2A,$2A,$2A,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$36,$34,$0B,$20,$12,$01,$0D
            .byte $20,$13,$19,$13,$14,$05,$0D,$20,$20,$33,$38,$39,$31,$31,$20,$02
            .byte $01,$13,$09,$03,$20,$02,$19,$14,$05,$13,$20,$06,$12,$05,$05,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$12,$05,$01,$04,$19,$2E,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$00,$11,$08,$C1,$07,$9E,$32,$30
            .byte $36,$37,$20,$4D,$41,$47,$49,$43,$00,$00,$00,$EC,$09,$15,$1E,$04
            .byte $00,$11,$08,$C1,$07,$9E,$32,$30,$36,$37,$20,$4D,$41,$47,$49,$43
            .byte $00,$00,$00,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$A2,$00,$BD,$38,$08,$9D,$00,$01,$E8
            .byte $D0,$F7,$A2,$FF,$9A,$4C,$00,$01,$78,$A9,$34,$85,$01,$A0,$00,$A9
            .byte $5A,$85,$AE,$A9,$B4,$85,$AF,$A9,$00,$85,$AC,$85,$AD,$A5,$AC,$D0
            .byte $02,$C6,$AD,$C6,$AC,$A5,$AE,$D0,$02,$C6,$AF,$C6,$AE,$B1,$AE,$91
            .byte $AC,$A5,$AE,$C9,$BE,$D0,$E6,$A5,$AF,$C9,$08,$D0,$E0,$A9,$00,$85
            .byte $AE,$A9,$10,$85,$AF,$B1,$AC,$C9,$BF,$D0,$12,$20,$78,$01,$B1,$AC
            .byte $AA,$A9,$00,$91,$AE,$20,$7F,$01,$CA,$D0,$F8,$F0,$16,$C9,$CF,$D0
            .byte $0D,$20,$78,$01,$B1,$AC,$AA,$20,$78,$01,$B1,$AC,$D0,$E5,$91,$AE
            .byte $20,$7F,$01,$20,$78,$01,$D0,$CD,$A9,$37,$85,$01,$58,$4C,$B0,$43
            .byte $E6,$AC,$D0,$02,$E6,$AD,$60,$E6,$AE,$D0,$02,$E6,$AF,$60,$78,$A9
            .byte $0A,$85,$FB,$A9,$19,$85,$FC,$A9,$00,$8D,$18,$D4,$A0,$00,$B1,$FB
            .byte $85,$FD,$C8,$B1,$FB,$85,$FE,$C8,$18,$D8,$A5,$FB,$65,$FD,$85,$02
            .byte $A5,$FC,$65,$FE,$85,$03,$A2,$08,$B1,$FB,$2A,$48,$B0,$06,$20,$80
            .byte $10,$4C,$3C,$10,$20,$6B,$10,$CF,$03,$EA,$D8,$38,$A5,$FB,$E5,$02
            .byte $A5,$FC,$E5,$03,$B0,$1B,$20,$8B,$10,$68,$CA,$E0,$00,$D0,$0D,$A9
            .byte $FF,$C5,$FB,$D0,$02,$E6,$FC,$E6,$FB,$4C,$28,$10,$EA,$EA,$4C,$2C
            .byte $10,$A9,$00,$8D,$18,$D4,$68,$58,$60,$A9,$0F,$8D,$18,$D4,$CF,$0F
            .byte $EA,$60,$A9,$00,$8D,$18,$D4,$20,$8B,$10,$60,$EA,$60,$CF,$03,$EA
            .byte $60,$EA,$94,$01,$44,$32,$20,$9B,$01,$AD,$66,$B6,$B0,$57,$71,$89
            .byte $2A,$FD,$4C,$54,$73,$B8,$CE,$41,$3F,$00,$8F,$F0,$1F,$E0,$1F,$FC
            .byte $07,$F8,$07,$FE,$03,$FE,$84,$EA,$15,$E8,$67,$B8,$39,$8E,$F5,$1C
            .byte $E2,$1F,$E0,$E3,$1E,$E1,$1E,$E7,$19,$C6,$E2,$79,$8F,$E1,$F8,$DE
            .byte $66,$31,$CC,$73,$0E,$E3,$FC,$67,$1D,$E1,$3E,$63,$C1,$FC,$77,$19
            .byte $C7,$71,$CE,$0F,$83,$D8,$47,$1D,$C3,$BC,$0F,$A1,$CC,$33,$C7,$78
            .byte $CE,$07,$D0,$EE,$33,$8E,$E3,$3C,$9F,$47,$31,$9E,$73,$C6,$78,$1F
            .byte $03,$9C,$67,$8E,$F1,$9E,$07,$81,$D8,$CF,$01,$CF,$19,$C6,$78,$1F
            .byte $06,$E3,$1E,$B3,$CC,$78,$0F,$C0,$38,$C7,$84,$79,$06,$1F,$E0,$38
            .byte $C3,$8E,$3C,$70,$0F,$38,$F1,$C1,$C3,$87,$BC,$00,$0E,$33,$9E,$3C
            .byte $71,$F1,$E6,$18,$E3,$8E,$0C,$38,$E3,$88,$00,$1C,$71,$E1,$81,$E7
            .byte $CF,$01,$CF,$18,$00,$1C,$73,$C0,$0F,$1E,$78,$C0,$63,$89,$CE,$0C
            .byte $38,$73,$F0,$43,$00,$F1,$9C,$40,$20,$F7,$87,$98,$61,$9C,$21,$DC
            .byte $33,$8C,$73,$08,$C3,$38,$E7,$09,$DE,$33,$CE,$7B,$98,$66,$19,$9C
            .byte $C6,$0D,$82,$77,$33,$C8,$8E,$61,$19,$CC,$73,$36,$09,$CE,$73,$D8
            .byte $86,$73,$19,$98,$CC,$CC,$A2,$77,$33,$99,$88,$CC,$4E,$67,$31,$99
            .byte $B4,$4E,$F3,$34,$CC,$06,$73,$13,$C2,$66,$13,$71,$BB,$D9,$86,$E6
            .byte $67,$39,$86,$62,$18,$80,$DC,$A7,$79,$98,$CC,$E6,$73,$31,$19,$CC
            .byte $C6,$37,$53,$B9,$D8,$66,$39,$80,$60,$08,$00,$13,$28,$57,$20,$80
            .byte $BF,$28,$02,$00,$14,$90,$56,$8A,$24,$CB,$6E,$F4,$A4,$45,$12,$94
            .byte $D4,$90,$A4,$84,$14,$D2,$11,$56,$D0,$92,$E5,$4A,$B6,$4C,$4A,$53
            .byte $48,$4A,$96,$D0,$10,$92,$5A,$54,$AD,$90,$80,$00,$49,$68,$29,$4A
            .byte $13,$49,$02,$02,$94,$62,$08,$4A,$90,$00,$52,$9A,$92,$10,$94,$00
            .byte $04,$09,$10,$84,$11,$E4,$06,$81,$FF,$BC,$0F,$FC,$19,$F8,$07,$FF
            .byte $E0,$CF,$01,$CF,$C1,$9F,$98,$3C,$77,$06,$7C,$03,$E6,$3F,$E6,$1D
            .byte $E3,$1E,$F1,$DE,$71,$8F,$10,$FF,$87,$F9,$C4,$79,$87,$78,$0F,$B8
            .byte $0E,$63,$BC,$07,$F8,$0E,$63,$BC,$4F,$31,$4E,$61,$DE,$33,$DC,$27
            .byte $88,$FE,$1B,$D8,$5F,$03,$F8,$FF,$82,$F8,$1F,$83,$FC,$17,$C0,$7F
            .byte $0F,$FC,$37,$C0,$FE,$1D,$F8,$5F,$01,$F0,$FF,$80,$F0,$3F,$07,$F8
            .byte $2F,$00,$F8,$1F,$F0,$FF,$05,$F0,$7F,$E1,$FE,$0F,$C1,$FE,$17,$E0
            .byte $FC,$3F,$C2,$BC,$07,$87,$FC,$1B,$E1,$FE,$0F,$F0,$7F,$83,$F8,$3E
            .byte $03,$E0,$FE,$1F,$87,$F8,$38,$67,$83,$DE,$1E,$0F,$F0,$7F,$C1,$F0
            .byte $7F,$03,$F8,$1F,$1F,$81,$FE,$0E,$0F,$81,$FE,$00,$C7,$C0,$FF,$80
            .byte $78,$FC,$1F,$FC,$07,$FF,$81,$E1,$60,$FF,$C0,$FC,$10,$7F,$E0,$3F
            .byte $80,$3F,$C0,$0F,$FC,$07,$FC,$00,$FF,$80,$FF,$00,$0F,$C0,$7F,$80
            .byte $63,$E0,$7F,$80,$3C,$E0,$7F,$C0,$00,$F8,$0F,$F0,$0F,$8F,$03,$FC
            .byte $03,$FF,$01,$FC,$01,$FF,$03,$FE,$01,$FE,$01,$FF,$80,$7F,$C0,$7F
            .byte $F0,$07,$F8,$0F,$F8,$00,$FC,$0F,$FC,$00,$7E,$07,$FC,$00,$3F,$01
            .byte $FF,$80,$07,$F0,$1F,$F8,$00,$3F,$03,$FC,$00,$0F,$C1,$FF,$80,$01
            .byte $F0,$7F,$F0,$00,$1F,$86,$67,$E0,$00,$1F,$1F,$03,$E0,$00,$07,$02
            .byte $00,$E0,$BF,$03,$06,$BF,$19,$E0,$BF,$05,$18,$BF,$54,$08,$BF,$22
            .byte $04,$76,$B6,$16,$E3,$69,$48,$4F,$5B,$0C,$C8,$30,$AA,$FE,$80,$0F
            .byte $FB,$84,$33,$8C,$FC,$00,$3F,$C0,$7F,$80,$FF,$FC,$03,$FC,$C7,$FC
            .byte $C3,$BC,$77,$80,$7B,$C3,$7C,$07,$09,$E7,$E1,$3E,$03,$E0,$7E,$1F
            .byte $C3,$E2,$3C,$03,$E0,$3E,$0F,$E0,$FC,$0F,$C1,$FC,$3F,$C3,$F0,$7C
            .byte $1F,$C3,$E0,$7C,$07,$C2,$F8,$7F,$87,$C0,$7C,$39,$F0,$FC,$1F,$A1
            .byte $E0,$FE,$07,$C1,$F0,$FD,$0F,$07,$F0,$7C,$0F,$07,$F0,$7C,$07,$E0
            .byte $F8,$1F,$0F,$D0,$F8,$7F,$87,$C0,$F8,$7C,$0F,$8F,$F0,$F8,$0F,$0F
            .byte $40,$F8,$3F,$C3,$E0,$1E,$0F,$40,$F8,$7F,$87,$80,$78,$7A,$07,$87
            .byte $F8,$7C,$07,$C3,$E8,$1F,$0F,$F8,$7C,$03,$F0,$7D,$07,$C3,$FC,$1E
            .byte $03,$FC,$3E,$03,$C3,$FC,$1F,$81,$E7,$07,$C8,$3C,$31,$F0,$1F,$83
            .byte $F7,$07,$E8,$7C,$E3,$CC,$3E,$03,$C7,$0E,$70,$F3,$C3,$8E,$1E,$78
            .byte $70,$7C,$52,$F8,$43,$C7,$0E,$38,$70,$40,$73,$81,$CC,$3F,$18,$70
            .byte $00,$7F,$83,$70,$00,$03,$FF,$FE,$0C,$00,$21,$FF,$01,$80,$00,$39
            .byte $F0,$06,$00,$00,$FF,$E0,$1C,$00,$03,$CF,$01,$CF,$FC,$1C,$08,$01
            .byte $FF,$1E,$06,$30,$40,$9F,$18,$60,$00,$00,$3F,$F0,$07,$07,$00,$3F
            .byte $FF,$80,$00,$10,$03,$FE,$30,$0C,$00,$00,$FC,$70,$BF,$03,$07,$FF
            .byte $80,$38,$00,$00,$3F,$F0,$BF,$03,$03,$1E,$00,$38,$40,$04,$F1,$C0
            .byte $BF,$06,$06,$00,$00,$0F,$18,$BF,$06,$03,$80,$00,$1F,$BF,$08,$06
            .byte $00,$00,$1E,$20,$BF,$04,$08,$60,$00,$C0,$00,$01,$F1,$E0,$BF,$05
            .byte $80,$00,$E0,$00,$03,$E0,$BF,$07,$01,$80,$00,$01,$F0,$BF,$07,$0A
            .byte $80,$00,$07,$80,$BF,$08,$30,$00,$00,$60,$BF,$07,$01,$80,$00,$01
            .byte $FE,$BF,$08,$20,$00,$00,$F8,$BF,$08,$60,$00,$00,$3F,$80,$BF,$07
            .byte $10,$00,$00,$78,$BF,$0B,$38,$BF,$71,$4C,$63,$8E,$F1,$82,$1C,$72
            .byte $F0,$9C,$F0,$1E,$21,$FF,$18,$7F,$80,$7C,$87,$BC,$E0,$78,$C3,$EF
            .byte $0E,$F8,$23,$E3,$0F,$30,$F7,$86,$38,$73,$C2,$1E,$31,$F1,$8F,$B8
            .byte $7C,$E3,$C7,$3C,$1F,$F8,$7F,$E1,$FF,$07,$FC,$18,$78,$F8,$C1,$E1
            .byte $FF,$87,$FE,$1F,$8C,$1F,$38,$3F,$0F,$0E,$1F,$07,$DF,$07,$C7,$83
            .byte $C7,$83,$07,$EF,$00,$1F,$07,$8F,$C1,$C1,$F8,$38,$0F,$83,$1E,$00
            .byte $E1,$E0,$70,$7E,$1C,$0F,$06,$03,$C0,$00,$00,$38,$7C,$00,$0F,$C7
            .byte $C0,$F8,$00,$07,$06,$07,$00,$C6,$03,$E0,$60,$78,$78,$18,$1C,$1E
            .byte $06,$03,$E0,$00,$7F,$FC,$07,$0F,$07,$87,$81,$FF,$00,$43,$E0,$07
            .byte $E7,$C0,$07,$E1,$83,$F3,$C0,$FF,$E0,$F9,$F8,$01,$F0,$43,$F0,$83
            .byte $E3,$07,$DF,$81,$FF,$80,$1E,$00,$7F,$F0,$71,$F0,$01,$E3,$C1,$87
            .byte $FF,$07,$0C,$1E,$78,$70,$E3,$C3,$07,$06,$1C,$F0,$1E,$00,$0F,$FF
            .byte $E0,$41,$E0,$C0,$00,$00,$F3,$E0,$F0,$83,$8F,$DC,$10,$E3,$C0,$1E
            .byte $08,$7F,$E0,$3C,$00,$27,$EF,$81,$06,$0C,$30,$70,$04,$DF,$03,$04
            .byte $3D,$F1,$87,$3C,$41,$C7,$08,$3B,$E7,$0C,$70,$C7,$DE,$18,$F3,$84
            .byte $79,$87,$70,$CF,$01,$CF,$78,$07,$88,$7F,$88,$7B,$86,$3E,$E1,$9F
            .byte $80,$7F,$E0,$03,$88,$77,$CC,$77,$80,$7F,$80,$7F,$01,$FE,$30,$39
            .byte $87,$7E,$C3,$1F,$E0,$1F,$E0,$1F,$E0,$1F,$C4,$0C,$C3,$3B,$C4,$7F
            .byte $90,$0F,$61,$09,$FF,$01,$9C,$63,$0C,$F7,$08,$E7,$98,$87,$7F,$00
            .byte $7F,$80,$03,$30,$0E,$F7,$11,$FE,$20,$0F,$F0,$00,$FF,$C0,$1E,$60
            .byte $0D,$0A,$FF,$11,$DF,$60,$19,$CC,$63,$BC,$E6,$11,$9F,$F1,$00,$77
            .byte $80,$03,$C0,$00,$FE,$00,$66,$11,$DF,$73,$0C,$EF,$90,$08,$C6,$3B
            .byte $C0,$03,$98,$33,$8F,$30,$46,$1C,$E3,$98,$03,$B7,$20,$80,$1E,$20
            .byte $8C,$73,$00,$0C,$00,$15,$EA,$AA,$02,$BE,$80,$83,$7D,$CA,$14,$4A
            .byte $A5,$E9,$55,$2B,$42,$54,$AD,$4A,$52,$69,$56,$54,$AB,$40,$AB,$75
            .byte $6A,$EE,$F8,$AA,$02,$02,$A0,$95,$14,$08,$9E,$86,$A4,$40,$55,$5D
            .byte $41,$5B,$5F,$CA,$6A,$C9,$6A,$93,$5B,$56,$49,$F4,$54,$9B,$64,$B6
            .byte $DB,$CB,$6B,$2E,$A6,$DB,$AA,$5A,$BA,$6A,$25,$2C,$37,$6A,$52,$D9
            .byte $6B,$45,$16,$6A,$5B,$6A,$D5,$2B,$D4,$AA,$51,$A5,$65,$52,$52,$A9
            .byte $6C,$AD,$A9,$12,$C4,$25,$52,$53,$6A,$95,$25,$42,$56,$00,$22,$9C
            .byte $00,$02,$51,$83,$E0,$0F,$FE,$00,$FE,$00,$FF,$E0,$0E,$00,$FF,$80
            .byte $3F,$F0,$0F,$C0,$3F,$F0,$01,$C2,$3F,$E1,$1F,$F0,$EF,$80,$FF,$18
            .byte $61,$C2,$3C,$E1,$FF,$04,$7D,$C3,$9E,$10,$F7,$00,$E1,$1E,$71,$EF
            .byte $08,$F3,$0F,$70,$C7,$F8,$0F,$08,$F9,$C3,$FE,$08,$FC,$03,$FC,$01
            .byte $FE,$07,$08,$7F,$C3,$FE,$01,$F0,$0F,$F0,$7F,$E0,$3C,$00,$FC,$C3
            .byte $FF,$02,$1C,$08,$00,$3F,$C0,$60,$C0,$83,$8F,$18,$7F,$00,$38,$60
            .byte $00,$01,$C0,$0F,$00,$03,$80,$30,$41,$8C,$01,$C0,$01,$C0,$1C,$C0
            .byte $1C,$00,$8E,$00,$71,$07,$80,$00,$00,$0E,$00,$0E,$00,$70,$00,$00
            .byte $02,$00,$43,$00,$01,$08,$08,$00,$06,$08,$03,$00,$00,$20,$03,$C0
            .byte $18,$BF,$05,$30,$04,$00,$00,$80,$00,$00,$28,$20,$BF,$0A,$40,$BF
            .byte $14,$03,$80,$00,$39,$E0,$BF,$05,$03,$BF,$04,$38,$00,$07,$FC,$38
            .byte $00,$00,$03,$80,$BF,$05,$38,$00,$00,$FF,$E1,$BF,$03,$40,$BF,$06
            .byte $70,$00,$07,$8F,$1E,$03,$80,$BF,$09,$70,$00,$06,$1C,$30,$BF,$0B
            .byte $08,$BF,$08,$31,$80,$06,$BF,$09,$40,$BF,$0E,$03,$8C,$08,$38,$F1
            .byte $C0,$BF,$06,$80,$BF,$09,$06,$30,$81,$00,$18,$BF,$05,$06,$0C,$99

* = $1000

l_1000
                    SEI                             ; (1000) Set Interrupt Disable Flag
                    LDA #$0A                        ; (1001) Set A to #$0A (10 / 00001010)
                    STA $FB                         ; (1003) Store A to $FB
                    LDA #$19                        ; (1005) Set A to #$19 (25 / 00011001)
                    STA $FC                         ; (1007) Store A to $FC
                    LDA #$00                        ; (1009) Set A to #$00 (0 / 00000000)
                    STA $D418                       ; (100B) Store A to $D418
                    LDY #$00                        ; (100E) Load Y with #$00 (0 / 00000000)
                    LDA ($FB),Y                     ; (1010) Load A with ($FB),Y
                    STA $FD                         ; (1012) Store A to $FD
                    INY                             ; (1014) Increment Y Register
                    LDA ($FB),Y                     ; (1015) Load A with ($FB),Y
                    STA $FE                         ; (1017) Store A to $FE
                    INY                             ; (1019) Increment Y Register
                    CLC                             ; (101A) Clear Carry Flag
                    CLD                             ; (101B) Clear Decimal Mode
                    LDA $FB                         ; (101C) Load A with $FB
                    ADC $FD                         ; (101E) Add with Carry $FD
                    STA $02                         ; (1020) Store A to $02
                    LDA $FC                         ; (1022) Load A with $FC
                    ADC $FE                         ; (1024) Add with Carry $FE
                    STA $03                         ; (1026) Store A to $03

l_1028
                    LDX #$08                        ; (1028) Set X to #$08 (8 / 00001000)
                    LDA ($FB),Y                     ; (102A) Load A with ($FB),Y

l_102C
                    ROL A                           ; (102C) Rotate Left Accumulator
                    PHA                             ; (102D) Push Accumulator to Stack
                    BCS l_1036                      ; (102E) Branch if Carry Set $1036
                    JSR l_1080                      ; (1030) Jump to Subroutine at $1080
                    JMP l_103C                      ; (1033) Jump to $103C

l_1036
                    JSR l_106B                      ; (1036) Jump to Subroutine at $106B
                    NOP                             ; (1039) No operation
                    NOP                             ; (103A) No operation
                    NOP                             ; (103B) No operation

l_103C
                    CLD                             ; (103C) Clear Decimal Mode
                    SEC                             ; (103D) Set Carry Flag
                    LDA $FB                         ; (103E) Load A with $FB
                    SBC $02                         ; (1040) Subtract with Carry $02
                    LDA $FC                         ; (1042) Load A with $FC
                    SBC $03                         ; (1044) Subtract with Carry $03
                    BCS l_1063                      ; (1046) Branch if Carry Set $1063
                    JSR l_108B                      ; (1048) Jump to Subroutine at $108B
                    PLA                             ; (104B) Pull Accumulator from Stack
                    DEX                             ; (104C) Decrement X
                    CPX #$00                        ; (104D) Subtract #$00 from X (0 / 00000000)
                    BNE l_105E                      ; (104F) Branch to $105E if Not Equal
                    LDA #$FF                        ; (1051) Set A to #$FF (255 / 11111111)
                    CMP $FB                         ; (1053) Subtract $FB from A
                    BNE l_1059                      ; (1055) Branch to $1059 if Not Equal
                    INC $FC                         ; (1057) Increment Memory $FC

l_1059
                    INC $FB                         ; (1059) Increment Memory $FB
                    JMP l_1028                      ; (105B) Jump to $1028

l_105E
                    NOP                             ; (105E) No operation
                    NOP                             ; (105F) No operation
                    JMP l_102C                      ; (1060) Jump to $102C

l_1063
                    LDA #$00                        ; (1063) Set A to #$00 (0 / 00000000)
                    STA $D418                       ; (1065) Store A to $D418
                    PLA                             ; (1068) Pull Accumulator from Stack
                    CLI                             ; (1069) Clear Interrupt Disable Flag
                    RTS                             ; (106A) Return from Subroutine

l_106B
                    LDA #$0F                        ; (106B) Set A to #$0F (15 / 00001111)
                    STA $D418                       ; (106D) Store A to $D418
                    NOP                             ; (1070) No operation
                    NOP                             ; (1071) No operation
                    NOP                             ; (1072) No operation
                    NOP                             ; (1073) No operation
                    NOP                             ; (1074) No operation
                    NOP                             ; (1075) No operation
                    NOP                             ; (1076) No operation
                    NOP                             ; (1077) No operation
                    NOP                             ; (1078) No operation
                    NOP                             ; (1079) No operation
                    NOP                             ; (107A) No operation
                    NOP                             ; (107B) No operation
                    NOP                             ; (107C) No operation
                    NOP                             ; (107D) No operation
                    NOP                             ; (107E) No operation
                    RTS                             ; (107F) Return from Subroutine

l_1080
                    LDA #$00                        ; (1080) Set A to #$00 (0 / 00000000)
                    STA $D418                       ; (1082) Store A to $D418
                    JSR l_108B                      ; (1085) Jump to Subroutine at $108B
                    RTS                             ; (1088) Return from Subroutine

* = $1089
            .byte $EA,$60

* = $108B

l_108B
                    NOP                             ; (108B) No operation
                    NOP                             ; (108C) No operation
                    NOP                             ; (108D) No operation
                    RTS                             ; (108E) Return from Subroutine

* = $108F
            .byte $EA,$94,$01,$44,$32,$20,$9B,$01,$AD,$66,$B6,$B0,$57,$71,$89,$2A
            .byte $FD,$4C,$54,$73,$B8,$CE,$41,$3F,$00,$8F,$F0,$1F,$E0,$1F,$FC,$07
            .byte $F8,$07,$FE,$03,$FE,$84,$EA,$15,$E8,$67,$B8,$39,$8E,$F5,$1C,$E2
            .byte $1F,$E0,$E3,$1E,$E1,$1E,$E7,$19,$C6,$E2,$79,$8F,$E1,$F8,$DE,$66
            .byte $31,$CC,$73,$0E,$E3,$FC,$67,$1D,$E1,$3E,$63,$C1,$FC,$77,$19,$C7
            .byte $71,$CE,$0F,$83,$D8,$47,$1D,$C3,$BC,$0F,$A1,$CC,$33,$C7,$78,$CE
            .byte $07,$D0,$EE,$33,$8E,$E3,$3C,$9F,$47,$31,$9E,$73,$C6,$78,$1F,$03
            .byte $9C,$67,$8E,$F1,$9E,$07,$81,$D8,$CF,$19,$C6,$78,$1F,$06,$E3,$1E
            .byte $B3,$CC,$78,$0F,$C0,$38,$C7,$84,$79,$06,$1F,$E0,$38,$C3,$8E,$3C
            .byte $70,$0F,$38,$F1,$C1,$C3,$87,$BC,$00,$0E,$33,$9E,$3C,$71,$F1,$E6
            .byte $18,$E3,$8E,$0C,$38,$E3,$88,$00,$1C,$71,$E1,$81,$E7,$CF,$18,$00
            .byte $1C,$73,$C0,$0F,$1E,$78,$C0,$63,$89,$CE,$0C,$38,$73,$F0,$43,$00
            .byte $F1,$9C,$40,$20,$F7,$87,$98,$61,$9C,$21,$DC,$33,$8C,$73,$08,$C3
            .byte $38,$E7,$09,$DE,$33,$CE,$7B,$98,$66,$19,$9C,$C6,$0D,$82,$77,$33
            .byte $C8,$8E,$61,$19,$CC,$73,$36,$09,$CE,$73,$D8,$86,$73,$19,$98,$CC
            .byte $CC,$A2,$77,$33,$99,$88,$CC,$4E,$67,$31,$99,$B4,$4E,$F3,$34,$CC
            .byte $06,$73,$13,$C2,$66,$13,$71,$BB,$D9,$86,$E6,$67,$39,$86,$62,$18
            .byte $80,$DC,$A7,$79,$98,$CC,$E6,$73,$31,$19,$CC,$C6,$37,$53,$B9,$D8
            .byte $66,$39,$80,$60,$08,$00,$13,$28,$57,$20,$80,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$02,$00,$14,$90,$56,$8A,$24,$CB,$6E,$F4,$A4,$45,$12
            .byte $94,$D4,$90,$A4,$84,$14,$D2,$11,$56,$D0,$92,$E5,$4A,$B6,$4C,$4A
            .byte $53,$48,$4A,$96,$D0,$10,$92,$5A,$54,$AD,$90,$80,$00,$49,$68,$29
            .byte $4A,$13,$49,$02,$02,$94,$62,$08,$4A,$90,$00,$52,$9A,$92,$10,$94
            .byte $00,$04,$09,$10,$84,$11,$E4,$06,$81,$FF,$BC,$0F,$FC,$19,$F8,$07
            .byte $FF,$E0,$CF,$C1,$9F,$98,$3C,$77,$06,$7C,$03,$E6,$3F,$E6,$1D,$E3
            .byte $1E,$F1,$DE,$71,$8F,$10,$FF,$87,$F9,$C4,$79,$87,$78,$0F,$B8,$0E
            .byte $63,$BC,$07,$F8,$0E,$63,$BC,$4F,$31,$4E,$61,$DE,$33,$DC,$27,$88
            .byte $FE,$1B,$D8,$5F,$03,$F8,$FF,$82,$F8,$1F,$83,$FC,$17,$C0,$7F,$0F
            .byte $FC,$37,$C0,$FE,$1D,$F8,$5F,$01,$F0,$FF,$80,$F0,$3F,$07,$F8,$2F
            .byte $00,$F8,$1F,$F0,$FF,$05,$F0,$7F,$E1,$FE,$0F,$C1,$FE,$17,$E0,$FC
            .byte $3F,$C2,$BC,$07,$87,$FC,$1B,$E1,$FE,$0F,$F0,$7F,$83,$F8,$3E,$03
            .byte $E0,$FE,$1F,$87,$F8,$38,$67,$83,$DE,$1E,$0F,$F0,$7F,$C1,$F0,$7F
            .byte $03,$F8,$1F,$1F,$81,$FE,$0E,$0F,$81,$FE,$00,$C7,$C0,$FF,$80,$78
            .byte $FC,$1F,$FC,$07,$FF,$81,$E1,$60,$FF,$C0,$FC,$10,$7F,$E0,$3F,$80
            .byte $3F,$C0,$0F,$FC,$07,$FC,$00,$FF,$80,$FF,$00,$0F,$C0,$7F,$80,$63
            .byte $E0,$7F,$80,$3C,$E0,$7F,$C0,$00,$F8,$0F,$F0,$0F,$8F,$03,$FC,$03
            .byte $FF,$01,$FC,$01,$FF,$03,$FE,$01,$FE,$01,$FF,$80,$7F,$C0,$7F,$F0
            .byte $07,$F8,$0F,$F8,$00,$FC,$0F,$FC,$00,$7E,$07,$FC,$00,$3F,$01,$FF
            .byte $80,$07,$F0,$1F,$F8,$00,$3F,$03,$FC,$00,$0F,$C1,$FF,$80,$01,$F0
            .byte $7F,$F0,$00,$1F,$86,$67,$E0,$00,$1F,$1F,$03,$E0,$00,$07,$02,$00
            .byte $E0,$00,$00,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$00
            .byte $00,$00,$00,$00,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$76,$B6,$16
            .byte $E3,$69,$48,$4F,$5B,$0C,$C8,$30,$AA,$FE,$80,$0F,$FB,$84,$33,$8C
            .byte $FC,$00,$3F,$C0,$7F,$80,$FF,$FC,$03,$FC,$C7,$FC,$C3,$BC,$77,$80
            .byte $7B,$C3,$7C,$07,$09,$E7,$E1,$3E,$03,$E0,$7E,$1F,$C3,$E2,$3C,$03
            .byte $E0,$3E,$0F,$E0,$FC,$0F,$C1,$FC,$3F,$C3,$F0,$7C,$1F,$C3,$E0,$7C
            .byte $07,$C2,$F8,$7F,$87,$C0,$7C,$39,$F0,$FC,$1F,$A1,$E0,$FE,$07,$C1
            .byte $F0,$FD,$0F,$07,$F0,$7C,$0F,$07,$F0,$7C,$07,$E0,$F8,$1F,$0F,$D0
            .byte $F8,$7F,$87,$C0,$F8,$7C,$0F,$8F,$F0,$F8,$0F,$0F,$40,$F8,$3F,$C3
            .byte $E0,$1E,$0F,$40,$F8,$7F,$87,$80,$78,$7A,$07,$87,$F8,$7C,$07,$C3
            .byte $E8,$1F,$0F,$F8,$7C,$03,$F0,$7D,$07,$C3,$FC,$1E,$03,$FC,$3E,$03
            .byte $C3,$FC,$1F,$81,$E7,$07,$C8,$3C,$31,$F0,$1F,$83,$F7,$07,$E8,$7C
            .byte $E3,$CC,$3E,$03,$C7,$0E,$70,$F3,$C3,$8E,$1E,$78,$70,$7C,$52,$F8
            .byte $43,$C7,$0E,$38,$70,$40,$73,$81,$CC,$3F,$18,$70,$00,$7F,$83,$70
            .byte $00,$03,$FF,$FE,$0C,$00,$21,$FF,$01,$80,$00,$39,$F0,$06,$00,$00
            .byte $FF,$E0,$1C,$00,$03,$CF,$FC,$1C,$08,$01,$FF,$1E,$06,$30,$40,$9F
            .byte $18,$60,$00,$00,$3F,$F0,$07,$07,$00,$3F,$FF,$80,$00,$10,$03,$FE
            .byte $30,$0C,$00,$00,$FC,$70,$00,$00,$00,$07,$FF,$80,$38,$00,$00,$3F
            .byte $F0,$00,$00,$00,$03,$1E,$00,$38,$40,$04,$F1,$C0,$00,$00,$00,$00
            .byte $00,$00,$06,$00,$00,$0F,$18,$00,$00,$00,$00,$00,$00,$03,$80,$00
            .byte $1F,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$1E,$20,$00,$00
            .byte $00,$00,$08,$60,$00,$C0,$00,$01,$F1,$E0,$00,$00,$00,$00,$00,$80
            .byte $00,$E0,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$01,$80,$00,$01
            .byte $F0,$00,$00,$00,$00,$00,$00,$00,$0A,$80,$00,$07,$80,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$30,$00,$00,$60,$00,$00,$00,$00,$00,$00,$00
            .byte $01,$80,$00,$01,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$00
            .byte $F8,$00,$00,$00,$00,$00,$00,$00,$00,$60,$00,$00,$3F,$80,$00,$00
            .byte $00,$00,$00,$00,$00,$10,$00,$00,$78,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$4C,$63,$8E,$F1,$82,$1C,$72,$F0,$9C,$F0
            .byte $1E,$21,$FF,$18,$7F,$80,$7C,$87,$BC,$E0,$78,$C3,$EF,$0E,$F8,$23
            .byte $E3,$0F,$30,$F7,$86,$38,$73,$C2,$1E,$31,$F1,$8F,$B8,$7C,$E3,$C7
            .byte $3C,$1F,$F8,$7F,$E1,$FF,$07,$FC,$18,$78,$F8,$C1,$E1,$FF,$87,$FE
            .byte $1F,$8C,$1F,$38,$3F,$0F,$0E,$1F,$07,$DF,$07,$C7,$83,$C7,$83,$07
            .byte $EF,$00,$1F,$07,$8F,$C1,$C1,$F8,$38,$0F,$83,$1E,$00,$E1,$E0,$70
            .byte $7E,$1C,$0F,$06,$03,$C0,$00,$00,$38,$7C,$00,$0F,$C7,$C0,$F8,$00
            .byte $07,$06,$07,$00,$C6,$03,$E0,$60,$78,$78,$18,$1C,$1E,$06,$03,$E0
            .byte $00,$7F,$FC,$07,$0F,$07,$87,$81,$FF,$00,$43,$E0,$07,$E7,$C0,$07
            .byte $E1,$83,$F3,$C0,$FF,$E0,$F9,$F8,$01,$F0,$43,$F0,$83,$E3,$07,$DF
            .byte $81,$FF,$80,$1E,$00,$7F,$F0,$71,$F0,$01,$E3,$C1,$87,$FF,$07,$0C
            .byte $1E,$78,$70,$E3,$C3,$07,$06,$1C,$F0,$1E,$00,$0F,$FF,$E0,$41,$E0
            .byte $C0,$00,$00,$F3,$E0,$F0,$83,$8F,$DC,$10,$E3,$C0,$1E,$08,$7F,$E0
            .byte $3C,$00,$27,$EF,$81,$06,$0C,$30,$70,$04,$DF,$03,$04,$3D,$F1,$87
            .byte $3C,$41,$C7,$08,$3B,$E7,$0C,$70,$C7,$DE,$18,$F3,$84,$79,$87,$70
            .byte $CF,$78,$07,$88,$7F,$88,$7B,$86,$3E,$E1,$9F,$80,$7F,$E0,$03,$88
            .byte $77,$CC,$77,$80,$7F,$80,$7F,$01,$FE,$30,$39,$87,$7E,$C3,$1F,$E0
            .byte $1F,$E0,$1F,$E0,$1F,$C4,$0C,$C3,$3B,$C4,$7F,$90,$0F,$61,$09,$FF
            .byte $01,$9C,$63,$0C,$F7,$08,$E7,$98,$87,$7F,$00,$7F,$80,$03,$30,$0E
            .byte $F7,$11,$FE,$20,$0F,$F0,$00,$FF,$C0,$1E,$60,$0D,$0A,$FF,$11,$DF
            .byte $60,$19,$CC,$63,$BC,$E6,$11,$9F,$F1,$00,$77,$80,$03,$C0,$00,$FE
            .byte $00,$66,$11,$DF,$73,$0C,$EF,$90,$08,$C6,$3B,$C0,$03,$98,$33,$8F
            .byte $30,$46,$1C,$E3,$98,$03,$B7,$20,$80,$1E,$20,$8C,$73,$00,$0C,$00
            .byte $15,$EA,$AA,$02,$BE,$80,$83,$7D,$CA,$14,$4A,$A5,$E9,$55,$2B,$42
            .byte $54,$AD,$4A,$52,$69,$56,$54,$AB,$40,$AB,$75,$6A,$EE,$F8,$AA,$02
            .byte $02,$A0,$95,$14,$08,$9E,$86,$A4,$40,$55,$5D,$41,$5B,$5F,$CA,$6A
            .byte $C9,$6A,$93,$5B,$56,$49,$F4,$54,$9B,$64,$B6,$DB,$CB,$6B,$2E,$A6
            .byte $DB,$AA,$5A,$BA,$6A,$25,$2C,$37,$6A,$52,$D9,$6B,$45,$16,$6A,$5B
            .byte $6A,$D5,$2B,$D4,$AA,$51,$A5,$65,$52,$52,$A9,$6C,$AD,$A9,$12,$C4
            .byte $25,$52,$53,$6A,$95,$25,$42,$56,$00,$22,$9C,$00,$02,$51,$83,$E0
            .byte $0F,$FE,$00,$FE,$00,$FF,$E0,$0E,$00,$FF,$80,$3F,$F0,$0F,$C0,$3F
            .byte $F0,$01,$C2,$3F,$E1,$1F,$F0,$EF,$80,$FF,$18,$61,$C2,$3C,$E1,$FF
            .byte $04,$7D,$C3,$9E,$10,$F7,$00,$E1,$1E,$71,$EF,$08,$F3,$0F,$70,$C7
            .byte $F8,$0F,$08,$F9,$C3,$FE,$08,$FC,$03,$FC,$01,$FE,$07,$08,$7F,$C3
            .byte $FE,$01,$F0,$0F,$F0,$7F,$E0,$3C,$00,$FC,$C3,$FF,$02,$1C,$08,$00
            .byte $3F,$C0,$60,$C0,$83,$8F,$18,$7F,$00,$38,$60,$00,$01,$C0,$0F,$00
            .byte $03,$80,$30,$41,$8C,$01,$C0,$01,$C0,$1C,$C0,$1C,$00,$8E,$00,$71
            .byte $07,$80,$00,$00,$0E,$00,$0E,$00,$70,$00,$00,$02,$00,$43,$00,$01
            .byte $08,$08,$00,$06,$08,$03,$00,$00,$20,$03,$C0,$18,$00,$00,$00,$00
            .byte $00,$30,$04,$00,$00,$80,$00,$00,$28,$20,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$80,$00,$39,$E0,$00,$00
            .byte $00,$00,$00,$03,$00,$00,$00,$00,$38,$00,$07,$FC,$38,$00,$00,$03
            .byte $80,$00,$00,$00,$00,$00,$38,$00,$00,$FF,$E1,$00,$00,$00,$40,$00
            .byte $00,$00,$00,$00,$00,$70,$00,$07,$8F,$1E,$03,$80,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$70,$00,$06,$1C,$30,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$31,$80
            .byte $06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$8C,$08,$38,$F1,$C0,$00
            .byte $00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06
            .byte $30,$81,$00,$18,$00,$00,$00,$00,$00,$06,$0C,$99,$06,$25,$B0,$81
            .byte $19,$FF,$EC,$00,$00,$0F,$EE,$F6,$00,$00,$1F,$FF,$F8,$00,$00,$3F
            .byte $FF,$34,$01,$27,$FF,$FD,$80,$01,$BF,$FD,$90,$00,$DF,$FF,$E4,$00
            .byte $03,$FF,$FB,$11,$00,$FF,$FF,$E4,$04,$4F,$FF,$B3,$31,$3F,$FF,$C8
            .byte $01,$1F,$FF,$F7,$31,$08,$FF,$F9,$80,$03,$3F,$FF,$98,$00,$3F,$FF
            .byte $A0,$00,$6F,$FF,$EC,$00,$07,$FF,$F4,$00,$03,$FF,$FF,$98,$00,$1F
            .byte $FF,$A0,$00,$1F,$FF,$F0,$00,$0F,$FF,$C8,$00,$01,$FF,$FF,$88,$00
            .byte $1F,$FF,$C0,$00,$33,$FF,$FE,$00,$01,$FF,$FE,$00,$00,$FF,$FF,$F0
            .byte $00,$07,$FF,$FE,$00,$00,$FF,$FE,$78,$00,$07,$FF,$F0,$00,$07,$FF
            .byte $F9,$E0,$00,$3F,$FF,$F8,$00,$01,$FF,$FE,$3E,$00,$07,$FF,$FC,$00
            .byte $03,$9F,$FC,$3C,$00,$0F,$FF,$FE,$00,$00,$0F,$FF,$80,$F8,$00,$1F
            .byte $FF,$18,$00,$03,$33,$FC,$07,$C0,$03,$FF,$FC,$00,$00,$01,$EE,$E0
            .byte $01,$F8,$00,$3F,$FF,$40,$06,$02,$31,$38,$C7,$1F,$00,$03,$FF,$09
            .byte $01,$81,$20,$7B,$F1,$CC,$44,$70,$41,$4E,$CC,$C2,$41,$23,$0A,$71
            .byte $43,$32,$84,$E3,$20,$E3,$52,$22,$11,$C5,$71,$C1,$01,$D4,$E7,$A7
            .byte $84,$19,$B5,$44,$F3,$10,$28,$C2,$B2,$C6,$51,$D8,$61,$47,$02,$1A
            .byte $25,$55,$38,$33,$A9,$51,$99,$14,$79,$5D,$53,$2A,$02,$63,$4B,$87
            .byte $58,$38,$C8,$29,$BF,$28,$DC,$8C,$94,$EE,$32,$D7,$49,$6A,$90,$EC
            .byte $0C,$C4,$27,$0A,$88,$42,$92,$08,$84,$5C,$08,$E0,$24,$60,$BB,$40
            .byte $88,$4E,$83,$06,$2A,$01,$10,$80,$04,$10,$08,$66,$22,$F4,$00,$76
            .byte $D3,$3A,$00,$01,$08,$00,$28,$90,$10,$10,$09,$01,$00,$0A,$B4,$88
            .byte $00,$11,$42,$40,$84,$02,$00,$08,$44,$08,$01,$08,$88,$44,$10,$80
            .byte $08,$04,$00,$82,$41,$20,$04,$20,$48,$01,$21,$08,$00,$01,$14,$00
            .byte $40,$00,$00,$00,$02,$30,$20,$80,$06,$00,$50,$14,$80,$00,$92,$44
            .byte $15,$48,$10,$18,$00,$00,$04,$00,$04,$00,$00,$40,$08,$D2,$A0,$00
            .byte $C0,$23,$00,$00,$00,$65,$20,$80,$80,$04,$01,$8A,$00,$19,$C9,$00
            .byte $44,$91,$98,$40,$92,$C1,$3A,$88,$C4,$8C,$0E,$A3,$6A,$03,$3D,$33
            .byte $9E,$C2,$56,$60,$9C,$24,$31,$C7,$7E,$01,$3F,$FC,$23,$CD,$E4,$7C
            .byte $03,$FE,$0F,$FC,$07,$EF,$81,$F0,$0F,$F0,$7F,$C0,$7C,$70,$7C,$07
            .byte $C0,$3F,$83,$FC,$79,$BC,$33,$E6,$1F,$F0,$FC,$1F,$C3,$84,$79,$87
            .byte $71,$DE,$3B,$8F,$00,$E6,$39,$C6,$78,$8F,$3E,$21,$CF,$1D,$E3,$1C
            .byte $63,$9F,$80,$67,$19,$E4,$39,$0E,$FE,$43,$30,$9E,$67,$98,$7F,$79
            .byte $0E,$E1,$1E,$E3,$98,$73,$F7,$19,$C4,$7F,$31,$DD,$B7,$61,$B8,$8D
            .byte $E6,$4F,$33,$F7,$0D,$0A,$CC,$33,$DC,$87,$F6,$EE,$33,$31,$9C,$CC
            .byte $CF,$6E,$C7,$73,$1B,$FD,$88,$EE,$73,$19,$CC,$67,$39,$88,$FE,$73
            .byte $19,$98,$8C,$EE,$47,$F7,$D8,$8C,$CC,$6F,$F0,$1F,$FB,$B1,$4C,$E6
            .byte $37,$FE,$01,$FE,$EC,$46,$E6,$27,$FE,$07,$FF,$91,$1D,$D8,$CF,$FC
            .byte $47,$F7,$EC,$43,$7B,$08,$FF,$C4,$7F,$FC,$88,$EE,$C0,$7F,$E0,$7F
            .byte $FC,$80,$6E,$C2,$3F,$F8,$8F,$F7,$E4,$23,$B8,$80,$FF,$E0,$3F,$FE
            .byte $41,$3F,$81,$1F,$F8,$1F,$FF,$98,$E7,$F8,$86,$7F,$C0,$1F,$EF,$90
            .byte $47,$F8,$0F,$FF,$00,$EF,$39,$86,$FF,$88,$FF,$10,$47,$FC,$E1,$0E
            .byte $79,$C3,$3F,$E0,$0F,$FF,$F0,$07,$FC,$03,$FE,$10,$FF,$98,$E0,$0F
            .byte $F8,$01,$FF,$0C,$3E,$F1,$FE,$00,$FF,$80,$3F,$E0,$C3,$CF,$3F,$00
            .byte $7F,$C0,$7F,$C0,$3D,$E3,$FB,$F0,$23,$FC,$81,$FF,$C0,$F3,$C3,$ED
            .byte $E0,$97,$D0,$0F,$FC,$0F,$1C,$1F,$1F,$05,$0F,$C0,$07,$F8,$07,$C3
            .byte $C3,$C3,$C1,$E7,$F0,$03,$F0,$03,$E7,$C7,$87,$81,$AF,$E0,$21,$FC
            .byte $00,$0F,$F3,$E0,$F8,$1E,$FF,$00,$3F,$C0,$01,$F8,$38,$7C,$07,$BF
            .byte $80,$E3,$F8,$00,$1F,$83,$C3,$F0,$3F,$7F,$03,$F7,$E0,$00,$FC,$38
            .byte $7E,$03,$FF,$E0,$3F,$FE,$00,$1F,$E0,$01,$F8,$07,$FF,$F0,$0F,$8F
            .byte $C0,$3F,$C3,$87,$E0,$3F,$FF,$80,$FF,$9F,$00,$7F,$1F,$07,$E0,$0F
            .byte $FF,$E0,$1E,$0F,$C0,$1F,$FF,$87,$E0,$1F,$FF,$C0,$3F,$FF,$80,$3F
            .byte $C3,$C3,$F8,$03,$FF,$F8,$03,$E1,$F8,$07,$E3,$E0,$FC,$03,$FF,$F8
            .byte $00,$07,$F8,$01,$FF,$FE,$1F,$C0,$0F,$FF,$E0,$07,$1F,$E0,$0F,$8F
            .byte $E1,$F8,$03,$FF,$F8,$00,$01,$FC,$01,$FC,$FE,$07,$E0,$07,$FF,$F0
            .byte $00,$0F,$E0,$03,$FF,$80,$FC,$02,$DF,$F8,$00,$03,$FC,$00,$03,$FC
            .byte $07,$F0,$04,$3F,$F0,$00,$1F,$C0,$00,$FE,$00,$F0,$00,$0F,$F8,$00
            .byte $01,$F8,$00,$2D,$B1,$01,$F0,$00,$1F,$FF,$00,$00,$00,$18,$E0,$00
            .byte $00,$00,$00,$1F,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$0F,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07
            .byte $39,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11,$BF
            .byte $5A,$96,$34,$A1,$43,$1A,$22,$15,$29,$51,$5C,$A9,$9A,$54,$84,$54
            .byte $2A,$64,$92,$45,$14,$90,$C8,$52,$83,$04,$41,$02,$41,$A5,$0A,$18
            .byte $C0,$42,$02,$51,$41,$28,$98,$63,$C0,$02,$00,$08,$1E,$70,$00,$00
            .byte $60,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $08,$C0,$02,$00,$E7,$FC,$00,$3F,$E0,$78,$1F,$81,$FF,$C0,$FF,$E0
            .byte $7F,$80,$FC,$E0,$F8,$3F,$FC,$1F,$CF,$03,$F0,$40,$FC,$1F,$07,$E0
            .byte $7F,$78,$3F,$00,$1F,$03,$FF,$07,$E0,$F0,$3F,$3C,$1F,$C0,$07,$E0
            .byte $7E,$18,$1F,$80,$F0,$3F,$0C,$1F,$83,$EF,$81,$F0,$70,$FC,$1F,$03
            .byte $F0,$C0,$FC,$0F,$9F,$03,$F0,$70,$7C,$0F,$81,$F0,$B0,$FC,$1F,$1C
            .byte $1F,$83,$87,$E0,$FC,$0F,$C3,$C3,$F0,$3E,$0E,$0F,$83,$C1,$F0,$7E
            .byte $07,$C3,$C3,$E0,$FC,$38,$3C,$1E,$1F,$81,$F8,$1F,$81,$87,$E0,$7C
            .byte $1C,$1F,$07,$87,$C1,$FE,$07,$C1,$E7,$E0,$F0,$78,$7C,$1E,$0F,$C3
            .byte $CF,$81,$F8,$3C,$7C,$1F,$07,$07,$87,$83,$E0,$C3,$C0,$F8,$78,$F8
            .byte $3C,$1E,$0F,$07,$81,$FC,$00,$F8,$1F,$0F,$0F,$87,$83,$C3,$C3,$C0
            .byte $FF,$00,$F8,$3E,$3C,$3F,$07,$03,$C1,$E0,$F0,$03,$F0,$0F,$03,$E7
            .byte $C1,$F0,$00,$70,$70,$70,$01,$F0,$0F,$07,$07,$BF,$9E,$1E,$00,$00
            .byte $00,$00,$00,$07,$8E,$30,$18,$7F,$E7,$80,$00,$C0,$00,$F0,$00,$00
            .byte $E1,$80,$E1,$FF,$FF,$00,$00,$03,$C1,$C1,$C0,$01,$C2,$02,$1F,$FC
            .byte $E0,$00,$00,$00,$00,$00,$00,$01,$C1,$01,$07,$FF,$00,$00,$00,$08
            .byte $00,$00,$00,$03,$80,$0E,$3F,$9F,$E0,$00,$00,$70,$70,$00,$00,$00
            .byte $38,$40,$43,$FF,$C0,$00,$00,$00,$60,$00,$00,$00,$07,$04,$06,$1F
            .byte $8F,$80,$00,$00,$01,$80,$00,$00,$00,$07,$0C,$08,$3E,$7C,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$30,$40,$43,$C7,$87,$00,$00,$03,$00
            .byte $00,$00,$00,$00,$0C,$18,$08,$3E,$3C,$18,$00,$00,$07,$00,$00,$00
            .byte $00,$00,$0C,$00,$00,$E1,$E0,$C0,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $18,$20,$01,$E3,$C3,$00,$00,$00,$18,$00,$00,$00,$00,$00,$06,$00
            .byte $00,$1E,$3C,$38,$00,$00,$00,$80,$00,$00,$00,$00,$00,$30,$00,$00
            .byte $FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$38
            .byte $E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$00,$00,$71
            .byte $E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$03,$FD
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$FF,$E0
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$00,$7E,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF
            .byte $C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$13,$4A,$7A,$48,$00,$00,$00
            .byte $09,$00,$40,$A0,$4A,$54,$82,$01,$A0,$00,$40,$04,$20,$00,$00,$00
            .byte $00,$E1,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$80,$00,$01,$00
            .byte $00,$00,$00,$00,$00,$01,$C0,$56,$0A,$01,$00,$46,$22,$00,$04,$08
            .byte $81,$18,$32,$66,$44,$09,$13,$22,$07,$8B,$89,$89,$C7,$8F,$9F,$9F
            .byte $8F,$8F,$CF,$CF,$C7,$C7,$C7,$C7,$CF,$8F,$8F,$1F,$1E,$3E,$7C,$78
            .byte $F8,$F1,$F3,$E3,$E3,$E3,$E3,$E3,$E3,$E3,$C7,$C7,$C7,$8F,$9F,$1E
            .byte $3C,$7C,$F9,$F1,$E3,$E7,$CF,$8F,$8F,$1F,$1F,$1F,$1F,$3E,$3E,$3E
            .byte $3C,$7C,$F9,$F3,$E7,$C7,$8F,$1E,$3C,$7C,$F9,$F3,$E3,$E3,$C7,$C7
            .byte $C7,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3E,$00
            .byte $00,$7F,$00,$00,$7F,$00,$00,$7F,$00,$00,$41,$00,$00,$7F,$00,$00
            .byte $5D,$00,$00,$5D,$00,$00,$5D,$00,$00,$7F,$00,$00,$41,$00,$00,$3E
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00
            .byte $00,$0F,$00,$00,$1F,$80,$00,$3F,$C0,$00,$67,$C0,$00,$B3,$80,$01
            .byte $7B,$00,$03,$FE,$00,$02,$F4,$00,$01,$68,$00,$00,$B0,$00,$00,$60
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$01,$FF,$80,$02,$8B,$C0,$02,$FB,$C0,$02
            .byte $FB,$C0,$02,$FB,$C0,$02,$8B,$C0,$01,$FF,$80,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$60,$00,$00,$B0,$00,$01,$68,$00,$02,$F4,$00,$03,$FE,$00,$01
            .byte $7B,$00,$00,$B3,$80,$00,$67,$C0,$00,$3F,$C0,$00,$1F,$80,$00,$0F
            .byte $00,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$3E,$00,$00,$41,$00,$00,$7F,$00,$00,$5D,$00,$00,$5D,$00,$00
            .byte $5D,$00,$00,$7F,$00,$00,$41,$00,$00,$7F,$00,$00,$7F,$00,$00,$7F
            .byte $00,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$06,$00,$00,$0D,$00,$00,$16,$80,$00,$2F,$40,$00,$7F,$C0,$00
            .byte $DE,$80,$01,$CD,$00,$03,$E6,$00,$03,$FC,$00,$01,$F8,$00,$00,$F0
            .byte $00,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$FF,$C0,$01,$E8,$A0,$01,$EF,$A0,$01
            .byte $EF,$A0,$01,$EF,$A0,$01,$E8,$A0,$00,$FF,$C0,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$00
            .byte $00,$78,$00,$00,$FC,$00,$01,$FE,$00,$01,$F3,$00,$00,$E6,$80,$00
            .byte $6F,$40,$00,$3F,$E0,$00,$17,$A0,$00,$0B,$40,$00,$06,$80,$00,$03
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$03,$E0,$00,$07,$F0,$00,$07,$F0,$00,$07,$F0,$00,$04,$10,$00
            .byte $07,$F0,$00,$05,$D0,$00,$05,$50,$00,$07,$F0,$00,$07,$F0,$00,$04
            .byte $10,$00,$03,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$18,$00,$00,$3C,$00,$00,$7E,$00,$00,$FF,$00,$01,$9F,$00
            .byte $02,$CE,$00,$05,$EC,$00,$0F,$78,$00,$0B,$D0,$00,$05,$A0,$00,$02
            .byte $C0,$00,$01,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FE,$00
            .byte $0A,$2F,$00,$0B,$EF,$00,$0B,$6F,$00,$0B,$EF,$00,$0A,$2F,$00,$07
            .byte $FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$80,$00,$02,$C0,$00
            .byte $05,$A0,$00,$0B,$D0,$00,$0F,$78,$00,$05,$EC,$00,$02,$CE,$00,$01
            .byte $9F,$00,$00,$FF,$00,$00,$7E,$00,$00,$3C,$00,$00,$18,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$E0,$00,$04,$10,$00
            .byte $07,$F0,$00,$05,$D0,$00,$05,$50,$00,$05,$D0,$00,$07,$F0,$00,$04
            .byte $10,$00,$07,$F0,$00,$07,$F0,$00,$07,$F0,$00,$03,$E0,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$01,$A0,$00
            .byte $02,$D0,$00,$05,$E8,$00,$0F,$78,$00,$1B,$D0,$00,$39,$A0,$00,$7C
            .byte $C0,$00,$7F,$80,$00,$3F,$00,$00,$1E,$00,$00,$0C,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$F0,$00
            .byte $7A,$28,$00,$7B,$E8,$00,$7B,$68,$00,$7B,$E8,$00,$7A,$28,$00,$3F
            .byte $F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$0C,$00,$00,$1E,$00,$00,$3F,$00,$00,$7F,$80,$00,$7C,$C0,$00
            .byte $39,$A0,$00,$1B,$D0,$00,$0F,$78,$00,$05,$E8,$00,$02,$D0,$00,$01
            .byte $A0,$00,$00,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $1C,$38,$70,$2A,$D6,$A8,$54,$A9,$54,$AB,$56,$AA,$95,$AB,$52,$4A
            .byte $95,$2C,$26,$CD,$98,$1C,$38,$70,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$0D,$60,$00,$0A,$90,$00,$05,$D0,$00
            .byte $0A,$B0,$00,$05,$4E,$00,$0A,$B5,$00,$0D,$CB,$00,$00,$35,$00,$00
            .byte $CA,$E0,$00,$B4,$90,$00,$AB,$50,$00,$74,$B0,$00,$0B,$50,$00,$0C
            .byte $B0,$00,$0B,$50,$00,$07,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$30,$00,$00,$58,$00,$00,$AC,$00,$01,$56,$00,$01,$AA,$00
            .byte $00,$D4,$00,$00,$B4,$00,$00,$AC,$00,$00,$94,$00,$01,$2A,$00,$01
            .byte $56,$00,$01,$AA,$00,$00,$D4,$00,$00,$AC,$00,$00,$EC,$00,$00,$96
            .byte $00,$01,$2A,$00,$01,$56,$00,$00,$AA,$00,$00,$54,$00,$00,$30,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$06,$A0,$00,$0D,$50,$00,$0A,$B0
            .byte $00,$0D,$50,$00,$76,$D0,$00,$95,$50,$00,$EA,$90,$00,$AA,$E0,$07
            .byte $55,$00,$0A,$AB,$00,$0D,$55,$00,$0D,$4E,$00,$0A,$B0,$00,$0D,$50
            .byte $00,$0A,$90,$00,$07,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $1C,$38,$70,$2A,$D6,$A8,$54,$A9,$54,$AB,$56,$AA,$95,$AB,$52,$4A
            .byte $95,$2C,$26,$CD,$98,$1C,$38,$70,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$05,$A0,$00,$0A,$D0,$00,$0D,$30,$00
            .byte $0A,$D0,$00,$0D,$2E,$00,$0A,$D5,$00,$09,$2D,$00,$07,$53,$00,$00
            .byte $AC,$E0,$00,$D3,$B0,$00,$AD,$50,$00,$72,$B0,$00,$0D,$50,$00,$0A
            .byte $B0,$00,$0B,$50,$00,$05,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$30,$00,$00,$58,$00,$00,$AC,$00,$01,$56,$00,$01,$AA,$00
            .byte $00,$D4,$00,$00,$B4,$00,$00,$AC,$00,$00,$94,$00,$01,$2A,$00,$01
            .byte $56,$00,$01,$AA,$00,$00,$D4,$00,$00,$AC,$00,$00,$EC,$00,$00,$96
            .byte $00,$01,$2A,$00,$01,$56,$00,$00,$AA,$00,$00,$54,$00,$00,$30,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$06,$A0,$00,$09,$50,$00,$0A,$B0
            .byte $00,$0D,$50,$00,$72,$B0,$00,$AA,$B0,$00,$D5,$50,$00,$AA,$E0,$07
            .byte $55,$00,$09,$57,$00,$0A,$A9,$00,$0D,$6E,$00,$0A,$B0,$00,$0D,$50
            .byte $00,$0A,$B0,$00,$07,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$24,$00,$01,$12,$80,$00,$6B,$00,$09,$55,$50
            .byte $02,$AA,$B0,$29,$12,$2C,$23,$9A,$A4,$0A,$50,$12,$44,$C5,$58,$12
            .byte $4A,$12,$49,$A2,$A0,$04,$0C,$8A,$2A,$A1,$20,$01,$12,$90,$16,$49
            .byte $04,$00,$A4,$40,$03,$15,$10,$00,$D8,$40,$00,$27,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$0A,$00,$00,$20,$C0,$00,$84,$00,$00,$29,$50
            .byte $00,$92,$00,$02,$A5,$A0,$02,$48,$D4,$05,$2A,$A0,$04,$87,$18,$09
            .byte $28,$2A,$06,$41,$D4,$04,$94,$A8,$0B,$12,$12,$08,$4C,$EC,$0A,$A2
            .byte $18,$00,$58,$A4,$05,$02,$10,$00,$28,$E0,$02,$47,$30,$00,$12,$40
            .byte $00,$4F,$FF,$00,$FF,$00,$8B,$00,$FF,$00,$89,$31,$FF,$00,$FF,$31
            .byte $FF,$00,$2C,$31,$73,$00,$2C,$00,$FF,$00,$FF,$30,$33,$37,$2C,$21
            .byte $FF,$00,$2C,$31,$FF,$00,$2C,$31,$34,$00,$FF,$31,$35,$00,$2C,$00
            .byte $FF,$32,$2C,$31,$75,$35,$2C,$31,$35,$00,$FF,$00,$75,$39,$7C,$00
            .byte $FF,$30,$2C,$31,$B6,$11,$2C,$31,$FF,$20,$00,$00,$FF,$3E,$FF,$91
            .byte $FF,$55,$AB,$31,$FF,$00,$31,$36,$33,$2C,$31,$36,$35,$00,$31,$36
            .byte $FF,$2C,$31,$36,$FF,$2C,$31,$37,$31,$2C,$31,$37,$FF,$00,$32,$15
            .byte $FF,$00,$32,$35,$00,$2C,$31,$37,$35,$2C,$31,$37,$77,$00,$FF,$00
            .byte $FF,$FF,$00,$FF,$00,$FF,$34,$FF,$00,$FF,$34,$30,$00,$FF,$00,$72
            .byte $00,$FF,$39,$30,$30,$FF,$1E,$FF,$00,$FF,$00,$71,$33,$30,$00,$DE
            .byte $00,$FF,$08,$86,$00,$FF,$25,$28,$32,$FF,$00,$29,$3A,$FF,$49,$FF
            .byte $00,$E5,$33,$34,$2A,$87,$41,$3A,$41,$FF,$00,$FF,$01,$29,$A2,$FF
            .byte $00,$82,$3A,$8E,$00,$90,$27,$CA,$00,$DF,$34,$FF,$00,$33,$00,$2C
            .byte $00,$37,$2C,$31,$00,$FF,$2C,$31,$35,$37,$2C,$32,$39,$FF,$31,$39
            .byte $00,$31,$13,$2C,$00,$34,$37,$2C,$31,$33,$33,$2C,$00,$FF,$30,$2C
            .byte $00,$3B,$35,$2C,$FF,$31,$2C,$31,$18,$38,$2C,$31,$28,$FF,$00,$FF
            .byte $00,$00,$FF,$00,$FF,$00,$AF,$00,$FF,$00,$37,$33,$FF,$00,$FF,$24
            .byte $FF,$00,$27,$D4,$48,$00,$31,$00,$FF,$00,$FF,$38,$32,$2C,$31,$21
            .byte $FF,$00,$37,$37,$FF,$00,$32,$2C,$37,$00,$FF,$31,$33,$00,$2C,$00
            .byte $FF,$34,$0C,$37,$76,$2C,$38,$33,$2C,$00,$FF,$00,$79,$35,$7C,$00
            .byte $FF,$00,$D5,$27,$C6,$09,$A1,$43,$FF,$20,$8B,$00,$FF,$B2,$FF,$22
            .byte $FF,$32,$35,$30,$FF,$00,$DB,$27,$C5,$09,$8E,$00,$00,$00,$4D,$00
            .byte $FF,$60,$20,$02,$FF,$56,$56,$90,$50,$00,$00,$00,$FF,$00,$58,$00
            .byte $FF,$00,$A2,$04,$00,$00,$B1,$FD,$B1,$FB,$88,$D0,$FD,$00,$FF,$00
            .byte $FF,$00,$00,$00,$00,$00,$0F,$00,$00,$FF,$00,$03,$FF,$00,$0F,$FF
            .byte $00,$3F,$F8,$00,$7F,$87,$00,$FC,$78,$03,$F9,$80,$07,$E6,$00,$0F
            .byte $8C,$00,$0F,$36,$00,$1E,$7B,$00,$3C,$FD,$80,$79,$FE,$C0,$79,$1F
            .byte $60,$F2,$0F,$B0,$F2,$07,$D8,$E4,$03,$ED,$C8,$01,$F7,$C8,$00,$FB
            .byte $00,$00,$00,$00,$F0,$00,$00,$FF,$00,$00,$FF,$C0,$00,$FF,$F0,$00
            .byte $1F,$FC,$00,$E1,$FE,$00,$1E,$3F,$00,$01,$9F,$C0,$00,$E7,$E0,$00
            .byte $71,$F0,$00,$7C,$F0,$00,$FA,$78,$01,$F7,$3C,$03,$ED,$9E,$07,$D8
            .byte $9E,$0F,$B0,$4F,$1F,$60,$4F,$BE,$C0,$27,$FD,$80,$13,$FB,$00,$13
            .byte $C0,$00,$00,$00,$00,$00,$0F,$00,$00,$FF,$00,$03,$FF,$00,$0F,$FF
            .byte $00,$3F,$F8,$00,$7F,$87,$00,$FC,$7F,$03,$F9,$8F,$07,$E6,$07,$0F
            .byte $8C,$07,$0F,$30,$07,$1E,$60,$07,$3C,$C0,$07,$79,$80,$07,$79,$00
            .byte $07,$F2,$00,$07,$F2,$00,$07,$E4,$00,$0F,$C8,$00,$1D,$CF,$FF,$FE
            .byte $FF,$00,$00,$00,$F0,$00,$00,$FF,$00,$00,$FF,$C0,$00,$FF,$F0,$00
            .byte $1F,$FC,$00,$E1,$FE,$00,$FE,$3F,$00,$E1,$9F,$C0,$E0,$67,$E0,$E0
            .byte $31,$F0,$E0,$0C,$F0,$E0,$06,$78,$E0,$03,$3C,$E0,$01,$9E,$E0,$00
            .byte $9E,$E0,$00,$4F,$E0,$00,$4F,$F0,$00,$67,$B8,$00,$73,$7F,$FF,$F3
            .byte $9F,$00,$00,$00,$00,$00,$0F,$00,$00,$FF,$00,$03,$FF,$00,$0F,$FF
            .byte $00,$3F,$F8,$00,$7F,$87,$00,$FC,$78,$03,$F9,$80,$07,$E6,$00,$0F
            .byte $8C,$00,$0F,$36,$00,$1E,$7B,$00,$3C,$FD,$80,$79,$FE,$C0,$79,$1F
            .byte $60,$F2,$0F,$B0,$F2,$07,$D8,$E4,$03,$ED,$C8,$01,$F7,$C8,$00,$FB
            .byte $E6,$00,$00,$00,$F0,$00,$00,$FF,$00,$00,$FF,$C0,$00,$FF,$F0,$00
            .byte $20,$FC,$00,$E1,$FE,$00,$1E,$3F,$00,$01,$9F,$C0,$00,$E7,$E0,$00
            .byte $71,$F0,$00,$7C,$F0,$00,$FA,$78,$01,$F7,$3C,$03,$ED,$9E,$07,$D8
            .byte $9E,$0F,$B0,$4F,$1F,$60,$4F,$BE,$C0,$27,$FD,$80,$13,$FB,$00,$13
            .byte $E1,$00,$00,$00,$00,$00,$0F,$00,$00,$FF,$00,$03,$FF,$00,$0F,$FF
            .byte $00,$3F,$F8,$00,$7F,$87,$00,$FC,$7F,$03,$F9,$8F,$07,$E6,$07,$0F
            .byte $8C,$07,$0F,$30,$07,$1E,$60,$07,$3C,$C0,$07,$79,$80,$07,$79,$00
            .byte $07,$F2,$00,$07,$F2,$00,$07,$E4,$00,$0F,$C8,$00,$1D,$CF,$FF,$FE
            .byte $FF,$00,$00,$00,$F0,$00,$00,$FF,$00,$00,$FF,$C0,$00,$FF,$F0,$00
            .byte $1F,$FC,$00,$E1,$FE,$00,$FE,$3F,$00,$E1,$9F,$C0,$E0,$67,$E0,$E0
            .byte $31,$F0,$E0,$0C,$F0,$E0,$06,$78,$E0,$03,$3C,$E0,$01,$9E,$E0,$00
            .byte $9E,$E0,$00,$4F,$E0,$00,$4F,$F0,$00,$67,$B8,$00,$73,$7F,$FF,$F3
            .byte $3F,$00,$00,$FF,$00,$FF,$48,$FF,$00,$FF,$CA,$C8,$00,$FF,$00,$E3
            .byte $00,$FF,$EB,$29,$20,$FF,$29,$FF,$00,$FF,$00,$FD,$00,$C8,$91,$FF
            .byte $00,$FF,$C0,$3F,$00,$FF,$A0,$00,$A9,$FF,$00,$02,$B1,$FF,$A2,$FF
            .byte $00,$67,$22,$CA,$80,$FA,$A5,$02,$91,$FF,$00,$FF,$3F,$D0,$A9,$FF
            .byte $20,$00,$85,$FC,$2D,$36,$03,$0A,$00,$DF,$1A,$FF,$00,$0A,$00,$FC
            .byte $00,$FB,$A5,$FC,$00,$FF,$38,$85,$FC,$20,$C4,$28,$A5,$FF,$8D,$37
            .byte $00,$A9,$15,$38,$00,$35,$03,$C9,$08,$90,$02,$A9,$00,$FF,$38,$23
            .byte $00,$38,$38,$ED,$FB,$03,$C9,$08,$90,$02,$A9,$08,$89,$FF,$00,$FF
            .byte $00,$00,$FF,$00,$FF,$00,$83,$00,$FF,$00,$02,$8D,$FF,$00,$FF,$2A
            .byte $FF,$00,$39,$03,$EC,$00,$03,$00,$FF,$00,$FF,$02,$AD,$3B,$03,$00
            .byte $FF,$00,$23,$90,$FF,$00,$37,$03,$18,$00,$FF,$03,$18,$00,$35,$00
            .byte $FF,$2C,$35,$03,$FA,$AD,$34,$03,$4A,$00,$FF,$00,$76,$03,$9E,$00
            .byte $FF,$36,$03,$85,$FF,$8D,$36,$03,$FF,$20,$0A,$00,$FF,$03,$FF,$34
            .byte $FF,$38,$ED,$36,$FF,$00,$36,$03,$A9,$07,$38,$ED,$36,$00,$8D,$36
            .byte $FF,$A9,$21,$AE,$FF,$03,$F0,$04,$0A,$CA,$D0,$FC,$FF,$00,$03,$80
            .byte $FF,$00,$FD,$0D,$00,$03,$91,$FD,$EE,$34,$03,$CE,$7D,$00,$FF,$00
            .byte $FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$04,$00,$00,$08,$00,$00,$19,$00,$00,$08,$80,$00,$5A,$40,$00
            .byte $AA,$A0,$00,$2A,$C0,$01,$0D,$30,$00,$6D,$C0,$00,$04,$80,$00,$13
            .byte $20,$00,$0B,$00,$00,$04,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00
            .byte $00,$06,$80,$00,$26,$40,$00,$09,$00,$00,$14,$30,$00,$65,$A8,$00
            .byte $1A,$A0,$00,$2B,$2C,$00,$12,$D0,$00,$08,$80,$00,$44,$40,$00,$30
            .byte $C0,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$44,$00,$00,$1A,$00,$00,$99,$00,$00,$24,$00,$00,$76,$C0,$01
            .byte $96,$10,$00,$6A,$80,$00,$A7,$A0,$00,$4B,$40,$00,$21,$00,$00,$13
            .byte $00,$00,$02,$00,$00,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $FF,$5C,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$52
            .byte $00,$FF,$00,$13,$00,$FF,$00,$FF,$00,$FF,$00,$55,$00,$1B,$00,$9E
            .byte $00,$FF,$00,$19,$00,$FF,$00,$20,$00,$FF,$00,$00,$00,$FF,$00,$FF
            .byte $00,$41,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$00,$00,$00,$FF
            .byte $20,$00,$00,$00,$00,$22,$00,$21,$00,$DF,$10,$FF,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$20
            .byte $00,$29,$00,$00,$FB,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF
            .byte $00,$00,$FF,$00,$FF,$00,$83,$00,$FF,$00,$00,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$00,$0A,$40,$00,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00
            .byte $FF,$00,$20,$00,$FF,$00,$04,$00,$00,$00,$FF,$04,$00,$00,$00,$00
            .byte $FF,$00,$00,$00,$50,$00,$00,$00,$00,$00,$FF,$00,$40,$00,$14,$00
            .byte $DF,$00,$00,$05,$82,$00,$00,$00,$FF,$20,$00,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $FF,$16,$00,$00,$FF,$1D,$00,$00,$00,$00,$00,$00,$FF,$00,$00,$00
            .byte $FF,$00,$00,$00,$00,$17,$00,$00,$20,$15,$00,$00,$54,$00,$FF,$00
            .byte $FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$40
            .byte $00,$FF,$00,$00,$00,$FF,$00,$FF,$00,$FF,$00,$41,$00,$00,$00,$9E
            .byte $00,$FF,$00,$00,$00,$FF,$20,$00,$00,$FF,$00,$00,$00,$FF,$00,$FF
            .byte $00,$41,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$00,$00,$00,$FF
            .byte $20,$00,$00,$00,$00,$00,$00,$00,$00,$DF,$10,$FF,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$20
            .byte $00,$29,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF
            .byte $00,$00,$FF,$00,$FF,$00,$83,$00,$FF,$00,$00,$FF,$FF,$00,$FF,$00
            .byte $FF,$00,$00,$FF,$40,$00,$FF,$00,$FF,$00,$FF,$BE,$00,$FF,$7E,$61
            .byte $FF,$00,$FF,$00,$FF,$00,$DF,$FF,$FF,$00,$FF,$FF,$DF,$00,$FF,$00
            .byte $FF,$BE,$FF,$00,$50,$00,$00,$00,$DF,$00,$FF,$00,$C2,$FF,$14,$00
            .byte $DF,$FF,$00,$B6,$82,$00,$FF,$00,$FF,$20,$00,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$00,$00,$FF,$00,$20,$FF,$DF,$FF,$00,$FF,$00,$00,$00,$FF
            .byte $FF,$FF,$DF,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$FF,$00,$FF,$00
            .byte $FF,$00,$FF,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$F7,$54,$00,$FF,$00
            .byte $FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$FF
            .byte $00,$FF,$FF,$00,$BF,$FF,$00,$FF,$00,$FF,$00,$41,$FF,$00,$81,$9E
            .byte $00,$FF,$00,$FF,$00,$FF,$20,$00,$00,$FF,$00,$00,$00,$FF,$00,$FF
            .byte $00,$41,$00,$FF,$AF,$FF,$FF,$FF,$00,$FF,$00,$FF,$34,$00,$AB,$FF
            .byte $20,$00,$FF,$49,$7D,$FF,$00,$FF,$00,$FF,$FF,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$FF,$FF,$00,$FF,$DF,$00,$20,$00,$FF,$00,$FF,$FF,$FF,$00
            .byte $00,$00,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$08,$AB,$FF,$00,$FF
            .byte $00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$FF,$00,$FF,$00
            .byte $FF,$00,$00,$FF,$40,$00,$FF,$00,$FF,$00,$FF,$BE,$00,$FF,$7E,$61
            .byte $FF,$00,$FF,$00,$FF,$00,$FF,$FF,$FF,$00,$FF,$FF,$BF,$00,$FF,$00
            .byte $FF,$BE,$FF,$00,$50,$00,$00,$00,$FF,$00,$FF,$00,$C0,$FF,$14,$00
            .byte $FF,$BF,$00,$B6,$82,$00,$FF,$00,$FF,$20,$00,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$00,$00,$FF,$00,$20,$FF,$DF,$FF,$00,$FF,$00,$00,$00,$FF
            .byte $FF,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$FF,$00,$FF,$00
            .byte $FF,$00,$FF,$00,$00,$00,$00,$FF,$FF,$FF,$BF,$F7,$54,$00,$FF,$00
            .byte $FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$FF
            .byte $00,$FF,$FF,$00,$BF,$FF,$00,$FF,$00,$FF,$00,$41,$FF,$00,$81,$9E
            .byte $00,$FF,$00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$00,$00,$FF,$00,$FF
            .byte $00,$41,$00,$FF,$AF,$FF,$FF,$FF,$00,$FF,$00,$FF,$14,$00,$AB,$FF
            .byte $00,$00,$FF,$49,$7D,$FF,$00,$FF,$00,$DF,$FF,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$FF,$FF,$00,$FF,$DF,$00,$20,$00,$FF,$00,$FF,$FF,$FF,$00
            .byte $00,$00,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$08,$AB,$FF,$00,$FF
            .byte $00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$FF,$00,$FF,$00
            .byte $FF,$00,$00,$FF,$40,$00,$FF,$00,$FF,$00,$FF,$BE,$00,$FF,$7E,$61
            .byte $FF,$00,$FF,$00,$FF,$00,$FF,$FF,$FF,$00,$FF,$FF,$FF,$00,$FF,$00
            .byte $FF,$BE,$FF,$00,$50,$00,$00,$00,$FF,$00,$FF,$00,$C2,$FF,$54,$00
            .byte $FF,$FF,$00,$B6,$82,$00,$FF,$00,$FF,$20,$00,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$00,$00,$FF,$00,$20,$FF,$DF,$FF,$00,$FF,$00,$00,$00,$FF
            .byte $FF,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$FF,$00,$FF,$00
            .byte $FF,$00,$52,$54,$00,$45,$45,$53,$74,$52,$45,$45,$57,$00,$FF,$00
            .byte $FF,$AA,$FC,$FC,$FC,$FC,$FC,$FF,$FF,$AA,$F3,$F3,$F3,$F3,$F3,$FF
            .byte $FF,$AA,$CF,$CF,$CF,$CF,$CF,$FF,$FF,$AA,$3F,$3F,$3F,$3F,$3F,$FF
            .byte $FF,$AA,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$0F,$3F,$7F,$77,$F7,$F7,$F7
            .byte $F7,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$FC,$EE,$EE,$EF,$EF,$EF
            .byte $EF,$FF,$FF,$FF,$FF,$E0,$F0,$F8,$FF,$FF,$FF,$BD,$FF,$00,$00,$00
            .byte $FF,$FF,$FF,$FF,$FF,$07,$0F,$1F,$FF,$FF,$CF,$C7,$C7,$C7,$C7,$C7
            .byte $C7,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F3,$E3,$E3,$E3,$E3,$E3
            .byte $E3,$F7,$C7,$C7,$C7,$C7,$CF,$DF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $00,$FF,$E3,$E3,$E3,$E3,$F3,$FB,$7F,$F8,$E0,$7F,$3F,$0F,$00,$00
            .byte $00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$1F,$07,$FE,$FC,$F0,$00,$00
            .byte $00,$F0,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$0F,$03,$03,$03,$03,$03,$03,$03,$C0,$C0,$C0,$C0,$C0,$C0,$C0
            .byte $C0,$03,$03,$03,$03,$03,$03,$03,$0F,$60,$FF,$FF,$00,$FF,$FF,$3F
            .byte $3F,$00,$FF,$FF,$00,$FF,$FF,$FF,$FF,$00,$FF,$FF,$F3,$3F,$FC,$FC
            .byte $FF,$FF,$FF,$3F,$3F,$FF,$FF,$3F,$3F,$FC,$FC,$FC,$FC,$FC,$FC,$FC
            .byte $FC,$FF,$FF,$FC,$FC,$FF,$FF,$FC,$FC,$FF,$FF,$FC,$CF,$84,$87,$CC
            .byte $FF,$FF,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF
            .byte $FF,$FC,$FC,$FC,$FC,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF
            .byte $00,$FF,$FF,$FF,$FF,$FF,$FE,$F9,$F9,$FF,$FF,$FF,$FF,$FF,$7F,$9F
            .byte $9F,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$9F,$9F,$9F,$9F,$9F,$9F,$9F
            .byte $9F,$F9,$F9,$FE,$FF,$FF,$FF,$FF,$FF,$00,$FF,$00,$FF,$FF,$FF,$FF
            .byte $FF,$9F,$9F,$7F,$C1,$C9,$C9,$C1,$FF,$01,$02,$04,$09,$13,$27,$4F
            .byte $9F,$3F,$7D,$FD,$F5,$F5,$D5,$D5,$15,$1F,$3F,$7D,$FD,$F5,$F5,$D5
            .byte $D5,$55,$55,$55,$75,$FD,$DD,$75,$55,$FF,$55,$55,$55,$55,$55,$55
            .byte $57,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$FF,$55,$55,$55,$57,$55,$FF
            .byte $55,$5F,$75,$55,$D5,$7D,$D5,$55,$75,$FF,$55,$55,$D7,$D7,$55,$FF
            .byte $55,$55,$D5,$55,$75,$56,$76,$56,$D6,$FF,$55,$55,$55,$D5,$55,$FF
            .byte $55,$55,$55,$5D,$77,$77,$77,$5D,$55,$FF,$57,$57,$57,$57,$57,$57
            .byte $D7,$77,$77,$77,$77,$77,$77,$77,$77,$FF,$AA,$AA,$AB,$AB,$AB,$AB
            .byte $AB,$FF,$55,$FF,$4C,$61,$61,$4C,$FF,$FF,$55,$FF,$AE,$AE,$AE,$AE
            .byte $FF,$FF,$55,$FF,$A1,$AF,$AF,$A1,$FF,$FF,$55,$FF,$75,$FD,$FD,$75
            .byte $FF,$FF,$D7,$FF,$EB,$EB,$EB,$EB,$EB,$FF,$55,$5F,$F3,$F3,$5F,$55
            .byte $FF,$FF,$55,$55,$FF,$FF,$55,$55,$FF,$FF,$55,$55,$55,$55,$55,$55
            .byte $FF,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$FC,$FE,$7F,$7F,$5F,$5F,$57
            .byte $FF,$00,$00,$00,$00,$00,$00,$00,$3F,$00,$00,$00,$00,$00,$00,$3F
            .byte $3F,$00,$00,$00,$00,$00,$3F,$3F,$3F,$00,$00,$00,$00,$3F,$3F,$3F
            .byte $3F,$00,$00,$00,$3F,$3F,$3F,$3F,$3F,$00,$00,$3F,$3F,$3F,$3F,$3F
            .byte $3F,$00,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F
            .byte $3F,$80,$40,$20,$90,$C8,$E4,$F2,$F9,$FC,$FE,$BF,$BF,$AF,$AF,$AB
            .byte $AB,$FF,$D5,$D5,$D5,$D5,$D5,$D5,$FF,$01,$02,$04,$09,$13,$27,$4F
            .byte $9F,$80,$40,$20,$90,$C8,$E4,$F2,$F9,$FD,$FD,$F5,$F5,$D5,$D5,$55
            .byte $55,$55,$55,$55,$55,$55,$54,$50,$40,$55,$55,$55,$55,$55,$15,$05
            .byte $01,$55,$54,$50,$40,$00,$00,$00,$00,$55,$15,$05,$01,$00,$00,$00
            .byte $00,$BF,$BF,$AF,$AF,$AB,$AB,$AA,$AA,$FE,$FE,$FA,$FA,$EA,$EA,$AA
            .byte $AA,$AA,$AA,$AA,$AA,$AA,$A8,$A0,$80,$AA,$AA,$AA,$AA,$AA,$2A,$0A
            .byte $02,$AA,$A8,$A0,$80,$00,$00,$00,$00,$AA,$2A,$0A,$02,$00,$00,$00
            .byte $00,$55,$55,$55,$55,$55,$55,$55,$55,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$00,$CF,$CF,$CF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$3F,$33,$33,$33,$33,$33,$3F,$00,$0C,$0C,$0C,$0C,$0C,$0C
            .byte $0C,$00,$3F,$03,$03,$3F,$30,$30,$3F,$00,$3F,$03,$03,$3F,$03,$03
            .byte $3F,$00,$33,$33,$33,$3F,$03,$03,$03,$00,$3F,$30,$30,$3F,$03,$03
            .byte $3F,$00,$3F,$30,$30,$3F,$33,$33,$3F,$00,$1F,$03,$03,$03,$03,$03
            .byte $03,$00,$3F,$33,$33,$3F,$33,$33,$3F,$00,$3F,$33,$33,$3F,$03,$03
            .byte $3F,$00,$00,$18,$18,$00,$18,$18,$00,$FD,$FE,$F9,$F6,$D9,$E6,$99
            .byte $66,$99,$66,$99,$66,$99,$64,$90,$40,$99,$66,$99,$66,$99,$26,$09
            .byte $02,$99,$64,$90,$40,$00,$00,$00,$00,$99,$26,$09,$02,$00,$00,$00
            .byte $00,$99,$66,$99,$66,$99,$66,$99,$66,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$40,$40,$00,$40,$00,$00,$00,$40,$00,$00,$00,$00,$00,$B7,$B7
            .byte $B7,$B6,$BE,$B6,$B6,$B6,$B7,$BF,$BF,$B6,$0C,$04,$BC,$B6,$BC,$96
            .byte $BC,$F4,$FD,$F4,$FD,$F6,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$7E,$66,$66,$7E,$66,$66,$66,$00,$7E,$66,$66,$78,$66,$66,$7E
            .byte $00,$7E,$60,$60,$60,$60,$60,$7E,$00,$7C,$66,$66,$66,$66,$66,$7C
            .byte $00,$7E,$60,$60,$78,$60,$60,$7E,$00,$7E,$60,$60,$78,$60,$60,$60
            .byte $00,$7E,$60,$60,$6E,$66,$66,$7E,$00,$66,$66,$66,$7E,$66,$66,$66
            .byte $00,$18,$18,$18,$18,$18,$18,$18,$00,$06,$06,$06,$06,$66,$66,$7E
            .byte $00,$66,$66,$66,$78,$66,$66,$66,$00,$60,$60,$60,$60,$60,$60,$7E
            .byte $00,$66,$7E,$7E,$66,$66,$66,$66,$00,$66,$76,$7E,$6E,$66,$66,$66
            .byte $00,$7E,$66,$66,$66,$66,$66,$7E,$00,$7E,$66,$66,$7E,$60,$60,$60
            .byte $00,$7E,$66,$66,$66,$62,$6E,$7E,$00,$7E,$66,$66,$78,$66,$66,$66
            .byte $00,$7E,$60,$60,$7E,$06,$06,$7E,$00,$7E,$18,$18,$18,$18,$18,$18
            .byte $00,$66,$66,$66,$66,$66,$66,$7E,$00,$66,$66,$66,$66,$66,$3C,$18
            .byte $00,$66,$66,$66,$66,$7E,$7E,$66,$00,$66,$66,$66,$18,$66,$66,$66
            .byte $00,$66,$66,$66,$18,$18,$18,$18,$00,$7E,$06,$0C,$18,$30,$60,$7E
            .byte $00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$18,$08
            .byte $08,$00,$03,$04,$08,$10,$20,$C0,$00,$18,$18,$18,$18,$18,$00,$18
            .byte $18,$00,$00,$00,$7E,$7E,$00,$00,$00,$78,$60,$60,$60,$60,$60,$60
            .byte $78,$1E,$06,$06,$06,$06,$06,$06,$1E,$00,$18,$18,$7E,$7E,$18,$18
            .byte $00,$01,$05,$05,$0D,$0D,$0D,$0D,$0D,$80,$A0,$A0,$B0,$B0,$B0,$B0
            .byte $B0,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$B0,$B0,$B0,$B0,$B0,$B0,$B0
            .byte $B0,$00,$00,$FF,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$3C,$76,$FB
            .byte $FF,$AA,$AA,$AA,$AA,$A2,$A2,$AA,$AA,$AA,$AA,$82,$82,$82,$82,$AA
            .byte $AA,$AA,$80,$80,$80,$80,$80,$80,$AA,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$A8,$A8,$A8,$A8,$A8,$A8,$A8
            .byte $A8,$AA,$AA,$AA,$AA,$AA,$AA,$A8,$A8,$AA,$AA,$AA,$AA,$AA,$AA,$00
            .byte $00,$AA,$AA,$AA,$AA,$AA,$AA,$2A,$2A,$A8,$A8,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$00,$00,$AA,$AA,$AA,$AA,$AA,$AA,$2A,$2A,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$0A,$0A,$0A,$0A,$0A,$0A,$0A
            .byte $0A,$AA,$AA,$AA,$AA,$A0,$A0,$A0,$A0,$AA,$AA,$AA,$AA,$00,$00,$00
            .byte $00,$AA,$AA,$AA,$AA,$0A,$0A,$0A,$0A,$A0,$A0,$A0,$A0,$AA,$AA,$AA
            .byte $AA,$00,$00,$00,$00,$AA,$AA,$AA,$AA,$0A,$0A,$0A,$0A,$AA,$AA,$AA
            .byte $AA,$70,$70,$70,$70,$70,$70,$70,$70,$38,$7C,$1C,$7C,$38,$00,$00
            .byte $7E,$00,$7E,$00,$00,$1C,$3E,$38,$3E,$10,$10,$10,$10,$10,$10,$10
            .byte $10,$38,$38,$38,$18,$0F,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00
            .byte $00,$1C,$00,$00,$00,$FF,$00,$00,$00,$10,$10,$10,$10,$F0,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$3F,$00,$00,$00,$00,$00,$00,$3F
            .byte $3F,$00,$00,$00,$00,$00,$3F,$3F,$3F,$00,$00,$00,$00,$3F,$3F,$3F
            .byte $3F,$00,$00,$00,$3F,$3F,$3F,$3F,$3F,$00,$00,$3F,$3F,$3F,$3F,$3F
            .byte $3F,$00,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F
            .byte $3F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$7F,$7F,$5F,$5F,$57,$57,$55,$55,$FD,$FD,$F5,$F5,$D5,$D5,$55
            .byte $55,$55,$55,$55,$55,$57,$5C,$70,$C0,$55,$55,$55,$55,$D5,$35,$0D
            .byte $03,$57,$5C,$70,$C0,$00,$00,$00,$00,$D5,$35,$0D,$03,$00,$00,$00
            .byte $00,$BF,$BF,$AF,$AF,$AB,$AB,$AA,$AA,$FE,$FE,$FA,$FA,$EA,$EA,$AA
            .byte $AA,$AA,$AA,$AA,$AA,$AB,$AC,$B0,$C0,$AA,$AA,$AA,$AA,$EA,$3A,$0E
            .byte $03,$AB,$AC,$B0,$C0,$00,$00,$00,$00,$EA,$3A,$0E,$03,$00,$00,$00
            .byte $00,$55,$55,$55,$55,$55,$55,$55,$55,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$FF,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $AA,$AA,$AA,$AA,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$45,$00,$51,$00,$45,$00,$51,$45,$45,$00,$51,$51,$00,$45
            .byte $45,$00,$51,$51,$00,$45,$45,$00,$51,$51,$00,$45,$45,$00,$51,$51
            .byte $00,$45,$45,$45,$00,$51,$51,$51,$00,$45,$4D,$45,$00,$51,$51,$51
            .byte $00,$00,$45,$00,$FF,$00,$00,$00,$00,$00,$51,$51,$FF,$00,$00,$00
            .byte $00,$51,$00,$45,$FF,$00,$00,$00,$00,$45,$45,$00,$FF,$00,$00,$00
            .byte $00,$BF,$7F,$9F,$6F,$9B,$67,$99,$66,$FD,$FE,$F9,$F6,$D9,$E6,$99
            .byte $66,$99,$66,$99,$66,$9B,$6C,$B0,$C0,$99,$66,$99,$66,$D9,$36,$0D
            .byte $03,$9B,$6C,$B0,$C0,$00,$00,$00,$00,$D9,$36,$0D,$03,$00,$00,$00
            .byte $00,$99,$66,$99,$66,$99,$66,$99,$66,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$40,$40,$00,$40,$00,$00,$00,$40,$00,$00,$00,$00,$00,$B7,$B7
            .byte $B7,$B6,$BE,$B6,$B6,$B6,$B7,$BF,$BF,$B6,$0C,$04,$BC,$B6,$BC,$96
            .byte $BC,$F4,$FD,$F4,$FD,$F6,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$00,$00,$00,$00,$00,$00,$00,$00,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$AA,$82,$82,$82,$AA,$AA,$AA,$96,$96,$96,$96,$96,$96
            .byte $AA,$AA,$96,$96,$AA,$96,$96,$96,$AA,$AA,$AA,$AB,$AB,$A3,$AF,$B3
            .byte $BF,$FE,$CE,$FA,$FA,$2A,$EA,$AA,$AA,$AA,$AA,$EA,$EA,$FA,$CA,$FE
            .byte $F2,$BC,$BF,$A3,$AF,$AB,$AB,$AA,$AA,$FF,$CF,$FF,$FF,$F3,$FF,$CF
            .byte $FF,$AA,$FF,$F3,$FF,$CF,$FF,$FC,$FF,$FF,$CF,$FF,$FC,$FF,$FF,$FF
            .byte $AA,$FE,$CE,$FE,$FE,$F2,$FE,$CE,$FE,$BF,$8F,$BF,$B3,$BC,$8F,$BF
            .byte $BF,$AA,$AA,$AA,$AA,$AE,$AE,$BE,$BE,$BE,$BE,$BA,$BA,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$AB,$AB,$AF,$AF,$BF,$AA,$AA,$FE,$FA,$FA,$EA,$EA,$AA
            .byte $AA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$14,$41,$55,$41,$14,$00,$00,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$00,$10,$14,$55,$55,$14,$10,$00,$10,$10,$10,$10,$54,$54,$10
            .byte $00,$00,$04,$14,$55,$55,$14,$04,$00,$00,$10,$54,$54,$10,$10,$10
            .byte $10,$AA,$CE,$FE,$FE,$CE,$FE,$3E,$CE,$AA,$BF,$BF,$B3,$8F,$BF,$B3
            .byte $BF,$FE,$3E,$FE,$CE,$FE,$3E,$CE,$AA,$BF,$B3,$BF,$8F,$BF,$B3,$BF
            .byte $AA,$FF,$FF,$FC,$FE,$FF,$FF,$DF,$CF,$C7,$C3,$C1,$C0,$E0,$F0,$FC
            .byte $CF,$C0,$C0,$C0,$F0,$FE,$FF,$FF,$FF,$FF,$FF,$1C,$0C,$06,$86,$C3
            .byte $C3,$E1,$F1,$F8,$7C,$3E,$1E,$07,$03,$F1,$38,$0C,$03,$01,$C2,$FF
            .byte $FF,$FF,$FF,$1F,$1F,$0F,$0F,$0F,$07,$87,$87,$C3,$C3,$63,$23,$17
            .byte $9B,$E7,$D9,$A3,$43,$43,$87,$BF,$FF,$FF,$FF,$F8,$F8,$F0,$F0,$F0
            .byte $E0,$E1,$E1,$C3,$C3,$C6,$C4,$E8,$D9,$E7,$9B,$C5,$C2,$C2,$E1,$FD
            .byte $FF,$FF,$FF,$38,$30,$60,$61,$C3,$C3,$87,$8F,$1F,$3E,$7C,$78,$E0
            .byte $C0,$8F,$1C,$30,$C0,$80,$43,$FF,$FF,$FF,$FF,$3F,$7F,$FF,$FF,$FB
            .byte $F3,$E3,$C3,$83,$03,$07,$0F,$3F,$F3,$03,$03,$03,$0F,$7F,$FF,$FF
            .byte $FF,$FF,$FD,$E1,$C2,$C2,$C5,$9B,$E7,$D9,$E8,$C4,$C6,$C3,$C3,$E1
            .byte $E1,$E0,$F0,$F0,$F0,$F8,$F8,$FF,$FF,$FF,$FF,$43,$80,$C0,$30,$1C
            .byte $8F,$C0,$E0,$78,$7C,$3E,$1F,$8F,$87,$C3,$C3,$61,$60,$30,$38,$FF
            .byte $FF,$FF,$FF,$FF,$7F,$0F,$03,$03,$03,$F3,$3F,$0F,$07,$03,$83,$C3
            .byte $E3,$F3,$FB,$FF,$FF,$7F,$3F,$FF,$FF,$FF,$FF,$FF,$FE,$F0,$C0,$C0
            .byte $C0,$CF,$FC,$F0,$E0,$C0,$C1,$C3,$C7,$CF,$DF,$FF,$FF,$FE,$FC,$FF
            .byte $FF,$FF,$FF,$C2,$01,$03,$0C,$38,$F1,$03,$07,$1E,$3E,$7C,$F8,$F1
            .byte $E1,$C3,$C3,$86,$06,$0C,$1C,$FF,$FF,$FF,$BF,$87,$43,$43,$A3,$D9
            .byte $E7,$9B,$17,$23,$63,$C3,$C3,$87,$87,$05,$0F,$0F,$0F,$1F,$1F,$FD
            .byte $FF,$15,$45,$51,$54,$15,$45,$51,$54,$55,$15,$55,$45,$55,$51,$55
            .byte $54,$55,$55,$41,$55,$55,$55,$55,$14,$00,$00,$14,$41,$55,$55,$55
            .byte $55,$54,$55,$45,$45,$45,$45,$55,$54,$55,$55,$55,$55,$55,$55,$55
            .byte $55,$2A,$AA,$A2,$A2,$A2,$A2,$AA,$2A,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$15,$45,$51,$54,$15,$45,$51,$54,$55,$15,$55,$45,$55,$51,$55
            .byte $54,$3C,$42,$40,$40,$40,$42,$3C,$00,$7C,$42,$42,$42,$42,$42,$7C
            .byte $00,$7E,$40,$40,$78,$40,$40,$7E,$00,$7E,$40,$40,$78,$40,$40,$40
            .byte $00,$3C,$42,$40,$4E,$42,$42,$3C,$00,$42,$42,$42,$7E,$42,$42,$42
            .byte $00,$38,$10,$10,$10,$10,$10,$38,$00,$02,$02,$02,$02,$42,$42,$3C
            .byte $00,$44,$48,$50,$60,$50,$48,$44,$00,$40,$40,$40,$40,$40,$40,$7C
            .byte $00,$42,$66,$5A,$42,$42,$42,$42,$00,$42,$62,$52,$4A,$46,$42,$42
            .byte $00,$3C,$42,$42,$42,$42,$42,$3C,$00,$7C,$42,$42,$7C,$40,$40,$40
            .byte $00,$3C,$42,$42,$42,$4A,$46,$3E,$00,$7C,$42,$42,$7C,$48,$44,$42
            .byte $00,$3C,$42,$40,$3C,$02,$42,$3C,$00,$7F,$08,$08,$08,$08,$08,$08
            .byte $00,$42,$42,$42,$42,$42,$42,$3C,$00,$42,$42,$42,$42,$42,$24,$18
            .byte $00,$42,$42,$42,$42,$5A,$66,$42,$00,$42,$42,$24,$18,$24,$42,$42
            .byte $00,$42,$42,$24,$18,$08,$10,$20,$00,$7E,$02,$04,$08,$10,$20,$7E
            .byte $00,$3C,$42,$62,$52,$4A,$46,$3C,$00,$08,$18,$08,$08,$08,$08,$1C
            .byte $00,$3C,$42,$02,$3C,$40,$40,$7E,$00,$3C,$42,$02,$1C,$02,$42,$3C
            .byte $00,$04,$0C,$14,$24,$7E,$04,$04,$00,$7E,$40,$7C,$02,$02,$42,$3C
            .byte $00,$3C,$42,$40,$7C,$42,$42,$3C,$00,$7E,$02,$04,$08,$10,$10,$10
            .byte $00,$3C,$42,$42,$3C,$42,$42,$3C,$00,$3C,$42,$42,$3E,$02,$42,$3C
            .byte $00,$00,$18,$18,$00,$00,$18,$18,$00,$28,$28,$28,$28,$28,$28,$28
            .byte $27,$9C,$60,$23,$10,$0E,$04,$02,$01,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$AA,$82,$82,$82,$AA,$AA,$AA,$96,$96,$96,$96,$96,$96
            .byte $AA,$AA,$96,$96,$AA,$96,$96,$96,$AA,$AA,$AA,$AB,$AB,$A3,$AF,$B3
            .byte $BF,$FE,$CE,$FA,$FA,$2A,$EA,$AA,$AA,$AA,$AA,$EA,$EA,$FA,$CA,$FE
            .byte $F2,$BC,$BF,$A3,$AF,$AB,$AB,$AA,$AA,$FF,$CF,$FF,$FF,$F3,$FF,$CF
            .byte $FF,$AA,$FF,$F3,$FF,$CF,$FF,$FC,$FF,$FF,$CF,$FF,$FC,$FF,$FF,$FF
            .byte $AA,$FE,$CE,$FE,$FE,$F2,$FE,$CE,$FE,$BF,$8F,$BF,$B3,$BC,$8F,$BF
            .byte $BF,$AA,$AA,$AA,$AA,$AE,$AE,$BE,$BE,$BE,$BE,$BA,$BA,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$AB,$AB,$AF,$AF,$BF,$AA,$AA,$FE,$FA,$FA,$EA,$EA,$AA
            .byte $AA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$14,$41,$55,$41,$14,$00,$00,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$00,$10,$14,$55,$55,$14,$10,$00,$10,$10,$10,$10,$54,$54,$10
            .byte $00,$00,$04,$14,$55,$55,$14,$04,$00,$00,$10,$54,$54,$10,$10,$10
            .byte $10,$AA,$CE,$FE,$FE,$CE,$FE,$3E,$CE,$AA,$BF,$BF,$B3,$8F,$BF,$B3
            .byte $BF,$FE,$3E,$FE,$CE,$FE,$3E,$CE,$AA,$BF,$B3,$BF,$8F,$BF,$B3,$BF
            .byte $AA,$FF,$FF,$FC,$FE,$FF,$FF,$DF,$CF,$C7,$C3,$C1,$C0,$E0,$F0,$FC
            .byte $CF,$C0,$C0,$C0,$F0,$FE,$FF,$FF,$FF,$FF,$FF,$1C,$0C,$06,$86,$C3
            .byte $C3,$E1,$F1,$F8,$7C,$3E,$1E,$07,$03,$F1,$38,$0C,$03,$01,$C2,$FF
            .byte $FF,$FF,$FF,$1F,$1F,$0F,$0F,$0F,$07,$87,$87,$C3,$C3,$63,$23,$17
            .byte $9B,$E7,$D9,$A3,$43,$43,$87,$BF,$FF,$FF,$FF,$F8,$F8,$F0,$F0,$F0
            .byte $E0,$E1,$E1,$C3,$C3,$C6,$C4,$E8,$D9,$E7,$9B,$C5,$C2,$C2,$E1,$FD
            .byte $FF,$FF,$FF,$38,$30,$60,$61,$C3,$C3,$87,$8F,$1F,$3E,$7C,$78,$E0
            .byte $C0,$8F,$1C,$30,$C0,$80,$43,$FF,$FF,$FF,$FF,$3F,$7F,$FF,$FF,$FB
            .byte $F3,$E3,$C3,$83,$03,$07,$0F,$3F,$F3,$03,$03,$03,$0F,$7F,$FF,$FF
            .byte $FF,$FF,$FD,$E1,$C2,$C2,$C5,$9B,$E7,$D9,$E8,$C4,$C6,$C3,$C3,$E1
            .byte $E1,$E0,$F0,$F0,$F0,$F8,$F8,$FF,$FF,$FF,$FF,$43,$80,$C0,$30,$1C
            .byte $8F,$C0,$E0,$78,$7C,$3E,$1F,$8F,$87,$C3,$C3,$61,$60,$30,$38,$FF
            .byte $FF,$FF,$FF,$FF,$7F,$0F,$03,$03,$03,$F3,$3F,$0F,$07,$03,$83,$C3
            .byte $E3,$F3,$FB,$FF,$FF,$7F,$3F,$FF,$FF,$FF,$FF,$FF,$FE,$F0,$C0,$C0
            .byte $C0,$CF,$FC,$F0,$E0,$C0,$C1,$C3,$C7,$CF,$DF,$FF,$FF,$FE,$FC,$FF
            .byte $FF,$FF,$FF,$C2,$01,$03,$0C,$38,$F1,$03,$07,$1E,$3E,$7C,$F8,$F1
            .byte $E1,$C3,$C3,$86,$06,$0C,$1C,$FF,$FF,$FF,$BF,$87,$43,$43,$A3,$D9
            .byte $E7,$9B,$17,$23,$63,$C3,$C3,$87,$87,$05,$0F,$0F,$0F,$1F,$1F,$FD
            .byte $FF,$15,$45,$51,$54,$15,$45,$51,$54,$55,$15,$55,$45,$55,$51,$55
            .byte $54,$55,$55,$41,$55,$55,$55,$55,$14,$00,$00,$14,$41,$55,$55,$55
            .byte $55,$54,$55,$45,$45,$45,$45,$55,$54,$55,$55,$55,$55,$55,$55,$55
            .byte $55,$2A,$AA,$A2,$A2,$A2,$A2,$AA,$2A,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$15,$45,$51,$54,$15,$45,$51,$54,$55,$15,$55,$45,$55,$51,$55
            .byte $54,$3C,$42,$40,$40,$40,$42,$3C,$00,$7C,$42,$42,$42,$42,$42,$7C
            .byte $00,$7E,$40,$40,$78,$40,$40,$7E,$00,$7E,$40,$40,$78,$40,$40,$40
            .byte $00,$3C,$42,$40,$4E,$42,$42,$3C,$00,$42,$42,$42,$7E,$42,$42,$42
            .byte $00,$38,$10,$10,$10,$10,$10,$38,$00,$02,$02,$02,$02,$42,$42,$3C
            .byte $00,$44,$48,$50,$60,$50,$48,$44,$00,$40,$40,$40,$40,$40,$40,$7C
            .byte $00,$42,$66,$5A,$42,$42,$42,$42,$00,$42,$62,$52,$4A,$46,$42,$42
            .byte $00,$3C,$42,$42,$42,$42,$42,$3C,$00,$7C,$42,$42,$7C,$40,$40,$40
            .byte $00,$3C,$42,$42,$42,$4A,$46,$3E,$00,$7C,$42,$42,$7C,$48,$44,$42
            .byte $00,$3C,$42,$40,$3C,$02,$42,$3C,$00,$7F,$08,$08,$08,$08,$08,$08
            .byte $00,$42,$42,$42,$42,$42,$42,$3C,$00,$42,$42,$42,$42,$42,$24,$18
            .byte $00,$42,$42,$42,$42,$5A,$66,$42,$00,$42,$42,$24,$18,$24,$42,$42
            .byte $00,$42,$42,$24,$18,$08,$10,$20,$00,$7E,$02,$04,$08,$10,$20,$7E
            .byte $00,$3C,$42,$62,$52,$4A,$46,$3C,$00,$08,$18,$08,$08,$08,$08,$1C
            .byte $00,$3C,$42,$02,$3C,$40,$40,$7E,$00,$3C,$42,$02,$1C,$02,$42,$3C
            .byte $00,$04,$0C,$14,$24,$7E,$04,$04,$00,$7E,$40,$7C,$02,$02,$42,$3C
            .byte $00,$3C,$42,$40,$7C,$42,$42,$3C,$00,$7E,$02,$04,$08,$10,$10,$10
            .byte $00,$3C,$42,$42,$3C,$42,$42,$3C,$00,$3C,$42,$42,$3E,$02,$42,$3C
            .byte $00,$00,$18,$18,$00,$00,$18,$18,$00,$28,$28,$28,$28,$28,$28,$28
            .byte $27,$9C,$60,$23,$10,$0E,$04,$02,$01,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00

* = $4000

l_4000
                    LDX #$1F                        ; (4000) Set X to #$1F (31 / 00011111)

l_4002
                    JSR l_49C0                      ; (4002) Jump to Subroutine at $49C0

l_4005
                    DEX                             ; (4005) Decrement X
                    BPL l_4002                      ; (4006) Branch to $4002 if positive
                    DEX                             ; (4008) Decrement X
                    BPL l_4005                      ; (4009) Branch to $4005 if positive
                    NOP                             ; (400B) No operation
                    NOP                             ; (400C) No operation
                    NOP                             ; (400D) No operation
                    NOP                             ; (400E) No operation
                    NOP                             ; (400F) No operation
                    NOP                             ; (4010) No operation
                    NOP                             ; (4011) No operation
                    NOP                             ; (4012) No operation
                    NOP                             ; (4013) No operation
                    NOP                             ; (4014) No operation
                    NOP                             ; (4015) No operation
                    NOP                             ; (4016) No operation
                    NOP                             ; (4017) No operation
                    NOP                             ; (4018) No operation
                    NOP                             ; (4019) No operation
                    NOP                             ; (401A) No operation
                    NOP                             ; (401B) No operation
                    NOP                             ; (401C) No operation
                    NOP                             ; (401D) No operation
                    NOP                             ; (401E) No operation
                    NOP                             ; (401F) No operation
                    NOP                             ; (4020) No operation
                    NOP                             ; (4021) No operation
                    NOP                             ; (4022) No operation
                    NOP                             ; (4023) No operation
                    NOP                             ; (4024) No operation
                    LDA $DD0E                       ; (4025) Load A with $DD0E
                    AND #$FE                        ; (4028) Logical AND with Accumulator and #$FE (254 / 11111110)
                    STA $DD0E                       ; (402A) Store A to $DD0E
                    LDA TimerAControl               ; (402D) Load A with $DC0E
                    AND #$FE                        ; (4030) Logical AND with Accumulator and #$FE (254 / 11111110)
                    STA TimerAControl               ; (4032) Store A to $DC0E
                    LDA #$04                        ; (4035) Set A to #$04 (4 / 00000100)
                    STA $033E                       ; (4037) Store A to $033E
                    LDA #$01                        ; (403A) Set A to #$01 (1 / 00000001)
                    STA $033F                       ; (403C) Store A to $033F
                    STA $6840                       ; (403F) Store A to $6840
                    STA $68C0                       ; (4042) Store A to $68C0
                    LDA #$FA                        ; (4045) Set A to #$FA (250 / 11111010)
                    STA $6800                       ; (4047) Store A to $6800
                    STA $6880                       ; (404A) Store A to $6880
                    LDA #$0F                        ; (404D) Set A to #$0F (15 / 00001111)
                    STA $D418                       ; (404F) Store A to $D418
                    NOP                             ; (4052) No operation
                    NOP                             ; (4053) No operation
                    NOP                             ; (4054) No operation
                    NOP                             ; (4055) No operation
                    NOP                             ; (4056) No operation
                    NOP                             ; (4057) No operation
                    NOP                             ; (4058) No operation
                    NOP                             ; (4059) No operation
                    NOP                             ; (405A) No operation
                    NOP                             ; (405B) No operation
                    NOP                             ; (405C) No operation
                    NOP                             ; (405D) No operation
                    NOP                             ; (405E) No operation
                    NOP                             ; (405F) No operation
                    NOP                             ; (4060) No operation
                    NOP                             ; (4061) No operation
                    NOP                             ; (4062) No operation
                    NOP                             ; (4063) No operation
                    NOP                             ; (4064) No operation
                    NOP                             ; (4065) No operation
                    JSR l_4F00                      ; (4066) Jump to Subroutine at $4F00
                    NOP                             ; (4069) No operation
                    NOP                             ; (406A) No operation
                    LDA #$00                        ; (406B) Set A to #$00 (0 / 00000000)
                    STA $02E1                       ; (406D) Store A to $02E1
                    STA EndGameFlag                       ; (4070) Store A to $0313
                    LDA #$30                        ; (4073) Set A to #$30 (48 / 00110000)
                    STA SpriteEnableRegister        ; (4075) Store A to $D015
                    LDA #$01                        ; (4078) Set A to #$01 (1 / 00000001)
                    STA Sprite4Colour               ; (407A) Store A to $D02B
                    STA Sprite5Colour               ; (407D) Store A to $D02C
                    LDA #$5E                        ; (4080) Set A to #$5E (94 / 01011110)
                    STA Sprite4_X                   ; (4082) Store A to $D008
                    LDA #$75                        ; (4085) Set A to #$75 (117 / 01110101)
                    STA Sprite5_X                   ; (4087) Store A to $D00A
                    LDA #$75                        ; (408A) Set A to #$75 (117 / 01110101)
                    STA Sprite4_Y                   ; (408C) Store A to $D009
                    STA Sprite5_Y                   ; (408F) Store A to $D00B
                    LDA SpriteSpriteCollision       ; (4092) Load A with $D01E
                    LDA SpriteBackgroundCollision   ; (4095) Load A with $D01F
                    LDY #$A1                        ; (4098) Load Y with #$A1 (161 / 10100001)
                    STY $07FD                       ; (409A) Store Y Register $07FD
                    DEY                             ; (409D) Decrement Y Register
                    STY $07FC                       ; (409E) Store Y Register $07FC
                    LDY #$00                        ; (40A1) Load Y with #$00 (0 / 00000000)

l_40A3
                    LDA $6800,Y                     ; (40A3) Load A with $6800,Y
                    STA MaydayXMap,Y                     ; (40A6) Set $6900,Y to A
                    INY                             ; (40A9) Increment Y Register
                    BNE l_40A3                      ; (40AA) Branch to $40A3 if Not Equal
                    LDA #$07                        ; (40AC) Set A to #$07 (7 / 00000111)
                    STA ExtraSpriteColor1           ; (40AE) Store A to $D025
                    LDA #$02                        ; (40B1) Set A to #$02 (2 / 00000010)
                    STA ExtraSpriteColor2           ; (40B3) Store A to $D026
                    LDA #$0E                        ; (40B6) Set A to #$0E (14 / 00001110)
                    STA Sprite7Colour               ; (40B8) Store A to $D02E
                    LDA #$01                        ; (40BB) Set A to #$01 (1 / 00000001)
                    STA Sprite4Colour               ; (40BD) Store A to $D02B
                    STA Sprite5Colour               ; (40C0) Store A to $D02C
                    LDA VIC2MemSetup                ; (40C3) Load A with $D018
                    AND #$F0                        ; (40C6) Logical AND with Accumulator and #$F0 (240 / 11110000)
                    ORA #$0E                        ; (40C8) Logical OR with Accumulator and #$0E (14 / 00001110)
                    STA VIC2MemSetup                ; (40CA) Store A to $D018
                    LDA #$06                        ; (40CD) Set A to #$06 (6 / 00000110)
                    STA BorderColour                ; (40CF) Store A to $D020
                    LDA #$0B                        ; (40D2) Set A to #$0B (11 / 00001011)
                    STA BackgroundColour            ; (40D4) Store A to $D021
                    LDA ScreenControl               ; (40D7) Load A with $D016
                    ORA #$10                        ; (40DA) Logical OR with Accumulator and #$10 (16 / 00010000)
                    STA ScreenControl               ; (40DC) Store A to $D016
                    LDA ProgrammableLogicArray      ; (40DF) Load A with $01
                    AND #$FE                        ; (40E1) Logical AND with Accumulator and #$FE (254 / 11111110)
                    STA ProgrammableLogicArray      ; (40E3) Store A to $01
                    LDA #$00                        ; (40E5) Set A to #$00 (0 / 00000000)
                    STA MaydayLanded                ; (40E7) Store A to $02FE
                    STA $02FF                       ; (40EA) Store A to $02FF
                    JSR l_4140                      ; (40ED) Jump to Subroutine at $4140
                    LDY #$34                        ; (40F0) Load Y with #$34 (52 / 00110100)

l_40F2
                    LDA $8300,Y                     ; (40F2) Load A with $8300,Y
                    STA $0300,Y                     ; (40F5) Set $0300,Y to A
                    INY                             ; (40F8) Increment Y Register
                    BNE l_40F2                      ; (40F9) Branch to $40F2 if Not Equal
                    RTS                             ; (40FB) Return from Subroutine

* = $40FC
            .byte $60,$60,$60,$60,$FF,$00,$FD,$00,$FF,$FF,$FF,$00,$FD,$00,$FF,$FF
            .byte $FF,$FF,$FF,$00,$FD,$00,$FF,$00,$FF,$FF,$FF,$FF,$FF,$02,$FF,$00
            .byte $FF,$00,$FF,$40,$FD,$08,$FF,$00,$FF,$20,$FF,$00,$FF,$F3,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$FF,$00

* = $4140

l_4140
                    LDY #$04                        ; (4140) Load Y with #$04 (4 / 00000100)

l_4142
                    LDA $4152,Y                     ; (4142) Load A with $4152,Y
                    STA $9EEF,Y                     ; (4145) Set $9EEF,Y to A
                    LDA $4157,Y                     ; (4148) Load A with $4157,Y
                    STA $9FFC,Y                     ; (414B) Set $9FFC,Y to A
                    DEY                             ; (414E) Decrement Y Register
                    BPL l_4142                      ; (414F) Branch to $4142 if positive
                    RTS                             ; (4151) Return from Subroutine

* = $4152
            .byte $00,$00,$00,$01,$01,$05,$09,$09,$09,$09,$09,$00,$5F,$00,$A9,$03
            .byte $8D,$E0,$02,$4C,$30,$4F,$FF,$B1,$FF,$FF,$FF,$00,$FF,$00

* = $4170

l_4170
                    LDX #$00                        ; (4170) Set X to #$00 (0 / 00000000)
                    INC $0399                       ; (4172) Increment Memory $0399
                    LDA $0399                       ; (4175) Load A with $0399
                    CMP #$3C                        ; (4178) Subtract #$3C from A (60 / 00111100)
                    BCC l_41E0                      ; (417A) Branch to $41E0 if Carry Clear
                    STX $0399                       ; (417C) Store X Register $0399
                    INC $0397                       ; (417F) Increment Memory $0397
                    LDA $0397                       ; (4182) Load A with $0397
                    CMP #$0A                        ; (4185) Subtract #$0A from A (10 / 00001010)
                    BCC l_41E0                      ; (4187) Branch to $41E0 if Carry Clear
                    STX $0397                       ; (4189) Store X Register $0397
                    INC $0396                       ; (418C) Increment Memory $0396
                    LDA $0396                       ; (418F) Load A with $0396
                    CMP #$06                        ; (4192) Subtract #$06 from A (6 / 00000110)
                    BCC l_41E0                      ; (4194) Branch to $41E0 if Carry Clear
                    STX $0396                       ; (4196) Store X Register $0396
                    INC $0394                       ; (4199) Increment Memory $0394
                    LDA $0394                       ; (419C) Load A with $0394
                    CMP #$0A                        ; (419F) Subtract #$0A from A (10 / 00001010)
                    BCC l_41E0                      ; (41A1) Branch to $41E0 if Carry Clear
                    STX $0394                       ; (41A3) Store X Register $0394
                    INC $0393                       ; (41A6) Increment Memory $0393
                    LDA $0393                       ; (41A9) Load A with $0393
                    CMP #$06                        ; (41AC) Subtract #$06 from A (6 / 00000110)
                    BCC l_41E0                      ; (41AE) Branch to $41E0 if Carry Clear
                    STX $0393                       ; (41B0) Store X Register $0393
                    INC $0391                       ; (41B3) Increment Memory $0391
                    LDA $0391                       ; (41B6) Load A with $0391
                    CMP #$0A                        ; (41B9) Subtract #$0A from A (10 / 00001010)
                    BCC l_41C3                      ; (41BB) Branch to $41C3 if Carry Clear
                    STX $0391                       ; (41BD) Store X Register $0391
                    INC $0390                       ; (41C0) Increment Memory $0390

l_41C3
                    LDA $0391                       ; (41C3) Load A with $0391
                    CMP #$04                        ; (41C6) Subtract #$04 from A (4 / 00000100)
                    BCC l_41E0                      ; (41C8) Branch to $41E0 if Carry Clear
                    LDA $0390                       ; (41CA) Load A with $0390
                    CMP #$02                        ; (41CD) Subtract #$02 from A (2 / 00000010)
                    BCC l_41E0                      ; (41CF) Branch to $41E0 if Carry Clear
                    NOP                             ; (41D1) No operation
                    NOP                             ; (41D2) No operation
                    NOP                             ; (41D3) No operation
                    NOP                             ; (41D4) No operation
                    NOP                             ; (41D5) No operation
                    NOP                             ; (41D6) No operation
                    NOP                             ; (41D7) No operation
                    NOP                             ; (41D8) No operation
                    NOP                             ; (41D9) No operation
                    STX $0390                       ; (41DA) Store X Register $0390
                    STX $0391                       ; (41DD) Store X Register $0391

l_41E0
                    LDY #$00                        ; (41E0) Load Y with #$00 (0 / 00000000)

l_41E2
                    CLC                             ; (41E2) Clear Carry Flag
                    LDA $0390,Y                     ; (41E3) Load A with $0390,Y
                    ADC #$64                        ; (41E6) Add with Carry with #$64 (100 / 01100100)
                    STA $05A6,Y                     ; (41E8) Set $05A6,Y to A
                    INY                             ; (41EB) Increment Y Register
                    CPY #$08                        ; (41EC) Subtract #$08 from Y (8 / 00001000)
                    BNE l_41E2                      ; (41EE) Branch to $41E2 if Not Equal
                    RTS                             ; (41F0) Return from Subroutine

* = $41F1
            .byte $60,$60,$60,$60,$60,$60,$60,$60,$EA,$EA,$EA,$EA,$EA,$EA,$FF

* = $4200

l_4200
                    PHA                             ; (4200) Push Accumulator to Stack
                    LDA #$00                        ; (4201) Set A to #$00 (0 / 00000000)
                    BCC l_4207                      ; (4203) Branch to $4207 if Carry Clear
                    ADC #$00                        ; (4205) Add with Carry with #$00 (0 / 00000000)

l_4207
                    STA $02                         ; (4207) Store A to $02
                    STX $AF                         ; (4209) Store X to $AF
                    STY $AC                         ; (420B) Store Y Register $AC
                    PLA                             ; (420D) Pull Accumulator from Stack
                    TAX                             ; (420E) Transfer A to X
                    PHA                             ; (420F) Push Accumulator to Stack
                    LDA #$00                        ; (4210) Set A to #$00 (0 / 00000000)
                    TAY                             ; (4212) Transfer A to Y
                    SEC                             ; (4213) Set Carry Flag

l_4214
                    ROL A                           ; (4214) Rotate Left Accumulator
                    INY                             ; (4215) Increment Y Register
                    INY                             ; (4216) Increment Y Register
                    DEX                             ; (4217) Decrement X
                    BNE l_4214                      ; (4218) Branch to $4214 if Not Equal
                    STA $FB                         ; (421A) Store A to $FB
                    STY $FC                         ; (421C) Store Y Register $FC
                    PLA                             ; (421E) Pull Accumulator from Stack
                    PHA                             ; (421F) Push Accumulator to Stack
                    TAX                             ; (4220) Transfer A to X
                    LDA $AE                         ; (4221) Load A with $AE
                    STA $07F7,X                     ; (4223) Store A to $07F7,X
                    LDY $FC                         ; (4226) Load Y with Data from $FC
                    LDA $AF                         ; (4228) Load A with $AF
                    STA $CFFE,Y                     ; (422A) Set $CFFE,Y to A
                    INY                             ; (422D) Increment Y Register
                    LDA $AC                         ; (422E) Load A with $AC
                    STA $CFFE,Y                     ; (4230) Set $CFFE,Y to A
                    LDA $02                         ; (4233) Load A with $02
                    BEQ l_423F                      ; (4235) Branch to $423F if Equal
                    LDA Sprite_upper_X              ; (4237) Load A with $D010
                    ORA $FB                         ; (423A) Logical OR with Accumulator $FB
                    JMP l_4246                      ; (423C) Jump to $4246

l_423F
                    LDA #$FF                        ; (423F) Set A to #$FF (255 / 11111111)
                    EOR $FB                         ; (4241) Exclusive OR (XOR) with Accumulator $FB
                    AND Sprite_upper_X              ; (4243) Logical AND with Accumulator $D010

l_4246
                    STA Sprite_upper_X              ; (4246) Store A to $D010
                    LDA $FB                         ; (4249) Load A with $FB
                    ORA SpriteEnableRegister        ; (424B) Logical OR with Accumulator and $D015
                    STA SpriteEnableRegister        ; (424E) Store A to $D015
                    PLA                             ; (4251) Pull Accumulator from Stack
                    RTS                             ; (4252) Return from Subroutine

* = $4253
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA

* = $4260

l_4260
                    LDY #$00                        ; (4260) Load Y with #$00 (0 / 00000000)
                    LDX #$00                        ; (4262) Set X to #$00 (0 / 00000000)
                    SEC                             ; (4264) Set Carry Flag
                    LDA $0346                       ; (4265) Load A with $0346
                    BNE l_427F                      ; (4268) Branch to $427F if Not Equal
                    LDA KeyJoy2                     ; (426A) Load A with $DC00
                    NOP                             ; (426D) No operation
                    LSR A                           ; (426E) Logical Shift Right Accumulator
                    BCS l_4272                      ; (426F) Branch if Carry Set $4272
                    DEY                             ; (4271) Decrement Y Register

l_4272
                    LSR A                           ; (4272) Logical Shift Right Accumulator
                    BCS l_4276                      ; (4273) Branch if Carry Set $4276
                    INY                             ; (4275) Increment Y Register

l_4276
                    LSR A                           ; (4276) Logical Shift Right Accumulator
                    BCS l_427A                      ; (4277) Branch if Carry Set $427A
                    DEX                             ; (4279) Decrement X

l_427A
                    LSR A                           ; (427A) Logical Shift Right Accumulator
                    BCS l_427E                      ; (427B) Branch if Carry Set $427E
                    INX                             ; (427D) Increment X

l_427E
                    LSR A                           ; (427E) Logical Shift Right Accumulator

l_427F
                    STX $FE                         ; (427F) Store X to $FE
                    STY $FD                         ; (4281) Store Y Register $FD
                    LDX #$00                        ; (4283) Set X to #$00 (0 / 00000000)
                    BCS l_4288                      ; (4285) Branch if Carry Set $4288
                    INX                             ; (4287) Increment X

l_4288
                    STX $02                         ; (4288) Store X to $02
                    RTS                             ; (428A) Return from Subroutine

* = $428B
            .byte $FF,$FF,$FF,$FF,$FF

* = $4290

l_4290
                    LDX #$0F                        ; (4290) Set X to #$0F (15 / 00001111)

l_4292
                    LDA MaydayXMap,X                     ; (4292) Load A with $6900,X
                    SEC                             ; (4295) Set Carry Flag
                    SBC $0338                       ; (4296) Subtract with Carry $0338
                    STA $AD                         ; (4299) Store A to $AD
                    LDA $6940,X                     ; (429B) Load A with $6940,X
                    SBC $0339                       ; (429E) Subtract with Carry $0339
                    STA $AF                         ; (42A1) Store A to $AF
                    BEQ l_42AF                      ; (42A3) Branch to $42AF if Equal
                    CMP #$01                        ; (42A5) Subtract #$01 from A (1 / 00000001)
                    BNE l_431E                      ; (42A7) Branch to $431E if Not Equal
                    LDA $AD                         ; (42A9) Load A with $AD
                    CMP #$40                        ; (42AB) Subtract #$40 from A (64 / 01000000)
                    BCS l_431E                      ; (42AD) Branch if Carry Set $431E

l_42AF
                    LDA MaydayYMap,X                     ; (42AF) Load A with $6980,X
                    SEC                             ; (42B2) Set Carry Flag
                    SBC $033A                       ; (42B3) Subtract with Carry $033A
                    STA $FD                         ; (42B6) Store A to $FD
                    LDA $69C0,X                     ; (42B8) Load A with $69C0,X
                    SBC $033B                       ; (42BB) Subtract with Carry $033B
                    BNE l_431E                      ; (42BE) Branch to $431E if Not Equal
                    LDA $FD                         ; (42C0) Load A with $FD
                    CMP #$70                        ; (42C2) Subtract #$70 from A (112 / 01110000)
                    BCS l_431E                      ; (42C4) Branch if Carry Set $431E
                    LDA $6910,X                     ; (42C6) Load A with $6910,X
                    TAY                             ; (42C9) Transfer A to Y
                    BMI l_42E7                      ; (42CA) Branch to $42E7 if minus 
                    AND #$40                        ; (42CC) Logical AND with Accumulator and #$40 (64 / 01000000)
                    BNE l_4317                      ; (42CE) Branch to $4317 if Not Equal
                    TYA                             ; (42D0) Transfer Y to A
                    AND #$07                        ; (42D1) Logical AND with Accumulator and #$07 (7 / 00000111)
                    TAY                             ; (42D3) Transfer A to Y
                    LDA $03C8,Y                     ; (42D4) Load A with $03C8,Y
                    AND SpriteEnableRegister        ; (42D7) Logical AND with Accumulator $D015
                    BEQ l_42E7                      ; (42DA) Branch to $42E7 if Equal
                    LDA $6910,X                     ; (42DC) Load A with $6910,X
                    ORA #$40                        ; (42DF) Logical OR with Accumulator and #$40 (64 / 01000000)
                    STA $6910,X                     ; (42E1) Store A to $6910,X
                    JMP l_4317                      ; (42E4) Jump to $4317

l_42E7
                    LDA $6910,X                     ; (42E7) Load A with $6910,X
                    ORA #$80                        ; (42EA) Logical OR with Accumulator and #$80 (128 / 10000000)
                    STA $6910,X                     ; (42EC) Store A to $6910,X
                    AND #$07                        ; (42EF) Logical AND with Accumulator and #$07 (7 / 00000111)
                    STA $02                         ; (42F1) Store A to $02
                    INC $02                         ; (42F3) Increment Memory $02
                    LDA MaydaySpritePointer,X       ; (42F5) Load A with $6920,X
                    STA $AE                         ; (42F8) Store A to $AE
                    TXA                             ; (42FA) Transfer X to A
                    PHA                             ; (42FB) Push Accumulator to Stack
                    LDA $FD                         ; (42FC) Load A with $FD
                    CLC                             ; (42FE) Clear Carry Flag
                    ADC #$90                        ; (42FF) Add with Carry with #$90 (144 / 10010000)
                    TAY                             ; (4301) Transfer A to Y
                    CLC                             ; (4302) Clear Carry Flag
                    LDA $AD                         ; (4303) Load A with $AD
                    ADC #$07                        ; (4305) Add with Carry with #$07 (7 / 00000111)
                    TAX                             ; (4307) Transfer A to X
                    LDA $AF                         ; (4308) Load A with $AF
                    ADC #$00                        ; (430A) Add with Carry with #$00 (0 / 00000000)
                    CLC                             ; (430C) Clear Carry Flag
                    BEQ l_4310                      ; (430D) Branch to $4310 if Equal
                    SEC                             ; (430F) Set Carry Flag

l_4310
                    LDA $02                         ; (4310) Load A with $02
                    JSR l_4200                      ; (4312) Jump to Subroutine at $4200
                    PLA                             ; (4315) Pull Accumulator from Stack
                    TAX                             ; (4316) Transfer A to X

l_4317
                    DEX                             ; (4317) Decrement X
                    BMI l_431D                      ; (4318) Branch to $431D if minus 
                    JMP l_4292                      ; (431A) Jump to $4292

l_431D
                    RTS                             ; (431D) Return from Subroutine

l_431E
                    LDA $6910,X                     ; (431E) Load A with $6910,X
                    TAY                             ; (4321) Transfer A to Y
                    BMI l_4357                      ; (4322) Branch to $4357 if minus 

l_4324
                    AND #$10                        ; (4324) Logical AND with Accumulator and #$10 (16 / 00010000)
                    BNE l_4330                      ; (4326) Branch to $4330 if Not Equal
                    JMP l_4375                      ; (4328) Jump to $4375

* = $432B
            .byte $EA,$EA,$EA,$EA,$EA

* = $4330

l_4330
                    LDA $6800,X                     ; (4330) Load A with $6800,X
                    STA MaydayXMap,X                ; (4333) Store A to $6900,X
                    LDA $6840,X                     ; (4336) Load A with $6840,X
                    STA $6940,X                     ; (4339) Store A to $6940,X
                    LDA $6880,X                     ; (433C) Load A with $6880,X
                    STA MaydayYMap,X                ; (433F) Store A to $6980,X
                    LDA $68C0,X                     ; (4342) Load A with $68C0,X
                    STA $69C0,X                     ; (4345) Store A to $69C0,X
                    LDA $6820,X                     ; (4348) Load A with $6820,X
                    STA MaydaySpritePointer,X       ; (434B) Store A to $6920,X
                    LDA $6830,X                     ; (434E) Load A with $6830,X
                    STA $6930,X                     ; (4351) Store A to $6930,X
                    JMP l_4375                      ; (4354) Jump to $4375

l_4357
                    LDA $6910,X                     ; (4357) Load A with $6910,X
                    AND #$07                        ; (435A) Logical AND with Accumulator and #$07 (7 / 00000111)
                    TAY                             ; (435C) Transfer A to Y
                    LDA $03C0,Y                     ; (435D) Load A with $03C0,Y
                    AND SpriteEnableRegister        ; (4360) Logical AND with Accumulator $D015
                    STA SpriteEnableRegister        ; (4363) Store A to $D015
                    LDA $03C0,Y                     ; (4366) Load A with $03C0,Y
                    AND SpriteMulticolor            ; (4369) Logical AND with Accumulator $D01C
                    STA SpriteMulticolor            ; (436C) Store A to $D01C
                    LDA $6910,Y                     ; (436F) Load A with $6910,Y
                    JMP l_4324                      ; (4372) Jump to $4324

l_4375
                    LDA $6910,X                     ; (4375) Load A with $6910,X
                    AND #$07                        ; (4378) Logical AND with Accumulator and #$07 (7 / 00000111)
                    STA $6910,X                     ; (437A) Store A to $6910,X
                    JMP l_4317                      ; (437D) Jump to $4317

* = $4380
            .byte $01,$FF,$15,$FF,$00,$00,$19,$20,$21,$5D,$00,$05,$59,$79,$00,$00
            .byte $00,$5C,$00,$5D,$00,$0D,$00,$0D,$00,$5D,$00,$4D,$00,$ED,$0D,$FD
            .byte $A0,$00,$B9,$00,$5A,$40,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00

* = $43B0
                    LDA #$03                        ; (43B0) Set A to #$03 (3 / 00000011)
                    STA $02E0                       ; (43B2) Store A to $02E0
                    LDA #$B0                        ; (43B5) Set A to #$B0 (176 / 10110000)
                    STA $0316                       ; (43B7) Store A to $0316
                    STA $0318                       ; (43BA) Store A to $0318
                    STA $0304                       ; (43BD) Store A to $0304
                    LDA #$43                        ; (43C0) Set A to #$43 (67 / 01000011)
                    STA $0317                       ; (43C2) Store A to $0317
                    STA $0319                       ; (43C5) Store A to $0319
                    LDA #$00                        ; (43C8) Set A to #$00 (0 / 00000000)
                    STA $D418                       ; (43CA) Store A to $D418
                    JMP l_43D0                      ; (43CD) Jump to $43D0

l_43D0
                    LDX #$FF                        ; (43D0) Set X to #$FF (255 / 11111111)
                    SEI                             ; (43D2) Set Interrupt Disable Flag
                    TXS                             ; (43D3) Transfer X to Stack Pointer
                    CLD                             ; (43D4) Clear Decimal Mode
                    JMP l_4F30                      ; (43D5) Jump to $4F30

* = $43D8
            .byte $18,$D4,$4C,$30,$4F,$FF,$FF,$FF

* = $43E0

l_43E0
                    LDX #$FF                        ; (43E0) Set X to #$FF (255 / 11111111)
                    SEI                             ; (43E2) Set Interrupt Disable Flag
                    TXS                             ; (43E3) Transfer X to Stack Pointer
                    CLD                             ; (43E4) Clear Decimal Mode
                    JMP l_5800                      ; (43E5) Jump to $5800

* = $43E8
            .byte $18,$D4,$4C,$00,$58,$FF,$AE,$FF,$A2,$FF,$78,$9A,$D8,$4C,$30,$4F
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF

* = $4400

l_4400
                    LDA $02E0                       ; (4400) Load A with $02E0
                    AND #$02                        ; (4403) Logical AND with Accumulator and #$02 (2 / 00000010)
                    BEQ l_4425                      ; (4405) Branch to $4425 if Equal
                    LDA #$00                        ; (4407) Set A to #$00 (0 / 00000000)
                    STA Voice3Control               ; (4409) Store A to $D412
                    LDA #$AA                        ; (440C) Set A to #$AA (170 / 10101010)
                    STA Voice3Frequency1            ; (440E) Store A to $D40E
                    LDA #$FA                        ; (4411) Set A to #$FA (250 / 11111010)
                    STA Voice3Frequency2            ; (4413) Store A to $D40F
                    LDA #$09                        ; (4416) Set A to #$09 (9 / 00001001)
                    STA Voice3AttackDecayLength     ; (4418) Store A to $D413
                    LDA #$00                        ; (441B) Set A to #$00 (0 / 00000000)
                    STA Voice3SustainVolRelease     ; (441D) Store A to $D414
                    LDA #$81                        ; (4420) Set A to #$81 (129 / 10000001)
                    STA Voice3Control               ; (4422) Store A to $D412

l_4425
                    RTS                             ; (4425) Return from Subroutine

* = $4426
            .byte $60,$60

* = $4428

l_4428
                    LDA $02E0                       ; (4428) Load A with $02E0
                    AND #$02                        ; (442B) Logical AND with Accumulator and #$02 (2 / 00000010)
                    BEQ l_444D                      ; (442D) Branch to $444D if Equal
                    LDA #$00                        ; (442F) Set A to #$00 (0 / 00000000)
                    STA Voice1Control               ; (4431) Store A to $D404
                    LDA #$AA                        ; (4434) Set A to #$AA (170 / 10101010)
                    STA Voice1Frequency1            ; (4436) Store A to $D400
                    LDA #$04                        ; (4439) Set A to #$04 (4 / 00000100)
                    STA Voice1Frequency2            ; (443B) Store A to $D401
                    LDA #$1C                        ; (443E) Set A to #$1C (28 / 00011100)
                    STA Voice1AttackDecayLength     ; (4440) Store A to $D405
                    LDA #$01                        ; (4443) Set A to #$01 (1 / 00000001)
                    STA Voice1SustainVolRelease     ; (4445) Store A to $D406
                    LDA #$81                        ; (4448) Set A to #$81 (129 / 10000001)
                    STA Voice1Control               ; (444A) Store A to $D404

l_444D
                    RTS                             ; (444D) Return from Subroutine

* = $444E
            .byte $60,$60

* = $4450

l_4450
                    LDA $02E0                       ; (4450) Load A with $02E0
                    AND #$02                        ; (4453) Logical AND with Accumulator and #$02 (2 / 00000010)
                    BEQ l_4475                      ; (4455) Branch to $4475 if Equal
                    LDA #$00                        ; (4457) Set A to #$00 (0 / 00000000)
                    STA Voice3Control               ; (4459) Store A to $D412
                    LDA #$AA                        ; (445C) Set A to #$AA (170 / 10101010)
                    STA Voice3Frequency1            ; (445E) Store A to $D40E
                    LDA #$24                        ; (4461) Set A to #$24 (36 / 00100100)
                    STA Voice3Frequency2            ; (4463) Store A to $D40F
                    LDA #$12                        ; (4466) Set A to #$12 (18 / 00010010)
                    STA Voice3AttackDecayLength     ; (4468) Store A to $D413
                    LDA #$00                        ; (446B) Set A to #$00 (0 / 00000000)
                    STA Voice3SustainVolRelease     ; (446D) Store A to $D414
                    LDA #$61                        ; (4470) Set A to #$61 (97 / 01100001)
                    STA Voice3Control               ; (4472) Store A to $D412

l_4475
                    JMP l_5A66                      ; (4475) Jump to $5A66

* = $4478
            .byte $00,$FF,$00,$50,$00,$FF,$FF,$00

* = $4480

l_4480
                    LDA #$0F                        ; (4480) Set A to #$0F (15 / 00001111)
                    STA $D418                       ; (4482) Store A to $D418
                    STA FilterControl               ; (4485) Store A to $D417
                    LDA #$00                        ; (4488) Set A to #$00 (0 / 00000000)
                    STA Voice1Control               ; (448A) Store A to $D404
                    LDA #$AA                        ; (448D) Set A to #$AA (170 / 10101010)
                    STA Voice1Frequency1            ; (448F) Store A to $D400
                    LDA #$3A                        ; (4492) Set A to #$3A (58 / 00111010)
                    STA Voice1Frequency2            ; (4494) Store A to $D401
                    LDA #$08                        ; (4497) Set A to #$08 (8 / 00001000)
                    STA Voice1AttackDecayLength     ; (4499) Store A to $D405
                    LDA #$07                        ; (449C) Set A to #$07 (7 / 00000111)
                    STA Voice1SustainVolRelease     ; (449E) Store A to $D406
                    LDA #$11                        ; (44A1) Set A to #$11 (17 / 00010001)
                    STA Voice1SustainVolRelease     ; (44A3) Store A to $D406
                    RTS                             ; (44A6) Return from Subroutine

* = $44A7
            .byte $00,$FF,$00,$FF,$00,$FF,$FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$00,$00,$FF,$00,$FB,$E6,$FF,$00,$FF,$00,$FF,$FF,$FF
            .byte $BF,$FF,$00,$FF,$00,$FF,$00,$FF,$50,$FF,$82,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$00,$00,$00,$FF,$FF,$F7,$DF,$FF,$FF,$FF,$00,$FF
            .byte $FF,$FF,$00,$FF,$00,$FF,$00,$EF,$00,$FF,$00,$FF,$02,$FF,$00,$FF
            .byte $04,$FF,$00,$FF,$AF,$FF,$00,$00,$FF

* = $4500

l_4500
                    LDA $0340                       ; (4500) Load A with $0340
                    LSR A                           ; (4503) Logical Shift Right Accumulator
                    AND #$03                        ; (4504) Logical AND with Accumulator and #$03 (3 / 00000011)
                    CLC                             ; (4506) Clear Carry Flag
                    ADC #$00                        ; (4507) Add with Carry with #$00 (0 / 00000000)
                    PHA                             ; (4509) Push Accumulator to Stack
                    LDY #$07                        ; (450A) Load Y with #$07 (7 / 00000111)
                    LDA #$04                        ; (450C) Set A to #$04 (4 / 00000100)

l_450E
                    STA $0576,Y                     ; (450E) Set $0576,Y to A
                    DEY                             ; (4511) Decrement Y Register
                    BPL l_450E                      ; (4512) Branch to $450E if positive
                    LDA $0340                       ; (4514) Load A with $0340
                    CLC                             ; (4517) Clear Carry Flag
                    LSR A                           ; (4518) Logical Shift Right Accumulator
                    LSR A                           ; (4519) Logical Shift Right Accumulator
                    LSR A                           ; (451A) Logical Shift Right Accumulator
                    STA $02                         ; (451B) Store A to $02
                    LDA #$07                        ; (451D) Set A to #$07 (7 / 00000111)
                    SEC                             ; (451F) Set Carry Flag
                    SBC $02                         ; (4520) Subtract with Carry $02
                    TAY                             ; (4522) Transfer A to Y
                    PLA                             ; (4523) Pull Accumulator from Stack
                    STA $0576,Y                     ; (4524) Set $0576,Y to A
                    JMP l_4530                      ; (4527) Jump to $4530

* = $452A
            .byte $EA,$EA,$EA,$EA,$EA,$EA

* = $4530

l_4530
                    LDA DamageCount                       ; (4530) Load A with $03A1
                    LSR A                           ; (4533) Logical Shift Right Accumulator
                    LSR A                           ; (4534) Logical Shift Right Accumulator
                    LSR A                           ; (4535) Logical Shift Right Accumulator
                    TAY                             ; (4536) Transfer A to Y
                    LDA DamageCount                       ; (4537) Load A with $03A1
                    AND #$07                        ; (453A) Logical AND with Accumulator and #$07 (7 / 00000111)
                    CLC                             ; (453C) Clear Carry Flag
                    ADC #$C4                        ; (453D) Add with Carry with #$C4 (196 / 11000100)
                    TAX                             ; (453F) Transfer A to X
                    LDA $4550,Y                     ; (4540) Load A with $4550,Y
                    STA $AE                         ; (4543) Store A to $AE
                    LDA $4558,Y                     ; (4545) Load A with $4558,Y
                    STA $AF                         ; (4548) Store A to $AF
                    LDY #$00                        ; (454A) Load Y with #$00 (0 / 00000000)
                    TXA                             ; (454C) Transfer X to A
                    STA ($AE),Y                     ; (454D) Store Accumulator ($AE),Y
                    RTS                             ; (454F) Return from Subroutine

* = $4550
            .byte $15,$ED,$C5,$9D,$75,$00,$00,$00,$05,$04,$04,$04,$04,$00,$00,$00
            .byte $00,$AF,$96,$BA,$92,$BE,$96,$BF,$96,$06,$86,$97,$96,$02,$02,$8E

* = $4570

l_4570
                    LDA SpriteEnableRegister        ; (4570) Load A with $D015
                    AND #$40                        ; (4573) Logical AND with Accumulator and #$40 (64 / 01000000)
                    BNE l_45AC                      ; (4575) Branch to $45AC if Not Equal
                    CLC                             ; (4577) Clear Carry Flag
                    LDA $0338                       ; (4578) Load A with $0338
                    ADC #$AA                        ; (457B) Add with Carry with #$AA (170 / 10101010)
                    STA $690F                       ; (457D) Store A to $690F
                    LDA $0339                       ; (4580) Load A with $0339
                    ADC #$00                        ; (4583) Add with Carry with #$00 (0 / 00000000)
                    STA $694F                       ; (4585) Store A to $694F
                    CLC                             ; (4588) Clear Carry Flag
                    LDA $033A                       ; (4589) Load A with $033A
                    ADC #$31                        ; (458C) Add with Carry with #$31 (49 / 00110001)
                    STA $698F                       ; (458E) Store A to $698F
                    LDA $033B                       ; (4591) Load A with $033B
                    ADC #$00                        ; (4594) Add with Carry with #$00 (0 / 00000000)
                    STA $69CF                       ; (4596) Store A to $69CF
                    LDA #$C6                        ; (4599) Set A to #$C6 (198 / 11000110)
                    STA $691F                       ; (459B) Store A to $691F
                    LDA #$AC                        ; (459E) Set A to #$AC (172 / 10101100)
                    STA $692F                       ; (45A0) Store A to $692F
                    LDA CarFacingDirection                       ; (45A3) Load A with $03A0
                    STA $693F                       ; (45A6) Store A to $693F
                    JSR l_4400                      ; (45A9) Jump to Subroutine at $4400

l_45AC
                    RTS                             ; (45AC) Return from Subroutine

* = $45AD
            .byte $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$DF,$00,$FF,$00,$00,$40,$FF
            .byte $00,$20,$FF,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$FF
            .byte $00,$FF,$FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$00,$FF,$FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$8F,$FF
            .byte $00,$00,$FF

* = $4600

l_4600
                    LDA $0336                       ; (4600) Load A with $0336
                    BNE l_4606                      ; (4603) Branch to $4606 if Not Equal
                    RTS                             ; (4605) Return from Subroutine

l_4606
                    LDY CarFacingDirection                       ; (4606) Load Y with Data from $03A0
                    LDA $6BD0,Y                     ; (4609) Load A with $6BD0,Y
                    BEQ l_4639                      ; (460C) Branch to $4639 if Equal
                    LDA $0335                       ; (460E) Load A with $0335
                    BEQ l_4664                      ; (4611) Branch to $4664 if Equal
                    BMI l_4627                      ; (4613) Branch to $4627 if minus 
                    CLC                             ; (4615) Clear Carry Flag
                    LDA #$7E                        ; (4616) Set A to #$7E (126 / 01111110)
                    ADC $033C                       ; (4618) Add with Carry $033C
                    STA $AE                         ; (461B) Store A to $AE
                    LDA $033D                       ; (461D) Load A with $033D
                    ADC #$00                        ; (4620) Add with Carry with #$00 (0 / 00000000)
                    STA $AF                         ; (4622) Store A to $AF
                    JMP l_466E                      ; (4624) Jump to $466E

l_4627
                    SEC                             ; (4627) Set Carry Flag
                    LDA $033C                       ; (4628) Load A with $033C
                    SBC #$7E                        ; (462B) Subtract with Carry #$7E (126 / 01111110)
                    STA $AE                         ; (462D) Store A to $AE
                    LDA $033D                       ; (462F) Load A with $033D
                    SBC #$00                        ; (4632) Subtract with Carry #$00 (0 / 00000000)
                    STA $AF                         ; (4634) Store A to $AF
                    JMP l_466E                      ; (4636) Jump to $466E

l_4639
                    LDA $0334                       ; (4639) Load A with $0334
                    BEQ l_4664                      ; (463C) Branch to $4664 if Equal
                    BMI l_4652                      ; (463E) Branch to $4652 if minus 
                    CLC                             ; (4640) Clear Carry Flag
                    LDA #$01                        ; (4641) Set A to #$01 (1 / 00000001)
                    ADC $033C                       ; (4643) Add with Carry $033C
                    STA $AE                         ; (4646) Store A to $AE
                    LDA $033D                       ; (4648) Load A with $033D
                    ADC #$00                        ; (464B) Add with Carry with #$00 (0 / 00000000)
                    STA $AF                         ; (464D) Store A to $AF
                    JMP l_466E                      ; (464F) Jump to $466E

l_4652
                    SEC                             ; (4652) Set Carry Flag
                    LDA $033C                       ; (4653) Load A with $033C
                    SBC #$01                        ; (4656) Subtract with Carry #$01 (1 / 00000001)
                    STA $AE                         ; (4658) Store A to $AE
                    LDA $033D                       ; (465A) Load A with $033D
                    SBC #$00                        ; (465D) Subtract with Carry #$00 (0 / 00000000)
                    STA $AF                         ; (465F) Store A to $AF
                    JMP l_466E                      ; (4661) Jump to $466E

l_4664
                    LDA $033C                       ; (4664) Load A with $033C
                    STA $AE                         ; (4667) Store A to $AE
                    LDA $033D                       ; (4669) Load A with $033D
                    STA $AF                         ; (466C) Store A to $AF

l_466E
                    LDA $AE                         ; (466E) Load A with $AE
                    STA $02FB                       ; (4670) Store A to $02FB
                    LDA $AF                         ; (4673) Load A with $AF
                    STA $02FA                       ; (4675) Store A to $02FA
                    LDA $AE                         ; (4678) Load A with $AE
                    SEC                             ; (467A) Set Carry Flag
                    SBC #$D6                        ; (467B) Subtract with Carry #$D6 (214 / 11010110)
                    STA $FB                         ; (467D) Store A to $FB
                    LDA $AF                         ; (467F) Load A with $AF
                    SBC #$05                        ; (4681) Subtract with Carry #$05 (5 / 00000101)
                    STA $FC                         ; (4683) Store A to $FC
                    LDY CarFacingDirection                       ; (4685) Load Y with Data from $03A0
                    LDA $6B30,Y                     ; (4688) Load A with $6B30,Y
                    STA $FD                         ; (468B) Store A to $FD
                    LDA #$6D                        ; (468D) Set A to #$6D (109 / 01101101)
                    STA $FE                         ; (468F) Store A to $FE
                    LDX #$00                        ; (4691) Set X to #$00 (0 / 00000000)
                    LDY #$00                        ; (4693) Load Y with #$00 (0 / 00000000)

l_4695
                    CLC                             ; (4695) Clear Carry Flag
                    LDA ($FD),Y                     ; (4696) Load A with ($FD),Y
                    ADC $FB                         ; (4698) Add with Carry $FB
                    STA $AE                         ; (469A) Store A to $AE
                    INY                             ; (469C) Increment Y Register
                    LDA ($FD),Y                     ; (469D) Load A with ($FD),Y
                    ADC $FC                         ; (469F) Add with Carry $FC
                    STA $AF                         ; (46A1) Store A to $AF
                    INY                             ; (46A3) Increment Y Register
                    STY $02                         ; (46A4) Store Y Register $02
                    LDY #$00                        ; (46A6) Load Y with #$00 (0 / 00000000)
                    LDA ($AE),Y                     ; (46A8) Load A with ($AE),Y
                    STA $6B00,X                     ; (46AA) Store A to $6B00,X
                    INX                             ; (46AD) Increment X
                    CPX #$21                        ; (46AE) Subtract #$21 from X (33 / 00100001)
                    BEQ l_46B7                      ; (46B0) Branch to $46B7 if Equal
                    LDY $02                         ; (46B2) Load Y with Data from $02
                    JMP l_4695                      ; (46B4) Jump to $4695

l_46B7
                    LDY #$0B                        ; (46B7) Load Y with #$0B (11 / 00001011)

l_46B9
                    LDX $6B0A,Y                     ; (46B9) Load Index Register X $6B0A,Y
                    LDA $6F00,X                     ; (46BC) Load A with $6F00,X
                    BNE l_46C6                      ; (46BF) Branch to $46C6 if Not Equal
                    DEY                             ; (46C1) Decrement Y Register
                    BNE l_46B9                      ; (46C2) Branch to $46B9 if Not Equal
                    LDA #$00                        ; (46C4) Set A to #$00 (0 / 00000000)

l_46C6
                    PHA                             ; (46C6) Push Accumulator to Stack
                    TYA                             ; (46C7) Transfer Y to A
                    PHA                             ; (46C8) Push Accumulator to Stack
                    LDX #$09                        ; (46C9) Set X to #$09 (9 / 00001001)
                    LDY #$00                        ; (46CB) Load Y with #$00 (0 / 00000000)
                    STY $FB                         ; (46CD) Store Y Register $FB
                    STY $FC                         ; (46CF) Store Y Register $FC

l_46D1
                    LDY $FB                         ; (46D1) Load Y with Data from $FB
                    LDA $6B01,Y                     ; (46D3) Load A with $6B01,Y
                    TAY                             ; (46D6) Transfer A to Y
                    LDA $6F00,Y                     ; (46D7) Load A with $6F00,Y
                    ASL A                           ; (46DA) Arithmetic Shift Left Accumulator
                    BCC l_46E4                      ; (46DB) Branch to $46E4 if Carry Clear
                    LDA #$00                        ; (46DD) Set A to #$00 (0 / 00000000)
                    STA $FC                         ; (46DF) Store A to $FC
                    JMP l_46EF                      ; (46E1) Jump to $46EF

l_46E4
                    LDA $FC                         ; (46E4) Load A with $FC
                    BNE l_46F0                      ; (46E6) Branch to $46F0 if Not Equal
                    STX $FC                         ; (46E8) Store X to $FC
                    LDA $FC                         ; (46EA) Load A with $FC
                    JMP l_46F0                      ; (46EC) Jump to $46F0

l_46EF
                    TXA                             ; (46EF) Transfer X to A

l_46F0
                    ASL A                           ; (46F0) Arithmetic Shift Left Accumulator
                    ASL A                           ; (46F1) Arithmetic Shift Left Accumulator
                    ASL A                           ; (46F2) Arithmetic Shift Left Accumulator
                    CLC                             ; (46F3) Clear Carry Flag
                    ADC $6C00,Y                     ; (46F4) Add with Carry $6C00,Y
                    STA $AE                         ; (46F7) Store A to $AE
                    LDA $6C80,Y                     ; (46F9) Load A with $6C80,Y
                    ADC #$00                        ; (46FC) Add with Carry with #$00 (0 / 00000000)
                    STA $AF                         ; (46FE) Store A to $AF
                    LDY #$00                        ; (4700) Load Y with #$00 (0 / 00000000)
                    LDA ($AE),Y                     ; (4702) Load A with ($AE),Y
                    STA $0D09,X                     ; (4704) Store A to $0D09,X
                    INY                             ; (4707) Increment Y Register
                    LDA ($AE),Y                     ; (4708) Load A with ($AE),Y
                    STA $0D31,X                     ; (470A) Store A to $0D31,X
                    INY                             ; (470D) Increment Y Register
                    LDA ($AE),Y                     ; (470E) Load A with ($AE),Y
                    STA $0D59,X                     ; (4710) Store A to $0D59,X
                    INY                             ; (4713) Increment Y Register
                    LDA ($AE),Y                     ; (4714) Load A with ($AE),Y
                    STA $0D81,X                     ; (4716) Store A to $0D81,X
                    INY                             ; (4719) Increment Y Register
                    LDA ($AE),Y                     ; (471A) Load A with ($AE),Y
                    STA $0DA9,X                     ; (471C) Store A to $0DA9,X
                    INY                             ; (471F) Increment Y Register
                    LDA ($AE),Y                     ; (4720) Load A with ($AE),Y
                    STA $0DD1,X                     ; (4722) Store A to $0DD1,X
                    INY                             ; (4725) Increment Y Register
                    LDA ($AE),Y                     ; (4726) Load A with ($AE),Y
                    STA $0DF9,X                     ; (4728) Store A to $0DF9,X
                    INY                             ; (472B) Increment Y Register
                    LDA ($AE),Y                     ; (472C) Load A with ($AE),Y
                    STA $0E21,X                     ; (472E) Store A to $0E21,X
                    INC $FB                         ; (4731) Increment Memory $FB
                    DEX                             ; (4733) Decrement X
                    BPL l_46D1                      ; (4734) Branch to $46D1 if positive
                    LDX #$0C                        ; (4736) Set X to #$0C (12 / 00001100)
                    LDA #$00                        ; (4738) Set A to #$00 (0 / 00000000)
                    STA $FC                         ; (473A) Store A to $FC

l_473C
                    LDA $6B0B,X                     ; (473C) Load A with $6B0B,X
                    TAY                             ; (473F) Transfer A to Y
                    LDA $6F00,Y                     ; (4740) Load A with $6F00,Y
                    ASL A                           ; (4743) Arithmetic Shift Left Accumulator
                    BCC l_474D                      ; (4744) Branch to $474D if Carry Clear
                    LDA #$00                        ; (4746) Set A to #$00 (0 / 00000000)
                    STA $FC                         ; (4748) Store A to $FC
                    JMP l_4758                      ; (474A) Jump to $4758

l_474D
                    LDA $FC                         ; (474D) Load A with $FC
                    BNE l_4759                      ; (474F) Branch to $4759 if Not Equal
                    STX $FC                         ; (4751) Store X to $FC
                    LDA $FC                         ; (4753) Load A with $FC
                    JMP l_4759                      ; (4755) Jump to $4759

l_4758
                    TXA                             ; (4758) Transfer X to A

l_4759
                    ASL A                           ; (4759) Arithmetic Shift Left Accumulator
                    ASL A                           ; (475A) Arithmetic Shift Left Accumulator
                    ASL A                           ; (475B) Arithmetic Shift Left Accumulator
                    CLC                             ; (475C) Clear Carry Flag
                    ADC $6C00,Y                     ; (475D) Add with Carry $6C00,Y
                    STA $AE                         ; (4760) Store A to $AE
                    LDA $6C80,Y                     ; (4762) Load A with $6C80,Y
                    ADC #$00                        ; (4765) Add with Carry with #$00 (0 / 00000000)
                    STA $AF                         ; (4767) Store A to $AF
                    LDY #$00                        ; (4769) Load Y with #$00 (0 / 00000000)
                    LDA ($AE),Y                     ; (476B) Load A with ($AE),Y
                    STA $0D09,X                     ; (476D) Store A to $0D09,X
                    INY                             ; (4770) Increment Y Register
                    LDA ($AE),Y                     ; (4771) Load A with ($AE),Y
                    STA $0D31,X                     ; (4773) Store A to $0D31,X
                    INY                             ; (4776) Increment Y Register
                    LDA ($AE),Y                     ; (4777) Load A with ($AE),Y
                    STA $0D59,X                     ; (4779) Store A to $0D59,X
                    INY                             ; (477C) Increment Y Register
                    LDA ($AE),Y                     ; (477D) Load A with ($AE),Y
                    STA $0D81,X                     ; (477F) Store A to $0D81,X
                    INY                             ; (4782) Increment Y Register
                    LDA ($AE),Y                     ; (4783) Load A with ($AE),Y
                    STA $0DA9,X                     ; (4785) Store A to $0DA9,X
                    INY                             ; (4788) Increment Y Register
                    LDA ($AE),Y                     ; (4789) Load A with ($AE),Y
                    STA $0DD1,X                     ; (478B) Store A to $0DD1,X
                    INY                             ; (478E) Increment Y Register
                    LDA ($AE),Y                     ; (478F) Load A with ($AE),Y
                    STA $0DF9,X                     ; (4791) Store A to $0DF9,X
                    INY                             ; (4794) Increment Y Register
                    LDA ($AE),Y                     ; (4795) Load A with ($AE),Y
                    STA $0E21,X                     ; (4797) Store A to $0E21,X
                    INX                             ; (479A) Increment X
                    CPX #$16                        ; (479B) Subtract #$16 from X (22 / 00010110)
                    BNE l_473C                      ; (479D) Branch to $473C if Not Equal
                    PLA                             ; (479F) Pull Accumulator from Stack
                    STA $02                         ; (47A0) Store A to $02
                    CLC                             ; (47A2) Clear Carry Flag
                    PLA                             ; (47A3) Pull Accumulator from Stack
                    AND #$7F                        ; (47A4) Logical AND with Accumulator and #$7F (127 / 01111111)
                    ADC $02                         ; (47A6) Add with Carry $02
                    TAY                             ; (47A8) Transfer A to Y
                    LDA $6A80,Y                     ; (47A9) Load A with $6A80,Y
                    TAX                             ; (47AC) Transfer A to X
                    LDA $6AC0,Y                     ; (47AD) Load A with $6AC0,Y
                    STA $02                         ; (47B0) Store A to $02
                    LDA $6A00,Y                     ; (47B2) Load A with $6A00,Y
                    STA $AE                         ; (47B5) Store A to $AE
                    LDA $6A40,Y                     ; (47B7) Load A with $6A40,Y
                    STA $AF                         ; (47BA) Store A to $AF
                    LDY #$00                        ; (47BC) Load Y with #$00 (0 / 00000000)

l_47BE
                    LDA ($AE),Y                     ; (47BE) Load A with ($AE),Y
                    STA $0D09,X                     ; (47C0) Store A to $0D09,X
                    INY                             ; (47C3) Increment Y Register
                    LDA ($AE),Y                     ; (47C4) Load A with ($AE),Y
                    STA $0D31,X                     ; (47C6) Store A to $0D31,X
                    INY                             ; (47C9) Increment Y Register
                    LDA ($AE),Y                     ; (47CA) Load A with ($AE),Y
                    STA $0D59,X                     ; (47CC) Store A to $0D59,X
                    INY                             ; (47CF) Increment Y Register
                    LDA ($AE),Y                     ; (47D0) Load A with ($AE),Y
                    STA $0D81,X                     ; (47D2) Store A to $0D81,X
                    INY                             ; (47D5) Increment Y Register
                    LDA ($AE),Y                     ; (47D6) Load A with ($AE),Y
                    STA $0DA9,X                     ; (47D8) Store A to $0DA9,X
                    INY                             ; (47DB) Increment Y Register
                    LDA ($AE),Y                     ; (47DC) Load A with ($AE),Y
                    STA $0DD1,X                     ; (47DE) Store A to $0DD1,X
                    INY                             ; (47E1) Increment Y Register
                    LDA ($AE),Y                     ; (47E2) Load A with ($AE),Y
                    STA $0DF9,X                     ; (47E4) Store A to $0DF9,X
                    INY                             ; (47E7) Increment Y Register
                    LDA ($AE),Y                     ; (47E8) Load A with ($AE),Y
                    STA $0E21,X                     ; (47EA) Store A to $0E21,X
                    INY                             ; (47ED) Increment Y Register
                    INX                             ; (47EE) Increment X
                    CPX $02                         ; (47EF) Compare X to $02
                    BNE l_47BE                      ; (47F1) Branch to $47BE if Not Equal
                    INC $0337                       ; (47F3) Increment Memory $0337
                    LDA #$00                        ; (47F6) Set A to #$00 (0 / 00000000)
                    STA $0336                       ; (47F8) Store A to $0336
                    RTS                             ; (47FB) Return from Subroutine

l_47FC
                    LDA $0337                       ; (47FC) Load A with $0337
                    BNE l_4802                      ; (47FF) Branch to $4802 if Not Equal
                    RTS                             ; (4801) Return from Subroutine

l_4802
                    LDX #$15                        ; (4802) Set X to #$15 (21 / 00010101)

l_4804
                    LDA $0D09,X                     ; (4804) Load A with $0D09,X
                    STA $0409,X                     ; (4807) Store A to $0409,X
                    LDA $0D31,X                     ; (480A) Load A with $0D31,X
                    STA $0431,X                     ; (480D) Store A to $0431,X
                    LDA $0D59,X                     ; (4810) Load A with $0D59,X
                    STA $0459,X                     ; (4813) Store A to $0459,X
                    LDA $0D81,X                     ; (4816) Load A with $0D81,X
                    STA $0481,X                     ; (4819) Store A to $0481,X
                    LDA $0DA9,X                     ; (481C) Load A with $0DA9,X
                    STA $04A9,X                     ; (481F) Store A to $04A9,X
                    LDA $0DD1,X                     ; (4822) Load A with $0DD1,X
                    STA $04D1,X                     ; (4825) Store A to $04D1,X
                    LDA $0DF9,X                     ; (4828) Load A with $0DF9,X
                    STA $04F9,X                     ; (482B) Store A to $04F9,X
                    LDA $0E21,X                     ; (482E) Load A with $0E21,X
                    STA $0521,X                     ; (4831) Store A to $0521,X
                    DEX                             ; (4834) Decrement X
                    BPL l_4804                      ; (4835) Branch to $4804 if positive
                    LDA #$00                        ; (4837) Set A to #$00 (0 / 00000000)
                    STA $0337                       ; (4839) Store A to $0337
                    RTS                             ; (483C) Return from Subroutine

* = $483D
            .byte $00,$00,$00,$FF,$00,$FF,$00,$FF,$FF,$FF,$FF,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00

* = $4850

l_4850
                    SEC                             ; (4850) Set Carry Flag
                    LDA MaydayXMap                       ; (4851) Load A with $6900
                    SBC #$88                        ; (4854) Subtract with Carry #$88 (136 / 10001000)
                    STA $EA                         ; (4856) Store A to $EA
                    LDA $6940                       ; (4858) Load A with $6940
                    SBC #$00                        ; (485B) Subtract with Carry #$00 (0 / 00000000)
                    STA $EB                         ; (485D) Store A to $EB
                    SEC                             ; (485F) Set Carry Flag
                    LDA MaydayYMap                       ; (4860) Load A with $6980
                    SBC #$32                        ; (4863) Subtract with Carry #$32 (50 / 00110010)
                    STA $EC                         ; (4865) Store A to $EC
                    LDA $69C0                       ; (4867) Load A with $69C0
                    SBC #$00                        ; (486A) Subtract with Carry #$00 (0 / 00000000)
                    STA $ED                         ; (486C) Store A to $ED
                    NOP                             ; (486E) No operation
                    NOP                             ; (486F) No operation
                    LDA $0339                       ; (4870) Load A with $0339
                    CMP $EB                         ; (4873) Subtract $EB from A
                    BEQ l_487C                      ; (4875) Branch to $487C if Equal
                    BCC l_4895                      ; (4877) Branch to $4895 if Carry Clear
                    JMP l_4883                      ; (4879) Jump to $4883

l_487C
                    LDA $0338                       ; (487C) Load A with $0338
                    CMP $EA                         ; (487F) Subtract $EA from A
                    BCC l_4895                      ; (4881) Branch to $4895 if Carry Clear

l_4883
                    SEC                             ; (4883) Set Carry Flag
                    LDA $0338                       ; (4884) Load A with $0338
                    SBC $EA                         ; (4887) Subtract with Carry $EA
                    STA $AE                         ; (4889) Store A to $AE
                    LDA $0339                       ; (488B) Load A with $0339
                    SBC $EB                         ; (488E) Subtract with Carry $EB
                    STA $AF                         ; (4890) Store A to $AF
                    JMP l_48A4                      ; (4892) Jump to $48A4

l_4895
                    SEC                             ; (4895) Set Carry Flag
                    LDA $EA                         ; (4896) Load A with $EA
                    SBC $0338                       ; (4898) Subtract with Carry $0338
                    STA $AE                         ; (489B) Store A to $AE
                    LDA $EB                         ; (489D) Load A with $EB
                    SBC $0339                       ; (489F) Subtract with Carry $0339
                    STA $AF                         ; (48A2) Store A to $AF

l_48A4
                    LDA $033B                       ; (48A4) Load A with $033B
                    CMP $ED                         ; (48A7) Subtract $ED from A
                    BEQ l_48B0                      ; (48A9) Branch to $48B0 if Equal
                    BCC l_48C9                      ; (48AB) Branch to $48C9 if Carry Clear
                    JMP l_48B7                      ; (48AD) Jump to $48B7

l_48B0
                    LDA $033A                       ; (48B0) Load A with $033A
                    CMP $EC                         ; (48B3) Subtract $EC from A
                    BCC l_48C9                      ; (48B5) Branch to $48C9 if Carry Clear

l_48B7
                    SEC                             ; (48B7) Set Carry Flag
                    LDA $033A                       ; (48B8) Load A with $033A
                    SBC $EC                         ; (48BB) Subtract with Carry $EC
                    STA $AC                         ; (48BD) Store A to $AC
                    LDA $033B                       ; (48BF) Load A with $033B
                    SBC $ED                         ; (48C2) Subtract with Carry $ED
                    STA $AD                         ; (48C4) Store A to $AD
                    JMP l_48D8                      ; (48C6) Jump to $48D8

l_48C9
                    SEC                             ; (48C9) Set Carry Flag
                    LDA $EC                         ; (48CA) Load A with $EC
                    SBC $033A                       ; (48CC) Subtract with Carry $033A
                    STA $AC                         ; (48CF) Store A to $AC
                    LDA $ED                         ; (48D1) Load A with $ED
                    SBC $033B                       ; (48D3) Subtract with Carry $033B
                    STA $AD                         ; (48D6) Store A to $AD

l_48D8
                    CLC                             ; (48D8) Clear Carry Flag
                    LDA $AE                         ; (48D9) Load A with $AE
                    ADC $AC                         ; (48DB) Add with Carry $AC
                    STA $AC                         ; (48DD) Store A to $AC
                    LDA $AF                         ; (48DF) Load A with $AF
                    ADC $AD                         ; (48E1) Add with Carry $AD
                    STA $AD                         ; (48E3) Store A to $AD
                    LDY $AD                         ; (48E5) Load Y with Data from $AD
                    LDA $AC                         ; (48E7) Load A with $AC
                    LDX #$28                        ; (48E9) Set X to #$28 (40 / 00101000)
                    JSR l_4AB0                      ; (48EB) Jump to Subroutine at $4AB0
                    LDA $FD                         ; (48EE) Load A with $FD
                    ORA #$01                        ; (48F0) Logical OR with Accumulator and #$01 (1 / 00000001)
                    STA $034D                       ; (48F2) Store A to $034D
                    RTS                             ; (48F5) Return from Subroutine

* = $48F6
            .byte $60,$FF,$08,$6F,$00,$0E,$0F,$FF,$2E,$FF

* = $4900

l_4900
                    LDA $0399                       ; (4900) Load A with $0399
                    AND #$1F                        ; (4903) Logical AND with Accumulator and #$1F (31 / 00011111)
                    TAX                             ; (4905) Transfer A to X
                    LDA $4B00,X                     ; (4906) Load A with $4B00,X
                    CMP #$48                        ; (4909) Subtract #$48 from A (72 / 01001000)
                    BNE l_4921                      ; (490B) Branch to $4921 if Not Equal
                    PHA                             ; (490D) Push Accumulator to Stack
                    LDA $4B20,X                     ; (490E) Load A with $4B20,X
                    STA $AC                         ; (4911) Store A to $AC
                    LDA $4B40,X                     ; (4913) Load A with $4B40,X
                    STA $AD                         ; (4916) Store A to $AD
                    LDY #$02                        ; (4918) Load Y with #$02 (2 / 00000010)
                    PLA                             ; (491A) Pull Accumulator from Stack

l_491B
                    STA ($AC),Y                     ; (491B) Store Accumulator ($AC),Y
                    DEY                             ; (491D) Decrement Y Register
                    BPL l_491B                      ; (491E) Branch to $491B if positive
                    RTS                             ; (4920) Return from Subroutine

l_4921
                    PHA                             ; (4921) Push Accumulator to Stack
                    LDA $4B20,X                     ; (4922) Load A with $4B20,X
                    STA $AC                         ; (4925) Store A to $AC
                    LDA $4B40,X                     ; (4927) Load A with $4B40,X
                    STA $AD                         ; (492A) Store A to $AD
                    LDY #$00                        ; (492C) Load Y with #$00 (0 / 00000000)
                    PLA                             ; (492E) Pull Accumulator from Stack
                    STA ($AC),Y                     ; (492F) Store Accumulator ($AC),Y
                    LDY #$7E                        ; (4931) Load Y with #$7E (126 / 01111110)
                    STA ($AC),Y                     ; (4933) Store Accumulator ($AC),Y
                    LDY #$FC                        ; (4935) Load Y with #$FC (252 / 11111100)
                    STA ($AC),Y                     ; (4937) Store Accumulator ($AC),Y
                    RTS                             ; (4939) Return from Subroutine

* = $493A
            .byte $FF,$00,$FF,$00,$FF,$00

* = $4940

l_4940
                    LDY #$00                        ; (4940) Load Y with #$00 (0 / 00000000)
                    LDA ($C9),Y                     ; (4942) Load A with ($C9),Y
                    CMP #$48                        ; (4944) Subtract #$48 from A (72 / 01001000)
                    BEQ l_4960                      ; (4946) Branch to $4960 if Equal
                    CMP #$49                        ; (4948) Subtract #$49 from A (73 / 01001001)
                    BEQ l_4980                      ; (494A) Branch to $4980 if Equal
                    RTS                             ; (494C) Return from Subroutine

* = $494D
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA

* = $4960

l_4960
                    LDY #$00                        ; (4960) Load Y with #$00 (0 / 00000000)
                    LDA #$00                        ; (4962) Set A to #$00 (0 / 00000000)
                    STA ($AE),Y                     ; (4964) Store Accumulator ($AE),Y
                    INY                             ; (4966) Increment Y Register
                    STA ($AE),Y                     ; (4967) Store Accumulator ($AE),Y
                    SEC                             ; (4969) Set Carry Flag
                    LDA $AE                         ; (496A) Load A with $AE
                    SBC #$01                        ; (496C) Subtract with Carry #$01 (1 / 00000001)
                    STA $AE                         ; (496E) Store A to $AE
                    BCS l_4974                      ; (4970) Branch if Carry Set $4974
                    DEC $AF                         ; (4972) Decrement $AF

l_4974
                    LDY #$00                        ; (4974) Load Y with #$00 (0 / 00000000)
                    LDA #$00                        ; (4976) Set A to #$00 (0 / 00000000)
                    STA ($AE),Y                     ; (4978) Store Accumulator ($AE),Y
                    JMP l_49A0                      ; (497A) Jump to $49A0

* = $497D
            .byte $EA,$EA,$EA

* = $4980

l_4980
                    LDY #$00                        ; (4980) Load Y with #$00 (0 / 00000000)
                    LDA #$00                        ; (4982) Set A to #$00 (0 / 00000000)
                    STA ($AE),Y                     ; (4984) Store Accumulator ($AE),Y
                    LDY #$7E                        ; (4986) Load Y with #$7E (126 / 01111110)
                    STA ($AE),Y                     ; (4988) Store Accumulator ($AE),Y
                    SEC                             ; (498A) Set Carry Flag
                    LDA $AE                         ; (498B) Load A with $AE
                    SBC #$FC                        ; (498D) Subtract with Carry #$FC (252 / 11111100)
                    STA $AE                         ; (498F) Store A to $AE
                    BCS l_4995                      ; (4991) Branch if Carry Set $4995
                    DEC $AF                         ; (4993) Decrement $AF

l_4995
                    LDA #$00                        ; (4995) Set A to #$00 (0 / 00000000)
                    STA ($AE),Y                     ; (4997) Store Accumulator ($AE),Y
                    JMP l_49A0                      ; (4999) Jump to $49A0

* = $499C
            .byte $A0,$49,$EA,$EA

* = $49A0

l_49A0
                    LDA DamageCount                       ; (49A0) Load A with $03A1
                    CLC                             ; (49A3) Clear Carry Flag
                    ADC #$01                        ; (49A4) Add with Carry with #$01 (1 / 00000001)
                    STA DamageCount                       ; (49A6) Store A to $03A1
                    BCS l_49B3                      ; (49A9) Branch if Carry Set $49B3
                    CMP #$28                        ; (49AB) Subtract #$28 from A (40 / 00101000)
                    BCS l_49B3                      ; (49AD) Branch if Carry Set $49B3
                    JSR l_4428                      ; (49AF) Jump to Subroutine at $4428
                    RTS                             ; (49B2) Return from Subroutine

l_49B3
                    STA EndGameFlag                       ; (49B3) Store A to $0313
                    RTS                             ; (49B6) Return from Subroutine

* = $49B7
            .byte $FD,$00,$FF,$00,$FF,$00,$FF,$24,$FF

* = $49C0

l_49C0
                    LDA $4B00,X                     ; (49C0) Load A with $4B00,X
                    CMP #$48                        ; (49C3) Subtract #$48 from A (72 / 01001000)
                    BNE l_49DB                      ; (49C5) Branch to $49DB if Not Equal
                    LDA $4B20,X                     ; (49C7) Load A with $4B20,X
                    STA $AC                         ; (49CA) Store A to $AC
                    LDA $4B40,X                     ; (49CC) Load A with $4B40,X
                    STA $AD                         ; (49CF) Store A to $AD
                    LDY #$02                        ; (49D1) Load Y with #$02 (2 / 00000010)
                    LDA #$00                        ; (49D3) Set A to #$00 (0 / 00000000)

l_49D5
                    STA ($AC),Y                     ; (49D5) Store Accumulator ($AC),Y
                    DEY                             ; (49D7) Decrement Y Register
                    BPL l_49D5                      ; (49D8) Branch to $49D5 if positive
                    RTS                             ; (49DA) Return from Subroutine

l_49DB
                    LDA $4B20,X                     ; (49DB) Load A with $4B20,X
                    STA $AC                         ; (49DE) Store A to $AC
                    LDA $4B40,X                     ; (49E0) Load A with $4B40,X
                    STA $AD                         ; (49E3) Store A to $AD
                    LDY #$00                        ; (49E5) Load Y with #$00 (0 / 00000000)
                    LDA #$00                        ; (49E7) Set A to #$00 (0 / 00000000)
                    STA ($AC),Y                     ; (49E9) Store Accumulator ($AC),Y
                    LDY #$7E                        ; (49EB) Load Y with #$7E (126 / 01111110)
                    STA ($AC),Y                     ; (49ED) Store Accumulator ($AC),Y
                    LDY #$FC                        ; (49EF) Load Y with #$FC (252 / 11111100)
                    STA ($AC),Y                     ; (49F1) Store Accumulator ($AC),Y
                    RTS                             ; (49F3) Return from Subroutine

* = $49F4
            .byte $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF

* = $4A00

l_4A00
                    LDA #$04                        ; (4A00) Set A to #$04 (4 / 00000100)
                    STA $FE                         ; (4A02) Store A to $FE
                    LDA #$D8                        ; (4A04) Set A to #$D8 (216 / 11011000)
                    STA $FC                         ; (4A06) Store A to $FC
                    LDA #$00                        ; (4A08) Set A to #$00 (0 / 00000000)
                    STA $FD                         ; (4A0A) Store A to $FD
                    STA $FB                         ; (4A0C) Store A to $FB
                    LDA #$8B                        ; (4A0E) Set A to #$8B (139 / 10001011)
                    STA $AF                         ; (4A10) Store A to $AF
                    LDA #$28                        ; (4A12) Set A to #$28 (40 / 00101000)
                    STA $AE                         ; (4A14) Store A to $AE
                    LDA #$8F                        ; (4A16) Set A to #$8F (143 / 10001111)
                    STA $AD                         ; (4A18) Store A to $AD
                    LDA #$10                        ; (4A1A) Set A to #$10 (16 / 00010000)
                    STA $AC                         ; (4A1C) Store A to $AC

l_4A1E
                    LDY #$00                        ; (4A1E) Load Y with #$00 (0 / 00000000)

l_4A20
                    LDA ($AE),Y                     ; (4A20) Load A with ($AE),Y
                    STA ($FD),Y                     ; (4A22) Store Accumulator ($FD),Y
                    LDA ($AC),Y                     ; (4A24) Load A with ($AC),Y
                    STA ($FB),Y                     ; (4A26) Store Accumulator ($FB),Y
                    INY                             ; (4A28) Increment Y Register
                    BEQ l_4A32                      ; (4A29) Branch to $4A32 if Equal
                    CPY #$E8                        ; (4A2B) Subtract #$E8 from Y (232 / 11101000)
                    BNE l_4A20                      ; (4A2D) Branch to $4A20 if Not Equal
                    JMP l_4A3D                      ; (4A2F) Jump to $4A3D

l_4A32
                    INC $FE                         ; (4A32) Increment Memory $FE
                    INC $FC                         ; (4A34) Increment Memory $FC
                    INC $AF                         ; (4A36) Increment Memory $AF
                    INC $AD                         ; (4A38) Increment Memory $AD
                    JMP l_4A1E                      ; (4A3A) Jump to $4A1E

l_4A3D
                    LDA $FE                         ; (4A3D) Load A with $FE
                    CMP #$07                        ; (4A3F) Subtract #$07 from A (7 / 00000111)
                    BNE l_4A20                      ; (4A41) Branch to $4A20 if Not Equal
                    RTS                             ; (4A43) Return from Subroutine

* = $4A44
            .byte $60,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA

* = $4A50

l_4A50
                    LDA $D803                       ; (4A50) Load A with $D803
                    CMP #$04                        ; (4A53) Subtract #$04 from A (4 / 00000100)
                    BEQ l_4A70                      ; (4A55) Branch to $4A70 if Equal
                    LDY $034C                       ; (4A57) Load Y with Data from $034C
                    DEY                             ; (4A5A) Decrement Y Register
                    BNE l_4AA1                      ; (4A5B) Branch to $4AA1 if Not Equal
                    LDY $034D                       ; (4A5D) Load Y with Data from $034D
                    LDA #$02                        ; (4A60) Set A to #$02 (2 / 00000010)
                    STA $034E                       ; (4A62) Store A to $034E
                    LDA #$04                        ; (4A65) Set A to #$04 (4 / 00000100)
                    STA $D803                       ; (4A67) Store A to $D803
                    STY $034C                       ; (4A6A) Store Y Register $034C
                    JMP l_4A87                      ; (4A6D) Jump to $4A87

l_4A70
                    LDY $034E                       ; (4A70) Load Y with Data from $034E
                    DEY                             ; (4A73) Decrement Y Register
                    BNE l_4A84                      ; (4A74) Branch to $4A84 if Not Equal
                    LDA #$02                        ; (4A76) Set A to #$02 (2 / 00000010)
                    STA $D803                       ; (4A78) Store A to $D803
                    STY $034E                       ; (4A7B) Store Y Register $034E
                    LDA #$00                        ; (4A7E) Set A to #$00 (0 / 00000000)
                    STA Voice2Control               ; (4A80) Store A to $D40B
                    RTS                             ; (4A83) Return from Subroutine

l_4A84
                    STY $034E                       ; (4A84) Store Y Register $034E

l_4A87
                    LDA #$04                        ; (4A87) Set A to #$04 (4 / 00000100)
                    STA Voice2Frequency1            ; (4A89) Store A to $D407
                    LDA #$3A                        ; (4A8C) Set A to #$3A (58 / 00111010)
                    STA Voice2Frequency2            ; (4A8E) Store A to $D408
                    LDA #$98                        ; (4A91) Set A to #$98 (152 / 10011000)
                    STA Voice2AttackDecayLength     ; (4A93) Store A to $D40C
                    LDA #$DF                        ; (4A96) Set A to #$DF (223 / 11011111)
                    STA Voice2SustainVolRelease     ; (4A98) Store A to $D40D
                    LDA #$11                        ; (4A9B) Set A to #$11 (17 / 00010001)
                    STA Voice2Control               ; (4A9D) Store A to $D40B
                    RTS                             ; (4AA0) Return from Subroutine

l_4AA1
                    STY $034C                       ; (4AA1) Store Y Register $034C
                    RTS                             ; (4AA4) Return from Subroutine

* = $4AA5
            .byte $00,$85,$FD,$98,$A2,$08,$38,$E5,$02,$08,$26

* = $4AB0

l_4AB0
                    STA $AE                         ; (4AB0) Store A to $AE
                    STX $02                         ; (4AB2) Store X to $02
                    LDA #$00                        ; (4AB4) Set A to #$00 (0 / 00000000)
                    STA $FD                         ; (4AB6) Store A to $FD
                    TYA                             ; (4AB8) Transfer Y to A
                    LDX #$08                        ; (4AB9) Set X to #$08 (8 / 00001000)
                    SEC                             ; (4ABB) Set Carry Flag
                    SBC $02                         ; (4ABC) Subtract with Carry $02

l_4ABE
                    PHP                             ; (4ABE) Push Processor Status (To Stack)
                    ROL $FD                         ; (4ABF) Rotate Left $FD
                    ASL $AE                         ; (4AC1) Arithmetic Shift Left $AE
                    ROL A                           ; (4AC3) Rotate Left Accumulator
                    PLP                             ; (4AC4) Pull Processor Status (From Stack)
                    BCC l_4ACC                      ; (4AC5) Branch to $4ACC if Carry Clear
                    SBC $02                         ; (4AC7) Subtract with Carry $02
                    JMP l_4ACE                      ; (4AC9) Jump to $4ACE

l_4ACC
                    ADC $02                         ; (4ACC) Add with Carry $02

l_4ACE
                    DEX                             ; (4ACE) Decrement X
                    BNE l_4ABE                      ; (4ACF) Branch to $4ABE if Not Equal
                    BCS l_4AD6                      ; (4AD1) Branch if Carry Set $4AD6
                    ADC $02                         ; (4AD3) Add with Carry $02
                    CLC                             ; (4AD5) Clear Carry Flag

l_4AD6
                    ROL $FD                         ; (4AD6) Rotate Left $FD
                    STA $FE                         ; (4AD8) Store A to $FE
                    RTS                             ; (4ADA) Return from Subroutine

* = $4ADB
            .byte $00,$00,$00,$00,$A8,$20,$BC,$B7,$BF,$BF,$BF,$B6,$BF,$94,$9E,$94
            .byte $9A,$92,$BF,$94,$BF,$D4,$FD,$DE,$FD,$D4,$FD,$F6,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$48,$49,$48,$49,$49,$48,$49,$48,$49,$48,$49
            .byte $49,$48,$49,$49,$49,$49,$49,$49,$49,$49,$48,$49,$49,$48,$49,$49
            .byte $49,$48,$48,$49,$49,$D7,$A2,$96,$69,$EF,$8A,$4B,$E0,$AD,$4E,$FF
            .byte $AA,$C1,$00,$D3,$0C,$2F,$44,$8D,$AA,$1E,$56,$93,$8C,$8F,$C0,$0D
            .byte $1C,$57,$AE,$57,$BA,$9E,$98,$A0,$A1,$A5,$A9,$AD,$B0,$B4,$B8,$B8
            .byte $BA,$C0,$C2,$C4,$C8,$CC,$CC,$98,$AB,$B0,$C2,$A4,$C3,$BC,$95,$9D
            .byte $9D,$A6,$A0,$A4,$9B,$FF,$00,$FF,$00,$FF,$DF,$FF,$00,$FF,$B1,$FF
            .byte $FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$00,$00,$FD,$00,$FF,$00,$0F,$00,$FF,$23,$FF,$00
            .byte $1F,$00,$0E,$0F,$FF,$00,$FF,$00,$FF,$00,$0F,$00,$0F,$00,$FF,$00
            .byte $FF,$00,$FF,$0F,$FF

* = $4BA0

l_4BA0
                    LDA EndGameFlag                       ; (4BA0) Load A with $0313
                    CMP #$80                        ; (4BA3) Subtract #$80 from A (128 / 10000000)
                    BNE l_4BB7                      ; (4BA5) Branch to $4BB7 if Not Equal
                    LDA #$12                        ; (4BA7) Set A to #$12 (18 / 00010010)
                    STA $1006                       ; (4BA9) Store A to $1006
                    LDA #$25                        ; (4BAC) Set A to #$25 (37 / 00100101)
                    STA $1002                       ; (4BAE) Store A to $1002
                    JSR l_1000                      ; (4BB1) Jump to Subroutine at $1000
                    JMP l_4BDB                      ; (4BB4) Jump to $4BDB

l_4BB7
                    CMP #$40                        ; (4BB7) Subtract #$40 from A (64 / 01000000)
                    BNE l_4BCB                      ; (4BB9) Branch to $4BCB if Not Equal

l_4BBB
                    LDA #$19                        ; (4BBB) Set A to #$19 (25 / 00011001)
                    STA $1006                       ; (4BBD) Store A to $1006
                    LDA #$0A                        ; (4BC0) Set A to #$0A (10 / 00001010)
                    STA $1002                       ; (4BC2) Store A to $1002
                    JSR l_1000                      ; (4BC5) Jump to Subroutine at $1000
                    JMP l_4BDB                      ; (4BC8) Jump to $4BDB

l_4BCB
                    LDA #$10                        ; (4BCB) Set A to #$10 (16 / 00010000)
                    STA $1006                       ; (4BCD) Store A to $1006
                    LDA #$90                        ; (4BD0) Set A to #$90 (144 / 10010000)
                    STA $1002                       ; (4BD2) Store A to $1002
                    JSR l_1000                      ; (4BD5) Jump to Subroutine at $1000
                    JMP l_4BBB                      ; (4BD8) Jump to $4BBB

l_4BDB
                    LDA #$00                        ; (4BDB) Set A to #$00 (0 / 00000000)
                    STA EndGameFlag                       ; (4BDD) Store A to $0313
                    JMP l_4F7F                      ; (4BE0) Jump to $4F7F

* = $4BE3
            .byte $FF,$00,$2F,$00,$FF,$08,$6F,$00,$0F,$0F,$FF,$2E,$FF,$08,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF

* = $4C00

l_4C00
                    LDX #$0F                        ; (4C00) Set X to #$0F (15 / 00001111)
                    STX $AC                         ; (4C02) Store X to $AC
                    JMP l_4CB2                      ; (4C04) Jump to $4CB2

l_4C07
                    LDX $AC                         ; (4C07) Load X with $AC
                    LDA $6910,X                     ; (4C09) Load A with $6910,X
                    AND #$80                        ; (4C0C) Logical AND with Accumulator and #$80 (128 / 10000000)
                    BNE l_4C13                      ; (4C0E) Branch to $4C13 if Not Equal
                    JMP l_4D0C                      ; (4C10) Jump to $4D0C

l_4C13
                    LDA $6910,X                     ; (4C13) Load A with $6910,X
                    AND #$03                        ; (4C16) Logical AND with Accumulator and #$03 (3 / 00000011)
                    TAY                             ; (4C18) Transfer A to Y
                    LDA $03C8,Y                     ; (4C19) Load A with $03C8,Y
                    AND $02FC                       ; (4C1C) Logical AND with Accumulator $02FC
                    BEQ l_4C24                      ; (4C1F) Branch to $4C24 if Equal
                    JMP l_4D74                      ; (4C21) Jump to $4D74

l_4C24
                    LDA $6910,X                     ; (4C24) Load A with $6910,X
                    AND #$20                        ; (4C27) Logical AND with Accumulator and #$20 (32 / 00100000)
                    BEQ l_4C2E                      ; (4C29) Branch to $4C2E if Equal
                    JMP l_4D33                      ; (4C2B) Jump to $4D33

l_4C2E
                    LDA $6910,X                     ; (4C2E) Load A with $6910,X
                    AND #$03                        ; (4C31) Logical AND with Accumulator and #$03 (3 / 00000011)
                    TAY                             ; (4C33) Transfer A to Y
                    LDA $03A2                       ; (4C34) Load A with $03A2
                    CMP $69E0,X                     ; (4C37) Subtract $69E0,X from A
                    BCS l_4C3F                      ; (4C3A) Branch if Carry Set $4C3F
                    JMP l_4D0C                      ; (4C3C) Jump to $4D0C

l_4C3F
                    LDA CarCollision                       ; (4C3F) Load A with $02FD
                    AND $03C8,Y                     ; (4C42) Logical AND with Accumulator $03C8,Y
                    BEQ l_4C4F                      ; (4C45) Branch to $4C4F if Equal
                    LDA #$C0                        ; (4C47) Set A to #$C0 (192 / 11000000)
                    STA $6950,X                     ; (4C49) Store A to $6950,X
                    JMP l_4D0C                      ; (4C4C) Jump to $4D0C

l_4C4F
                    DEC $6950,X                     ; (4C4F) Decrement $6950,X
                    LDA $6950,X                     ; (4C52) Load A with $6950,X
                    BEQ l_4C5A                      ; (4C55) Branch to $4C5A if Equal
                    JMP l_4D0C                      ; (4C57) Jump to $4D0C

l_4C5A
                    LDA $6960,X                     ; (4C5A) Load A with $6960,X
                    STA $6950,X                     ; (4C5D) Store A to $6950,X
                    LDA MaydayYMap,X                     ; (4C60) Load A with $6980,X
                    LDY $69C0,X                     ; (4C63) Load Index Register Y $69C0,X
                    LDX #$08                        ; (4C66) Set X to #$08 (8 / 00001000)
                    JSR l_4AB0                      ; (4C68) Jump to Subroutine at $4AB0
                    LDA $FD                         ; (4C6B) Load A with $FD
                    LDX #$7E                        ; (4C6D) Set X to #$7E (126 / 01111110)
                    JSR l_4D17                      ; (4C6F) Jump to Subroutine at $4D17
                    STA $FC                         ; (4C72) Store A to $FC
                    STX $FB                         ; (4C74) Store X to $FB
                    LDX $AC                         ; (4C76) Load X with $AC
                    LDA MaydayXMap,X                     ; (4C78) Load A with $6900,X
                    LDY $6940,X                     ; (4C7B) Load Index Register Y $6940,X
                    LDX #$08                        ; (4C7E) Set X to #$08 (8 / 00001000)
                    JSR l_4AB0                      ; (4C80) Jump to Subroutine at $4AB0
                    CLC                             ; (4C83) Clear Carry Flag
                    LDA $FB                         ; (4C84) Load A with $FB
                    ADC $FD                         ; (4C86) Add with Carry $FD
                    STA $FB                         ; (4C88) Store A to $FB
                    LDA $FC                         ; (4C8A) Load A with $FC
                    ADC #$00                        ; (4C8C) Add with Carry with #$00 (0 / 00000000)
                    STA $FC                         ; (4C8E) Store A to $FC
                    CLC                             ; (4C90) Clear Carry Flag
                    LDA $FB                         ; (4C91) Load A with $FB
                    ADC #$72                        ; (4C93) Add with Carry with #$72 (114 / 01110010)
                    STA $FB                         ; (4C95) Store A to $FB
                    LDA $FC                         ; (4C97) Load A with $FC
                    ADC #$93                        ; (4C99) Add with Carry with #$93 (147 / 10010011)
                    STA $FC                         ; (4C9B) Store A to $FC
                    LDY #$00                        ; (4C9D) Load Y with #$00 (0 / 00000000)
                    LDA ($FB),Y                     ; (4C9F) Load A with ($FB),Y
                    CMP #$12                        ; (4CA1) Subtract #$12 from A (18 / 00010010)
                    BCC l_4CB0                      ; (4CA3) Branch to $4CB0 if Carry Clear
                    CMP #$1A                        ; (4CA5) Subtract #$1A from A (26 / 00011010)
                    BCS l_4CB0                      ; (4CA7) Branch if Carry Set $4CB0
                    AND #$07                        ; (4CA9) Logical AND with Accumulator and #$07 (7 / 00000111)
                    LDX $AC                         ; (4CAB) Load X with $AC
                    STA $6930,X                     ; (4CAD) Store A to $6930,X

l_4CB0
                    LDX $AC                         ; (4CB0) Load X with $AC

l_4CB2
                    LDA $6930,X                     ; (4CB2) Load A with $6930,X
                    TAY                             ; (4CB5) Transfer A to Y
                    LDA $69B0,Y                     ; (4CB6) Load A with $69B0,Y
                    BMI l_4CCE                      ; (4CB9) Branch to $4CCE if minus 
                    BEQ l_4CDC                      ; (4CBB) Branch to $4CDC if Equal
                    CLC                             ; (4CBD) Clear Carry Flag
                    LDA MaydayXMap,X                     ; (4CBE) Load A with $6900,X
                    ADC #$01                        ; (4CC1) Add with Carry with #$01 (1 / 00000001)
                    STA MaydayXMap,X                     ; (4CC3) Store A to $6900,X
                    BCC l_4CDC                      ; (4CC6) Branch to $4CDC if Carry Clear
                    INC $6940,X                     ; (4CC8) Increment Memory $6940,X
                    JMP l_4CDC                      ; (4CCB) Jump to $4CDC

l_4CCE
                    SEC                             ; (4CCE) Set Carry Flag
                    LDA MaydayXMap,X                     ; (4CCF) Load A with $6900,X
                    SBC #$01                        ; (4CD2) Subtract with Carry #$01 (1 / 00000001)
                    STA MaydayXMap,X                     ; (4CD4) Store A to $6900,X
                    BCS l_4CDC                      ; (4CD7) Branch if Carry Set $4CDC
                    DEC $6940,X                     ; (4CD9) Decrement $6940,X

l_4CDC
                    LDA $69B8,Y                     ; (4CDC) Load A with $69B8,Y
                    BMI l_4CF4                      ; (4CDF) Branch to $4CF4 if minus 
                    BEQ l_4D02                      ; (4CE1) Branch to $4D02 if Equal
                    CLC                             ; (4CE3) Clear Carry Flag
                    LDA MaydayYMap,X                ; (4CE4) Load A with $6980,X
                    ADC #$01                        ; (4CE7) Add with Carry with #$01 (1 / 00000001)
                    STA MaydayYMap,X                ; (4CE9) Store A to $6980,X
                    BCC l_4D02                      ; (4CEC) Branch to $4D02 if Carry Clear
                    INC $69C0,X                     ; (4CEE) Increment Memory $69C0,X
                    JMP l_4D02                      ; (4CF1) Jump to $4D02

l_4CF4
                    SEC                             ; (4CF4) Set Carry Flag
                    LDA MaydayYMap,X                ; (4CF5) Load A with $6980,X
                    SBC #$01                        ; (4CF8) Subtract with Carry #$01 (1 / 00000001)
                    STA MaydayYMap,X                ; (4CFA) Store A to $6980,X
                    BCS l_4D02                      ; (4CFD) Branch if Carry Set $4D02
                    DEC $69C0,X                     ; (4CFF) Decrement $69C0,X

l_4D02
                    CPX #$0F                        ; (4D02) Subtract #$0F from X (15 / 00001111)
                    BEQ l_4D0C                      ; (4D04) Branch to $4D0C if Equal
                    LDA $69A0,Y                     ; (4D06) Load A with $69A0,Y
                    STA MaydaySpritePointer,X       ; (4D09) Store A to $6920,X

l_4D0C
                    LDX $AC                         ; (4D0C) Load X with $AC
                    DEX                             ; (4D0E) Decrement X
                    BEQ l_4D16                      ; (4D0F) Branch to $4D16 if Equal
                    STX $AC                         ; (4D11) Store X to $AC
                    JMP l_4C07                      ; (4D13) Jump to $4C07

l_4D16
                    RTS                             ; (4D16) Return from Subroutine

l_4D17
                    STA $FE                         ; (4D17) Store A to $FE
                    LDA #$00                        ; (4D19) Set A to #$00 (0 / 00000000)
                    STA $FD                         ; (4D1B) Store A to $FD
                    STX $02                         ; (4D1D) Store X to $02
                    LDX #$08                        ; (4D1F) Set X to #$08 (8 / 00001000)

l_4D21
                    LSR $02                         ; (4D21) Logical Shift Right $02
                    BCC l_4D28                      ; (4D23) Branch to $4D28 if Carry Clear
                    CLC                             ; (4D25) Clear Carry Flag
                    ADC $FE                         ; (4D26) Add with Carry $FE

l_4D28
                    ROR A                           ; (4D28) Rotate Right Accumulator
                    ROR $FD                         ; (4D29) Rotate Right $FD
                    DEX                             ; (4D2B) Decrement X
                    BNE l_4D21                      ; (4D2C) Branch to $4D21 if Not Equal
                    STA $FE                         ; (4D2E) Store A to $FE
                    LDX $FD                         ; (4D30) Load X with $FD
                    RTS                             ; (4D32) Return from Subroutine

l_4D33
                    DEC $6990,X                     ; (4D33) Decrement $6990,X
                    BEQ l_4D3B                      ; (4D36) Branch to $4D3B if Equal
                    JMP l_4D0C                      ; (4D38) Jump to $4D0C

l_4D3B
                    LDA #$18                        ; (4D3B) Set A to #$18 (24 / 00011000)
                    STA $6990,X                     ; (4D3D) Store A to $6990,X
                    DEC $6970,X                     ; (4D40) Decrement $6970,X
                    BEQ l_4D53                      ; (4D43) Branch to $4D53 if Equal
                    LDA $6970,X                     ; (4D45) Load A with $6970,X
                    AND #$01                        ; (4D48) Logical AND with Accumulator and #$01 (1 / 00000001)
                    CLC                             ; (4D4A) Clear Carry Flag
                    ADC #$AD                        ; (4D4B) Add with Carry with #$AD (173 / 10101101)
                    STA MaydaySpritePointer,X       ; (4D4D) Store A to $6920,X
                    JMP l_4D0C                      ; (4D50) Jump to $4D0C

l_4D53
                    LDA $6910,X                     ; (4D53) Load A with $6910,X
                    AND #$07                        ; (4D56) Logical AND with Accumulator and #$07 (7 / 00000111)
                    TAY                             ; (4D58) Transfer A to Y
                    LDA $03C0,Y                     ; (4D59) Load A with $03C0,Y
                    AND SpriteEnableRegister        ; (4D5C) Logical AND with Accumulator $D015
                    STA SpriteEnableRegister        ; (4D5F) Store A to $D015
                    LDA $03C0,Y                     ; (4D62) Load A with $03C0,Y
                    AND SpriteMulticolor            ; (4D65) Logical AND with Accumulator $D01C
                    STA SpriteMulticolor            ; (4D68) Store A to $D01C
                    TYA                             ; (4D6B) Transfer Y to A
                    ORA #$50                        ; (4D6C) Logical OR with Accumulator and #$50 (80 / 01010000)
                    STA $6910,X                     ; (4D6E) Store A to $6910,X
                    JMP l_4D0C                      ; (4D71) Jump to $4D0C

l_4D74
                    ORA SpriteMulticolor            ; (4D74) Logical OR with Accumulator and $D01C
                    STA SpriteMulticolor            ; (4D77) Store A to $D01C
                    LDA #$00                        ; (4D7A) Set A to #$00 (0 / 00000000)
                    STA $02FC                       ; (4D7C) Store A to $02FC
                    LDA $6910,X                     ; (4D7F) Load A with $6910,X
                    ORA #$70                        ; (4D82) Logical OR with Accumulator and #$70 (112 / 01110000)
                    STA $6910,X                     ; (4D84) Store A to $6910,X
                    LDA #$10                        ; (4D87) Set A to #$10 (16 / 00010000)
                    STA $6970,X                     ; (4D89) Store A to $6970,X
                    JSR l_4428                      ; (4D8C) Jump to Subroutine at $4428
                    JMP l_4D0C                      ; (4D8F) Jump to $4D0C

l_4D92
                    JSR l_4C00                      ; (4D92) Jump to Subroutine at $4C00
                    LDA #$00                        ; (4D95) Set A to #$00 (0 / 00000000)
                    STA CarCollision                       ; (4D97) Store A to $02FD
                    STA $02FC                       ; (4D9A) Store A to $02FC
                    RTS                             ; (4D9D) Return from Subroutine

* = $4D9E
            .byte $04,$10,$1F,$FF,$00,$FF,$00,$FF,$00,$FF,$0F,$2F,$00,$FF,$0C,$FF
            .byte $2F,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FD,$00,$FF,$00,$FF,$00,$FF
            .byte $24,$FF,$00,$FF,$00,$FF,$1F,$0F,$09,$00,$20,$FF,$00,$FF,$00,$FF
            .byte $0C,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$0F,$FF,$00,$FF,$00,$FF
            .byte $A0,$FF,$00,$FF,$00,$FF,$00,$2F,$00,$FF,$00,$6F,$00,$0F,$0F,$FF
            .byte $2E,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF
            .byte $00,$FF

* = $4E00

l_4E00
                    LDA $033C                       ; (4E00) Load A with $033C
                    STA $AE                         ; (4E03) Store A to $AE
                    LDA $033D                       ; (4E05) Load A with $033D
                    STA $AF                         ; (4E08) Store A to $AF
                    LDA $0335                       ; (4E0A) Load A with $0335
                    BEQ l_4E2E                      ; (4E0D) Branch to $4E2E if Equal
                    BMI l_4E21                      ; (4E0F) Branch to $4E21 if minus 
                    CLC                             ; (4E11) Clear Carry Flag
                    LDA #$7E                        ; (4E12) Set A to #$7E (126 / 01111110)
                    ADC $AE                         ; (4E14) Add with Carry $AE
                    STA $AE                         ; (4E16) Store A to $AE
                    LDA $AF                         ; (4E18) Load A with $AF
                    ADC #$00                        ; (4E1A) Add with Carry with #$00 (0 / 00000000)
                    STA $AF                         ; (4E1C) Store A to $AF
                    JMP l_4E2E                      ; (4E1E) Jump to $4E2E

l_4E21
                    SEC                             ; (4E21) Set Carry Flag
                    LDA $AE                         ; (4E22) Load A with $AE
                    SBC #$7E                        ; (4E24) Subtract with Carry #$7E (126 / 01111110)
                    STA $AE                         ; (4E26) Store A to $AE
                    LDA $AF                         ; (4E28) Load A with $AF
                    SBC #$00                        ; (4E2A) Subtract with Carry #$00 (0 / 00000000)
                    STA $AF                         ; (4E2C) Store A to $AF

l_4E2E
                    LDA $0334                       ; (4E2E) Load A with $0334
                    BEQ l_4E52                      ; (4E31) Branch to $4E52 if Equal
                    BMI l_4E45                      ; (4E33) Branch to $4E45 if minus 
                    CLC                             ; (4E35) Clear Carry Flag
                    LDA #$01                        ; (4E36) Set A to #$01 (1 / 00000001)
                    ADC $AE                         ; (4E38) Add with Carry $AE
                    STA $AE                         ; (4E3A) Store A to $AE
                    LDA $AF                         ; (4E3C) Load A with $AF
                    ADC #$00                        ; (4E3E) Add with Carry with #$00 (0 / 00000000)
                    STA $AF                         ; (4E40) Store A to $AF
                    JMP l_4E52                      ; (4E42) Jump to $4E52

l_4E45
                    SEC                             ; (4E45) Set Carry Flag
                    LDA $AE                         ; (4E46) Load A with $AE
                    SBC #$01                        ; (4E48) Subtract with Carry #$01 (1 / 00000001)
                    STA $AE                         ; (4E4A) Store A to $AE
                    LDA $AF                         ; (4E4C) Load A with $AF
                    SBC #$00                        ; (4E4E) Subtract with Carry #$00 (0 / 00000000)
                    STA $AF                         ; (4E50) Store A to $AF

l_4E52
                    CLC                             ; (4E52) Clear Carry Flag
                    LDA $AE                         ; (4E53) Load A with $AE
                    ADC #$08                        ; (4E55) Add with Carry with #$08 (8 / 00001000)
                    STA $AE                         ; (4E57) Store A to $AE
                    LDA $AF                         ; (4E59) Load A with $AF
                    ADC #$03                        ; (4E5B) Add with Carry with #$03 (3 / 00000011)
                    STA $AF                         ; (4E5D) Store A to $AF
                    SEC                             ; (4E5F) Set Carry Flag
                    LDA $AE                         ; (4E60) Load A with $AE
                    SBC $C9                         ; (4E62) Subtract with Carry $C9
                    TAX                             ; (4E64) Transfer A to X
                    LDA $AF                         ; (4E65) Load A with $AF
                    SBC $CA                         ; (4E67) Subtract with Carry $CA
                    STA $FE                         ; (4E69) Store A to $FE
                    LDY #$03                        ; (4E6B) Load Y with #$03 (3 / 00000011)

l_4E6D
                    LDA $FE                         ; (4E6D) Load A with $FE
                    CMP $4EC4,Y                     ; (4E6F) Compare Accumulator $4EC4,Y
                    BNE l_4E7A                      ; (4E72) Branch to $4E7A if Not Equal
                    TXA                             ; (4E74) Transfer X to A
                    CMP $4EC0,Y                     ; (4E75) Compare Accumulator $4EC0,Y
                    BEQ l_4E80                      ; (4E78) Branch to $4E80 if Equal

l_4E7A
                    DEY                             ; (4E7A) Decrement Y Register
                    BPL l_4E6D                      ; (4E7B) Branch to $4E6D if positive
                    JMP l_4E97                      ; (4E7D) Jump to $4E97

l_4E80
                    STY $02                         ; (4E80) Store Y Register $02
                    LDY #$00                        ; (4E82) Load Y with #$00 (0 / 00000000)
                    LDA ($C9),Y                     ; (4E84) Load A with ($C9),Y
                    CMP #$12                        ; (4E86) Subtract #$12 from A (18 / 00010010)
                    BCC l_4EA0                      ; (4E88) Branch to $4EA0 if Carry Clear
                    CMP #$1A                        ; (4E8A) Subtract #$1A from A (26 / 00011010)
                    BCS l_4EA0                      ; (4E8C) Branch if Carry Set $4EA0
                    LDY $02                         ; (4E8E) Load Y with Data from $02
                    LDA $4EC8,Y                     ; (4E90) Load A with $4EC8,Y
                    LDY #$00                        ; (4E93) Load Y with #$00 (0 / 00000000)
                    STA ($C9),Y                     ; (4E95) Store Accumulator ($C9),Y

l_4E97
                    LDA $AE                         ; (4E97) Load A with $AE
                    STA $C9                         ; (4E99) Store A to $C9
                    LDA $AF                         ; (4E9B) Load A with $AF
                    STA $CA                         ; (4E9D) Store A to $CA
                    RTS                             ; (4E9F) Return from Subroutine

l_4EA0
                    LDY $02                         ; (4EA0) Load Y with Data from $02
                    CMP $4ECC,Y                     ; (4EA2) Compare Accumulator $4ECC,Y
                    BEQ l_4E97                      ; (4EA5) Branch to $4E97 if Equal
                    LDX $03A2                       ; (4EA7) Load X with $03A2
                    INX                             ; (4EAA) Increment X
                    CPX #$14                        ; (4EAB) Subtract #$14 from X (20 / 00010100)
                    BNE l_4EB4                      ; (4EAD) Branch to $4EB4 if Not Equal
                    JSR l_4900                      ; (4EAF) Jump to Subroutine at $4900
                    LDX #$12                        ; (4EB2) Set X to #$12 (18 / 00010010)

l_4EB4
                    STX $03A2                       ; (4EB4) Store X Register $03A2
                    JMP l_4E97                      ; (4EB7) Jump to $4E97

* = $4EBA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$86,$03,$7A,$FD,$FE,$00,$01,$FF,$18,$12
            .byte $14,$16,$1F,$1C,$1D,$1E,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF

* = $4F00

l_4F00
                    JSR l_4FEF                      ; (4F00) Jump to Subroutine at $4FEF
                    AND #$07                        ; (4F03) Logical AND with Accumulator and #$07 (7 / 00000111)
                    TAY                             ; (4F05) Transfer A to Y
                    LDA $4FC0,Y                     ; (4F06) Load A with $4FC0,Y
                    STA $69FC                       ; (4F09) Store A to $69FC
                    LDA $4FC8,Y                     ; (4F0C) Load A with $4FC8,Y
                    STA $69FD                       ; (4F0F) Store A to $69FD
                    NOP                             ; (4F12) No operation
                    NOP                             ; (4F13) No operation
                    LDA $4FD0,Y                     ; (4F14) Load A with $4FD0,Y
                    STA $69FE                       ; (4F17) Store A to $69FE
                    LDA $4FD8,Y                     ; (4F1A) Load A with $4FD8,Y
                    STA $69FF                       ; (4F1D) Store A to $69FF
                    LDA $4FE0,Y                     ; (4F20) Load A with $4FE0,Y
                    STA MayDayLandLocation          ; (4F23) Store A to $D3
                    RTS                             ; (4F25) Return from Subroutine

* = $4F26
            .byte $60,$60,$40,$18,$E8,$40,$E8,$40,$18,$E8

* = $4F30

l_4F30
                    SEI                             ; (4F30) Set Interrupt Disable Flag
                    LDA #$8A                        ; (4F31) Set A to #$8A (138 / 10001010)
                    STA IRQExecAddr1                ; (4F33) Store A to $0314
                    LDA #$51                        ; (4F36) Set A to #$51 (81 / 01010001)
                    STA IRQExecAddr2                ; (4F38) Store A to $0315
                    CLI                             ; (4F3B) Clear Interrupt Disable Flag
                    LDA #$98                        ; (4F3C) Set A to #$98 (152 / 10011000)
                    STA ScreenControlRegister       ; (4F3E) Store A to $D011
                    LDA #$08                        ; (4F41) Set A to #$08 (8 / 00001000)
                    STA ScreenControl               ; (4F43) Store A to $D016
                    LDA #$00                        ; (4F46) Set A to #$00 (0 / 00000000)
                    STA BackgroundColour            ; (4F48) Store A to $D021
                    STA ExtraBackgroundColor1       ; (4F4B) Store A to $D022
                    LDA VIC2MemSetup                ; (4F4E) Load A with $D018
                    AND #$F0                        ; (4F51) Logical AND with Accumulator and #$F0 (240 / 11110000)
                    ORA #$0C                        ; (4F53) Logical OR with Accumulator and #$0C (12 / 00001100)
                    STA VIC2MemSetup                ; (4F55) Store A to $D018
                    LDA #$00                        ; (4F58) Set A to #$00 (0 / 00000000)
                    STA SpriteEnableRegister        ; (4F5A) Store A to $D015
                    LDA TimerAControl               ; (4F5D) Load A with $DC0E
                    AND #$FE                        ; (4F60) Logical AND with Accumulator and #$FE (254 / 11111110)
                    STA TimerAControl               ; (4F62) Store A to $DC0E
                    LDA TimerAControl               ; (4F65) Load A with $DC0E
                    AND #$FE                        ; (4F68) Logical AND with Accumulator and #$FE (254 / 11111110)
                    STA TimerAControl               ; (4F6A) Store A to $DC0E
                    LDA #$8B                        ; (4F6D) Set A to #$8B (139 / 10001011)
                    STA CurrentRasterLine           ; (4F6F) Store A to $D012
                    LDA #$00                        ; (4F72) Set A to #$00 (0 / 00000000)
                    STA $D418                       ; (4F74) Store A to $D418
                    LDA #$00                        ; (4F77) Set A to #$00 (0 / 00000000)
                    STA $0346                       ; (4F79) Store A to $0346
                    JSR l_54F0                      ; (4F7C) Jump to Subroutine at $54F0

l_4F7F
                    JSR l_4260                      ; (4F7F) Jump to Subroutine at $4260
                    LDA $02                         ; (4F82) Load A with $02
                    BNE l_4FBB                      ; (4F84) Branch to $4FBB if Not Equal
                    LDA $FD                         ; (4F86) Load A with $FD
                    BEQ l_4FA4                      ; (4F88) Branch to $4FA4 if Equal
                    BMI l_4F99                      ; (4F8A) Branch to $4F99 if minus 
                    LDY $02E0                       ; (4F8C) Load Y with Data from $02E0
                    INY                             ; (4F8F) Increment Y Register
                    CPY #$04                        ; (4F90) Subtract #$04 from Y (4 / 00000100)
                    BNE l_4FA1                      ; (4F92) Branch to $4FA1 if Not Equal
                    LDY #$03                        ; (4F94) Load Y with #$03 (3 / 00000011)
                    JMP l_4FA1                      ; (4F96) Jump to $4FA1

l_4F99
                    LDY $02E0                       ; (4F99) Load Y with Data from $02E0
                    DEY                             ; (4F9C) Decrement Y Register
                    BNE l_4FA1                      ; (4F9D) Branch to $4FA1 if Not Equal
                    LDY #$01                        ; (4F9F) Load Y with #$01 (1 / 00000001)

l_4FA1
                    STY $02E0                       ; (4FA1) Store Y Register $02E0

l_4FA4
                    LDY #$50                        ; (4FA4) Load Y with #$50 (80 / 01010000)

l_4FA6
                    LDX #$FF                        ; (4FA6) Set X to #$FF (255 / 11111111)

l_4FA8
                    DEX                             ; (4FA8) Decrement X
                    BNE l_4FA8                      ; (4FA9) Branch to $4FA8 if Not Equal
                    DEY                             ; (4FAB) Decrement Y Register
                    BNE l_4FA6                      ; (4FAC) Branch to $4FA6 if Not Equal
                    INC $D9                         ; (4FAE) Increment Memory $D9
                    JSR l_542D                      ; (4FB0) Jump to Subroutine at $542D
                    LDA EndGameFlag                       ; (4FB3) Load A with $0313
                    BEQ l_4F7F                      ; (4FB6) Branch to $4F7F if Equal
                    JMP l_4BA0                      ; (4FB8) Jump to $4BA0

l_4FBB
                    JMP l_FCE2                      ; (4FBB) Jump to $FCE2

* = $4FBE
            .byte $EA,$EA,$40,$18,$E8,$40,$E8,$40,$18,$E8,$00,$02,$03,$00,$03,$00
            .byte $02,$03,$28,$28,$28,$D8,$D8,$A7,$A7,$A7,$00,$00,$00,$01,$01,$03
            .byte $03,$03,$F4,$F4,$F0,$F8,$F0,$F8,$FC,$FC,$D4,$A9,$80,$8D,$12,$D4
            .byte $AD

* = $4FEF

l_4FEF
                    LDA #$FF                        ; (4FEF) Set A to #$FF (255 / 11111111)
                    STA Voice3Frequency1            ; (4FF1) Store A to $D40E
                    STA Voice3Frequency2            ; (4FF4) Store A to $D40F
                    LDA #$80                        ; (4FF7) Set A to #$80 (128 / 10000000)
                    STA Voice3Control               ; (4FF9) Store A to $D412
                    LDA $D41B                       ; (4FFC) Load A with $D41B
                    RTS                             ; (4FFF) Return from Subroutine

l_5000
                    SEI                             ; (5000) Set Interrupt Disable Flag
                    LDA #$26                        ; (5001) Set A to #$26 (38 / 00100110)
                    STA IRQExecAddr1                ; (5003) Store A to $0314
                    LDA #$50                        ; (5006) Set A to #$50 (80 / 01010000)
                    STA IRQExecAddr2                ; (5008) Store A to $0315
                    CLI                             ; (500B) Clear Interrupt Disable Flag
                    LDA #$8B                        ; (500C) Set A to #$8B (139 / 10001011)
                    STA CurrentRasterLine           ; (500E) Store A to $D012
                    LDA ScreenControlRegister       ; (5011) Load A with $D011
                    AND #$7F                        ; (5014) Logical AND with Accumulator and #$7F (127 / 01111111)
                    STA ScreenControlRegister       ; (5016) Store A to $D011
                    LDA IRQControlRegister          ; (5019) Load A with $D01A
                    ORA #$01                        ; (501C) Logical OR with Accumulator and #$01 (1 / 00000001)
                    STA IRQControlRegister          ; (501E) Store A to $D01A
                    RTS                             ; (5021) Return from Subroutine

* = $5022
            .byte $60,$60,$60,$60

* = $5026
                    LDA IRQStatusRegister           ; (5026) Load A with $D019
                    TAX                             ; (5029) Transfer A to X
                    AND #$01                        ; (502A) Logical AND with Accumulator and #$01 (1 / 00000001)
                    BNE l_504C                      ; (502C) Branch to $504C if Not Equal
                    LDA $02FF                       ; (502E) Load A with $02FF
                    BEQ l_5036                      ; (5031) Branch to $5036 if Equal
                    JMP l_518A                      ; (5033) Jump to $518A

l_5036
                    TXA                             ; (5036) Transfer X to A
                    AND #$02                        ; (5037) Logical AND with Accumulator and #$02 (2 / 00000010)
                    BEQ l_503E                      ; (5039) Branch to $503E if Equal
                    JMP l_5170                      ; (503B) Jump to $5170

l_503E
                    TXA                             ; (503E) Transfer X to A
                    AND #$04                        ; (503F) Logical AND with Accumulator and #$04 (4 / 00000100)
                    BEQ l_5046                      ; (5041) Branch to $5046 if Equal
                    JMP l_5137                      ; (5043) Jump to $5137

l_5046
                    JMP l_518A                      ; (5046) Jump to $518A

* = $5049
            .byte $4C,$8A,$51

* = $504C

l_504C
                    STA IRQStatusRegister           ; (504C) Store A to $D019
                    LDA CurrentRasterLine           ; (504F) Load A with $D012
                    CMP #$8F                        ; (5052) Subtract #$8F from A (143 / 10001111)
                    BCC l_50AF                      ; (5054) Branch to $50AF if Carry Clear
                    CMP #$9C                        ; (5056) Subtract #$9C from A (156 / 10011100)
                    BCS l_505D                      ; (5058) Branch if Carry Set $505D
                    JMP l_50F9                      ; (505A) Jump to $50F9

l_505D
                    LDA IRQControlRegister          ; (505D) Load A with $D01A
                    AND #$F9                        ; (5060) Logical AND with Accumulator and #$F9 (249 / 11111001)
                    STA IRQControlRegister          ; (5062) Store A to $D01A
                    LDA #$8D                        ; (5065) Set A to #$8D (141 / 10001101)
                    STA CurrentRasterLine           ; (5067) Store A to $D012
                    LDA ScreenControlRegister       ; (506A) Load A with $D011
                    AND #$F8                        ; (506D) Logical AND with Accumulator and #$F8 (248 / 11111000)
                    ORA #$0B                        ; (506F) Logical OR with Accumulator and #$0B (11 / 00001011)
                    STA ScreenControlRegister       ; (5071) Store A to $D011
                    LDA ScreenControl               ; (5074) Load A with $D016
                    AND #$F8                        ; (5077) Logical AND with Accumulator and #$F8 (248 / 11111000)
                    ORA #$08                        ; (5079) Logical OR with Accumulator and #$08 (8 / 00001000)
                    STA ScreenControl               ; (507B) Store A to $D016
                    LDA #$0F                        ; (507E) Set A to #$0F (15 / 00001111)
                    STA BackgroundColour            ; (5080) Store A to $D021
                    LDY #$08                        ; (5083) Load Y with #$08 (8 / 00001000)
                    STY ExtraBackgroundColor1       ; (5085) Store Y Register $D022
                    INY                             ; (5088) Increment Y Register
                    STY ExtraBackgroundColor2       ; (5089) Store Y Register $D023
                    LDA VIC2MemSetup                ; (508C) Load A with $D018
                    AND #$F0                        ; (508F) Logical AND with Accumulator and #$F0 (240 / 11110000)
                    ORA #$0C                        ; (5091) Logical OR with Accumulator and #$0C (12 / 00001100)
                    STA VIC2MemSetup                ; (5093) Store A to $D018
                    JSR l_47FC                      ; (5096) Jump to Subroutine at $47FC
                    JSR l_5DA0                      ; (5099) Jump to Subroutine at $5DA0
                    JSR l_4170                      ; (509C) Jump to Subroutine at $4170
                    JMP l_51E0                      ; (509F) Jump to $51E0

* = $50A2
            .byte $4C,$E0,$51,$4C,$E0,$51,$4C,$E0,$51,$4C,$E0,$51,$EA

* = $50AF

l_50AF
                    LDA #$06                        ; (50AF) Set A to #$06 (6 / 00000110)
                    STA BackgroundColour            ; (50B1) Store A to $D021
                    STA ExtraBackgroundColor1       ; (50B4) Store A to $D022
                    STA ExtraBackgroundColor2       ; (50B7) Store A to $D023
                    STA ExtraSpriteColor1           ; (50BA) Store A to $D025
                    STA ExtraSpriteColor2           ; (50BD) Store A to $D026
                    LDA #$9A                        ; (50C0) Set A to #$9A (154 / 10011010)
                    STA CurrentRasterLine           ; (50C2) Store A to $D012
                    LDA VIC2MemSetup                ; (50C5) Load A with $D018
                    AND #$F0                        ; (50C8) Logical AND with Accumulator and #$F0 (240 / 11110000)
                    ORA #$0E                        ; (50CA) Logical OR with Accumulator and #$0E (14 / 00001110)
                    STA VIC2MemSetup                ; (50CC) Store A to $D018
                    LDA ScreenControlRegister       ; (50CF) Load A with $D011
                    AND #$F0                        ; (50D2) Logical AND with Accumulator and #$F0 (240 / 11110000)
                    ORA $033F                       ; (50D4) Logical OR with Accumulator and $033F
                    STA ScreenControlRegister       ; (50D7) Store A to $D011
                    LDA ScreenControl               ; (50DA) Load A with $D016
                    AND #$F0                        ; (50DD) Logical AND with Accumulator and #$F0 (240 / 11110000)
                    ORA $033E                       ; (50DF) Logical OR with Accumulator and $033E
                    STA ScreenControl               ; (50E2) Store A to $D016
                    LDA #$06                        ; (50E5) Set A to #$06 (6 / 00000110)
                    STA Sprite0Colour               ; (50E7) Store A to $D027
                    STA Sprite1Colour               ; (50EA) Store A to $D028
                    STA Sprite2Colour               ; (50ED) Store A to $D029
                    STA Sprite3Colour               ; (50F0) Store A to $D02A
                    STA Sprite6Colour               ; (50F3) Store A to $D02D
                    JMP l_518A                      ; (50F6) Jump to $518A

l_50F9
                    LDA #$0B                        ; (50F9) Set A to #$0B (11 / 00001011)
                    STA BackgroundColour            ; (50FB) Store A to $D021
                    LDA #$07                        ; (50FE) Set A to #$07 (7 / 00000111)
                    STA ExtraBackgroundColor1       ; (5100) Store A to $D022
                    STA ExtraSpriteColor2           ; (5103) Store A to $D026
                    LDA #$05                        ; (5106) Set A to #$05 (5 / 00000101)
                    STA ExtraBackgroundColor2       ; (5108) Store A to $D023
                    LDA #$FB                        ; (510B) Set A to #$FB (251 / 11111011)
                    STA CurrentRasterLine           ; (510D) Store A to $D012
                    LDA #$02                        ; (5110) Set A to #$02 (2 / 00000010)
                    STA ExtraSpriteColor1           ; (5112) Store A to $D025
                    LDA #$0A                        ; (5115) Set A to #$0A (10 / 00001010)
                    STA Sprite0Colour               ; (5117) Store A to $D027
                    LDA #$0F                        ; (511A) Set A to #$0F (15 / 00001111)
                    STA Sprite1Colour               ; (511C) Store A to $D028
                    LDA #$01                        ; (511F) Set A to #$01 (1 / 00000001)
                    STA Sprite2Colour               ; (5121) Store A to $D029
                    LDA #$00                        ; (5124) Set A to #$00 (0 / 00000000)
                    STA Sprite6Colour               ; (5126) Store A to $D02D
                    STA Sprite3Colour               ; (5129) Store A to $D02A
                    LDA IRQControlRegister          ; (512C) Load A with $D01A
                    ORA #$07                        ; (512F) Logical OR with Accumulator and #$07 (7 / 00000111)
                    STA IRQControlRegister          ; (5131) Store A to $D01A
                    JMP l_518A                      ; (5134) Jump to $518A

l_5137
                    STA IRQStatusRegister           ; (5137) Store A to $D019
                    LDA SpriteSpriteCollision       ; (513A) Load A with $D01E
                    TAX                             ; (513D) Transfer A to X
                    AND #$30                        ; (513E) Logical AND with Accumulator and #$30 (48 / 00110000)
                    BNE l_518A                      ; (5140) Branch to $518A if Not Equal
                    TXA                             ; (5142) Transfer X to A
                    AND #$08                        ; (5143) Logical AND with Accumulator and #$08 (8 / 00001000)
                    BEQ l_5157                      ; (5145) Branch to $5157 if Equal
                    TXA                             ; (5147) Transfer X to A
                    BPL l_518A                      ; (5148) Branch to $518A if positive
                    LDA $02E1                       ; (514A) Load A with $02E1
                    BEQ l_518A                      ; (514D) Branch to $518A if Equal
                    LDA #$80                        ; (514F) Set A to #$80 (128 / 10000000)
                    STA EndGameFlag                       ; (5151) Store A to $0313
                    JMP l_518A                      ; (5154) Jump to $518A

l_5157
                    TXA                             ; (5157) Transfer X to A
                    BMI l_5190                      ; (5158) Branch to $5190 if minus 
                    AND #$40                        ; (515A) Logical AND with Accumulator and #$40 (64 / 01000000)
                    BNE l_5167                      ; (515C) Branch to $5167 if Not Equal
                    TXA                             ; (515E) Transfer X to A
                    AND #$07                        ; (515F) Logical AND with Accumulator and #$07 (7 / 00000111)
                    STA CarCollision                       ; (5161) Store A to $02FD
                    JMP l_518A                      ; (5164) Jump to $518A

l_5167
                    TXA                             ; (5167) Transfer X to A
                    AND #$07                        ; (5168) Logical AND with Accumulator and #$07 (7 / 00000111)
                    STA $02FC                       ; (516A) Store A to $02FC
                    JMP l_517D                      ; (516D) Jump to $517D

l_5170
                    STA IRQStatusRegister           ; (5170) Store A to $D019
                    LDA SpriteBackgroundCollision   ; (5173) Load A with $D01F
                    TAX                             ; (5176) Transfer A to X
                    BMI l_51A2                      ; (5177) Branch to $51A2 if minus 
                    AND #$40                        ; (5179) Logical AND with Accumulator and #$40 (64 / 01000000)
                    BEQ l_518A                      ; (517B) Branch to $518A if Equal

l_517D
                    LDA #$FF                        ; (517D) Set A to #$FF (255 / 11111111)
                    STA $694F                       ; (517F) Store A to $694F
                    STA $69CF                       ; (5182) Store A to $69CF
                    NOP                             ; (5185) No operation
                    NOP                             ; (5186) No operation
                    NOP                             ; (5187) No operation
                    NOP                             ; (5188) No operation
                    NOP                             ; (5189) No operation

l_518A
                    PLA                             ; (518A) Pull Accumulator from Stack
                    TAY                             ; (518B) Transfer A to Y
                    PLA                             ; (518C) Pull Accumulator from Stack
                    TAX                             ; (518D) Transfer A to X
                    PLA                             ; (518E) Pull Accumulator from Stack
                    RTI                             ; (518F) Return from Interrupt

l_5190
                    TXA                             ; (5190) Transfer X to A
                    AND #$07                        ; (5191) Logical AND with Accumulator and #$07 (7 / 00000111)
                    BEQ l_518A                      ; (5193) Branch to $518A if Equal
                    TAY                             ; (5195) Transfer A to Y
                    AND SpriteMulticolor            ; (5196) Logical AND with Accumulator $D01C
                    BNE l_518A                      ; (5199) Branch to $518A if Not Equal
                    TYA                             ; (519B) Transfer Y to A
                    STA CarCollision                       ; (519C) Store A to $02FD
                    JMP l_51A2                      ; (519F) Jump to $51A2

l_51A2
                    LDA $0346                       ; (51A2) Load A with $0346
                    BNE l_518A                      ; (51A5) Branch to $518A if Not Equal
                    LDA ForwardReverse                       ; (51A7) Load A with $03A4
                    EOR #$08                        ; (51AA) Exclusive OR (XOR) with Accumulator and #$08 (8 / 00001000)
                    STA ForwardReverse                       ; (51AC) Store A to $03A4
                    CLC                             ; (51AF) Clear Carry Flag
                    LDA $0340                       ; (51B0) Load A with $0340
                    ADC #$03                        ; (51B3) Add with Carry with #$03 (3 / 00000011)
                    CMP #$40                        ; (51B5) Subtract #$40 from A (64 / 01000000)
                    BCC l_51BB                      ; (51B7) Branch to $51BB if Carry Clear
                    LDA #$3F                        ; (51B9) Set A to #$3F (63 / 00111111)

l_51BB
                    STA $0340                       ; (51BB) Store A to $0340
                    LDY DamageCount                       ; (51BE) Load Y with Data from $03A1
                    INY                             ; (51C1) Increment Y Register
                    CPY #$28                        ; (51C2) Subtract #$28 from Y (40 / 00101000)
                    BCC l_51CB                      ; (51C4) Branch to $51CB if Carry Clear
                    LDY #$27                        ; (51C6) Load Y with #$27 (39 / 00100111)
                    STY EndGameFlag                       ; (51C8) Store Y Register $0313

l_51CB
                    STY DamageCount                       ; (51CB) Store Y Register $03A1
                    INC $0346                       ; (51CE) Increment Memory $0346
                    LDA $0347                       ; (51D1) Load A with $0347
                    STA CarFacingDirection                       ; (51D4) Store A to $03A0
                    JMP l_518A                      ; (51D7) Jump to $518A

* = $51DA
            .byte $FA,$E2,$FE,$E3,$00,$F3

* = $51E0

l_51E0
                    LDA $02E0                       ; (51E0) Load A with $02E0
                    LSR A                           ; (51E3) Logical Shift Right Accumulator
                    BCC l_51E9                      ; (51E4) Branch to $51E9 if Carry Clear
                    JSR l_7AAB                      ; (51E6) Jump to Subroutine at $7AAB

l_51E9
                    LDA $02E0                       ; (51E9) Load A with $02E0
                    LSR A                           ; (51EC) Logical Shift Right Accumulator
                    BEQ l_51F2                      ; (51ED) Branch to $51F2 if Equal
                    JSR l_4A50                      ; (51EF) Jump to Subroutine at $4A50

l_51F2
                    JMP l_518A                      ; (51F2) Jump to $518A

* = $51F5
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF

* = $5200

l_5200
                    LDA EndGameFlag                 ; (5200) #00 Continue / #80 Mayday found / Ends game #27
                    BNE l_5216                      ; (5203) Branch to $5216 if game is ending. This will RTS.
                    LDY MaydayLoopCounter           ; (5205) Load MaydayLoopCounter. Loops from 7 to 0.
                    DEY                             ; (5208) Decrement MaydayLoopCounter
                    STY MaydayLoopCounter           ; (5209) Store MaydayLoopCounter
                    BNE l_5216                      ; (520C) Branch to $5216 if Not zero.
                    LDA MaydayLanded                ; (520E) Load A with $02FE. #00 continue circling / #01 Landed.
                    BEQ l_5218                      ; (5211) Branch to $5218 if Equal
                    JMP l_52A4                      ; (5213) Jump to $52A4

l_5216
                    RTS                             ; (5216) Return from Subroutine

* = $5217
            .byte $60

* = $5218

l_5218
                    LDY #$07                        ; (5218) Load Y with #$07 (7 / 00000111).
                    STY MaydayLoopCounter           ; (521A) Reset loop counter ($034F).
                    LDA $6930                       ; (521D) Load A with $6930. An index between #07-00
                    TAY                             ; (5220) Transfer A to Y
                    LDA $69B0,Y                     ; (5221) Load A with $69B0,Y. 7:Neg (NW), 6:Neg (W), 5:neg (SW), 4:zero (W), 3:one (SE), 2:one (E), 1:one (NE), 0:zero (N).
                    BMI ReduceMaydayXMap            ; (5224) Branch to $5239 if minus. $69B0,7 to $69B0,5 are minus.
                    BEQ GoingNorthOrSouth           ; (5226) Branch to $5247 if Equal. $69B0,4 and $69B0,0 are zero. 
                    CLC                             ; (5228) Clear Carry Flag
                    LDA MaydayXMap                  ; (5229) Load A with $6900
                    ADC #$01                        ; (522C) Add with Carry with #$01 (1 / 00000001)
                    STA MaydayXMap                  ; (522E) Store A to $6900
                    BCC GoingNorthOrSouth           ; (5231) Branch to $5247 if Carry Clear
                    INC $6940                       ; (5233) Increment Memory $6940
                    JMP GoingNorthOrSouth           ; (5236) Jump to $5247

ReduceMaydayXMap
                    SEC                             ; (5239) Set Carry Flag
                    LDA MaydayXMap                  ; (523A) Load A with $6900
                    SBC #$01                        ; (523D) Subtract with Carry #$01 (1 / 00000001)
                    STA MaydayXMap                  ; (523F) Store A to $6900
                    BCS GoingNorthOrSouth           ; (5242) Branch if Carry Set $5247
                    DEC $6940                       ; (5244) Decrement $6940

GoingNorthOrSouth
                    LDA $69B8,Y                     ; (5247) Load A with $69B8,Y. 7:Neg (NW), 6:Neg (W), 5:Zero (SW), 4:Pos (W), 3:Pos (SE), 2:Pos (E), 1:Zero (NE), 0:Neg (N).
                    BMI ReduceMaydayYMap            ; (524A) Branch to $525F if minus 
                    BEQ l_526D                      ; (524C) Branch to $526D if Equal
                    CLC                             ; (524E) Clear Carry Flag
                    LDA MaydayYMap                  ; (524F) Load A with $6980
                    ADC #$01                        ; (5252) Add with Carry with #$01 (1 / 00000001)
                    STA MaydayYMap                  ; (5254) Store A to $6980
                    BCC l_526D                      ; (5257) Branch to $526D if Carry Clear
                    INC $69C0                       ; (5259) Increment Memory $69C0
                    JMP l_526D                      ; (525C) Jump to $526D

ReduceMaydayYMap
                    SEC                             ; (525F) Set Carry Flag
                    LDA MaydayYMap                  ; (5260) Load A with $6980
                    SBC #$01                        ; (5263) Subtract with Carry #$01 (1 / 00000001)
                    STA MaydayYMap                  ; (5265) Store A to $6980
                    BCS l_526D                      ; (5268) Branch if Carry Set $526D
                    DEC $69C0                       ; (526A) Decrement $69C0

l_526D
                    LDA MaydaySpritePointerIndex,Y  ; (526D) Load A with $03E0,Y. 
                    STA MaydaySpritePointer         ; (5270) Store A to $6920
                    LDY $69F8                       ; (5273) Load Y with Data from $69F8
                    DEY                             ; (5276) Decrement Y Register
                    STY $69F8                       ; (5277) Store Y Register $69F8
                    BNE l_52A1                      ; (527A) Branch to $52A1 if Not Equal
                    CLC                             ; (527C) Clear Carry Flag
                    LDA $69F9                       ; (527D) Load A with $69F9
                    ADC #$02                        ; (5280) Add with Carry with #$02 (2 / 00000010)
                    STA $69F9                       ; (5282) Store A to $69F9
                    NOP                             ; (5285) No operation
                    CMP MayDayLandLocation                         ; (5286) Subtract $D3 from A
                    BNE l_5290                      ; (5288) Branch to $5290 if Not Equal
                    INC MaydayLanded                ; (528A) Increment Memory $02FE. #00 continue circling / #01 Landed.
                    JMP l_5296                      ; (528D) Jump to $5296

l_5290
                    LDY $69F9                       ; (5290) Load Y with Data from $69F9
                    STY $69F8                       ; (5293) Store Y Register $69F8

l_5296
                    LDY $6930                       ; (5296) Load Y with Data from $6930
                    DEY                             ; (5299) Decrement Y Register
                    BPL l_529E                      ; (529A) Branch to $529E if positive
                    LDY #$07                        ; (529C) Load Y with #$07 (7 / 00000111)

l_529E
                    STY $6930                       ; (529E) Store Y Register $6930

l_52A1
                    JMP l_5315                      ; (52A1) Jump to $5315

l_52A4
                    LDY #$08                        ; (52A4) Load Y with #$08 (8 / 00001000)
                    STY MaydayLoopCounter                       ; (52A6) Store Y Register $034F
                    LDA $6940                       ; (52A9) Load A with $6940
                    CMP $69FD                       ; (52AC) Subtract $69FD from A
                    BCC l_52D1                      ; (52AF) Branch to $52D1 if Carry Clear
                    BEQ l_52B6                      ; (52B1) Branch to $52B6 if Equal
                    JMP l_52C0                      ; (52B3) Jump to $52C0

l_52B6
                    LDA MaydayXMap                       ; (52B6) Load A with $6900
                    CMP $69FC                       ; (52B9) Subtract $69FC from A
                    BCC l_52D1                      ; (52BC) Branch to $52D1 if Carry Clear
                    BEQ l_52DF                      ; (52BE) Branch to $52DF if Equal

l_52C0
                    SEC                             ; (52C0) Set Carry Flag
                    LDA MaydayXMap                       ; (52C1) Load A with $6900
                    SBC #$01                        ; (52C4) Subtract with Carry #$01 (1 / 00000001)
                    STA MaydayXMap                       ; (52C6) Store A to $6900
                    BCS l_52DF                      ; (52C9) Branch if Carry Set $52DF
                    DEC $6940                       ; (52CB) Decrement $6940
                    JMP l_52DF                      ; (52CE) Jump to $52DF

l_52D1
                    CLC                             ; (52D1) Clear Carry Flag
                    LDA MaydayXMap                       ; (52D2) Load A with $6900
                    ADC #$01                        ; (52D5) Add with Carry with #$01 (1 / 00000001)
                    STA MaydayXMap                       ; (52D7) Store A to $6900
                    BCC l_52DF                      ; (52DA) Branch to $52DF if Carry Clear
                    INC $6940                       ; (52DC) Increment Memory $6940

l_52DF
                    LDA $69C0                       ; (52DF) Load A with $69C0
                    CMP $69FF                       ; (52E2) Subtract $69FF from A
                    BCC l_5307                      ; (52E5) Branch to $5307 if Carry Clear
                    BEQ l_52EC                      ; (52E7) Branch to $52EC if Equal
                    JMP l_52F6                      ; (52E9) Jump to $52F6

l_52EC
                    LDA MaydayYMap                       ; (52EC) Load A with $6980
                    CMP $69FE                       ; (52EF) Subtract $69FE from A
                    BCC l_5307                      ; (52F2) Branch to $5307 if Carry Clear
                    BEQ l_5315                      ; (52F4) Branch to $5315 if Equal

l_52F6
                    SEC                             ; (52F6) Set Carry Flag
                    LDA MaydayYMap                       ; (52F7) Load A with $6980
                    SBC #$01                        ; (52FA) Subtract with Carry #$01 (1 / 00000001)
                    STA MaydayYMap                       ; (52FC) Store A to $6980
                    BCS l_5315                      ; (52FF) Branch if Carry Set $5315
                    DEC $69C0                       ; (5301) Decrement $69C0
                    JMP l_5315                      ; (5304) Jump to $5315

l_5307
                    CLC                             ; (5307) Clear Carry Flag
                    LDA MaydayYMap                       ; (5308) Load A with $6980
                    ADC #$01                        ; (530B) Add with Carry with #$01 (1 / 00000001)
                    STA MaydayYMap                       ; (530D) Store A to $6980
                    BCC l_5315                      ; (5310) Branch to $5315 if Carry Clear
                    INC $69C0                       ; (5312) Increment Memory $69C0

l_5315
                    LDX $535C                       ; (5315) Load X with $535C
                    DEX                             ; (5318) Decrement X
                    STX $535C                       ; (5319) Store X Register $535C
                    BNE l_534D                      ; (531C) Branch to $534D if Not Equal
                    LDX #$14                        ; (531E) Set X to #$14 (20 / 00010100)
                    STX $535C                       ; (5320) Store X Register $535C
                    NOP                             ; (5323) No operation
                    LDX #$02                        ; (5324) Set X to #$02 (2 / 00000010)

l_5326
                    DEC $04F3,X                     ; (5326) Decrement $04F3,X
                    LDA $04F3,X                     ; (5329) Load A with $04F3,X
                    CMP #$63                        ; (532C) Subtract #$63 from A (99 / 01100011)
                    BNE l_5338                      ; (532E) Branch to $5338 if Not Equal
                    LDA #$6D                        ; (5330) Set A to #$6D (109 / 01101101)
                    STA $04F3,X                     ; (5332) Store A to $04F3,X
                    DEX                             ; (5335) Decrement X
                    BPL l_5326                      ; (5336) Branch to $5326 if positive

l_5338
                    LDA $04F3                       ; (5338) Load A with $04F3
                    CMP #$64                        ; (533B) Subtract #$64 from A (100 / 01100100)
                    BNE l_534D                      ; (533D) Branch to $534D if Not Equal
                    LDA $04F4                       ; (533F) Load A with $04F4
                    CMP #$64                        ; (5342) Subtract #$64 from A (100 / 01100100)
                    BNE l_534E                      ; (5344) Branch to $534E if Not Equal
                    LDA $04F5                       ; (5346) Load A with $04F5
                    CMP #$64                        ; (5349) Subtract #$64 from A (100 / 01100100)
                    BEQ l_5356                      ; (534B) Branch to $5356 if Equal

l_534D
                    RTS                             ; (534D) Return from Subroutine

l_534E
                    CMP #$6A                        ; (534E) Subtract #$6A from A (106 / 01101010)
                    BCS l_5355                      ; (5350) Branch if Carry Set $5355
                    INC $02E1                       ; (5352) Increment Memory $02E1

l_5355
                    RTS                             ; (5355) Return from Subroutine

l_5356
                    LDA #$40                        ; (5356) Set A to #$40 (64 / 01000000)
                    STA EndGameFlag                       ; (5358) Store A to $0313
                    RTS                             ; (535B) Return from Subroutine

* = $535C
            .byte $03,$17,$FF,$00,$FF,$00,$5F,$00,$FF,$08,$FF,$00,$FF,$DF,$FF,$00
            .byte $FF,$B1,$FF,$FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$0F,$00,$FF,$23,$FF,$00,$1F
            .byte $00,$0E,$0F,$FF,$02,$FF,$00,$FF,$00,$0F,$00,$0F,$00,$FF,$00,$FF
            .byte $00,$FF,$0F,$FF,$1F,$FF,$00,$FF,$00,$FF,$00,$FF,$0F,$2F,$00,$FF
            .byte $0C,$FF,$2F,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FD,$00,$FF,$00,$FF
            .byte $00,$FF,$24,$FF,$00,$FF,$00,$FF,$1F,$0F,$09,$00,$20,$FF,$00,$FF
            .byte $00,$FF,$0C,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$0F,$FF,$00,$FF
            .byte $00,$FF,$A0,$FF

* = $53E0

l_53E0
                    LDA #$05                        ; (53E0) Set A to #$05 (5 / 00000101)
                    LDY #$02                        ; (53E2) Load Y with #$02 (2 / 00000010)

l_53E4
                    STA $53FD,Y                     ; (53E4) Set $53FD,Y to A
                    DEY                             ; (53E7) Decrement Y Register
                    BPL l_53E4                      ; (53E8) Branch to $53E4 if positive
                    LDX $02E0                       ; (53EA) Load X with $02E0
                    LDA #$0D                        ; (53ED) Set A to #$0D (13 / 00001101)
                    STA $53FC,X                     ; (53EF) Store A to $53FC,X
                    JMP l_5430                      ; (53F2) Jump to $5430

* = $53F5
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$0D,$05,$05,$0D

* = $5400

l_5400
                    LDA #$03                        ; (5400) Set A to #$03 (3 / 00000011)
                    STA $AF                         ; (5402) Store A to $AF
                    LDA #$E8                        ; (5404) Set A to #$E8 (232 / 11101000)
                    STA $AE                         ; (5406) Store A to $AE
                    LDA #$D7                        ; (5408) Set A to #$D7 (215 / 11010111)
                    STA $AD                         ; (540A) Store A to $AD
                    LDA #$E8                        ; (540C) Set A to #$E8 (232 / 11101000)
                    STA $AC                         ; (540E) Store A to $AC
                    LDX #$04                        ; (5410) Set X to #$04 (4 / 00000100)
                    LDY #$18                        ; (5412) Load Y with #$18 (24 / 00011000)
                    JMP l_5419                      ; (5414) Jump to $5419

l_5417
                    LDY #$00                        ; (5417) Load Y with #$00 (0 / 00000000)

l_5419
                    LDA #$15                        ; (5419) Set A to #$15 (21 / 00010101)
                    STA ($AE),Y                     ; (541B) Store Accumulator ($AE),Y
                    LDA #$0E                        ; (541D) Set A to #$0E (14 / 00001110)
                    STA ($AC),Y                     ; (541F) Store Accumulator ($AC),Y
                    INY                             ; (5421) Increment Y Register
                    BNE l_5419                      ; (5422) Branch to $5419 if Not Equal
                    INC $AF                         ; (5424) Increment Memory $AF
                    INC $AD                         ; (5426) Increment Memory $AD
                    DEX                             ; (5428) Decrement X
                    BNE l_5417                      ; (5429) Branch to $5417 if Not Equal
                    RTS                             ; (542B) Return from Subroutine

* = $542C
            .byte $EA

* = $542D

l_542D
                    JMP l_53E0                      ; (542D) Jump to $53E0

l_5430
                    LDY #$00                        ; (5430) Load Y with #$00 (0 / 00000000)

l_5432
                    LDA $5500,Y                     ; (5432) Load A with $5500,Y
                    STA $0428,Y                     ; (5435) Set $0428,Y to A
                    LDA $D9                         ; (5438) Load A with $D9
                    STA $D828,Y                     ; (543A) Set $D828,Y to A
                    LDA $5528,Y                     ; (543D) Load A with $5528,Y
                    STA $04A0,Y                     ; (5440) Set $04A0,Y to A
                    LDA #$02                        ; (5443) Set A to #$02 (2 / 00000010)
                    STA $D8A0,Y                     ; (5445) Set $D8A0,Y to A
                    LDA $5550,Y                     ; (5448) Load A with $5550,Y
                    STA $04C8,Y                     ; (544B) Set $04C8,Y to A
                    LDA #$02                        ; (544E) Set A to #$02 (2 / 00000010)
                    STA $D8C8,Y                     ; (5450) Set $D8C8,Y to A
                    LDA $5578,Y                     ; (5453) Load A with $5578,Y
                    STA $04F0,Y                     ; (5456) Set $04F0,Y to A
                    LDA #$02                        ; (5459) Set A to #$02 (2 / 00000010)
                    STA $D8F0,Y                     ; (545B) Set $D8F0,Y to A
                    LDA $55A0,Y                     ; (545E) Load A with $55A0,Y
                    STA $0518,Y                     ; (5461) Set $0518,Y to A
                    LDA #$02                        ; (5464) Set A to #$02 (2 / 00000010)
                    STA $D918,Y                     ; (5466) Set $D918,Y to A
                    LDA $55C8,Y                     ; (5469) Load A with $55C8,Y
                    STA $0540,Y                     ; (546C) Set $0540,Y to A
                    LDA #$02                        ; (546F) Set A to #$02 (2 / 00000010)
                    STA $D940,Y                     ; (5471) Set $D940,Y to A
                    LDA $55F0,Y                     ; (5474) Load A with $55F0,Y
                    STA $05E0,Y                     ; (5477) Set $05E0,Y to A
                    LDA #$07                        ; (547A) Set A to #$07 (7 / 00000111)
                    STA $D9E0,Y                     ; (547C) Set $D9E0,Y to A
                    LDA $5618,Y                     ; (547F) Load A with $5618,Y
                    STA $0630,Y                     ; (5482) Set $0630,Y to A
                    LDA #$0E                        ; (5485) Set A to #$0E (14 / 00001110)
                    STA $DA30,Y                     ; (5487) Set $DA30,Y to A
                    LDA $5640,Y                     ; (548A) Load A with $5640,Y
                    STA $0658,Y                     ; (548D) Set $0658,Y to A
                    LDA #$0E                        ; (5490) Set A to #$0E (14 / 00001110)
                    STA $DA58,Y                     ; (5492) Set $DA58,Y to A
                    LDA $5668,Y                     ; (5495) Load A with $5668,Y
                    STA $0680,Y                     ; (5498) Set $0680,Y to A
                    LDA #$0E                        ; (549B) Set A to #$0E (14 / 00001110)
                    STA $DA80,Y                     ; (549D) Set $DA80,Y to A
                    LDA $5690,Y                     ; (54A0) Load A with $5690,Y
                    STA $06A8,Y                     ; (54A3) Set $06A8,Y to A
                    LDA #$0E                        ; (54A6) Set A to #$0E (14 / 00001110)
                    STA $DAA8,Y                     ; (54A8) Set $DAA8,Y to A
                    LDA $56B8,Y                     ; (54AB) Load A with $56B8,Y
                    STA $06D0,Y                     ; (54AE) Set $06D0,Y to A
                    LDA #$0E                        ; (54B1) Set A to #$0E (14 / 00001110)
                    STA $DAD0,Y                     ; (54B3) Set $DAD0,Y to A
                    LDA $56E0,Y                     ; (54B6) Load A with $56E0,Y
                    STA $06F8,Y                     ; (54B9) Set $06F8,Y to A
                    LDA #$0E                        ; (54BC) Set A to #$0E (14 / 00001110)
                    STA $DAF8,Y                     ; (54BE) Set $DAF8,Y to A
                    LDA $5708,Y                     ; (54C1) Load A with $5708,Y
                    STA $0748,Y                     ; (54C4) Set $0748,Y to A
                    LDA $53FD                       ; (54C7) Load A with $53FD
                    STA $DB48,Y                     ; (54CA) Set $DB48,Y to A
                    LDA $5730,Y                     ; (54CD) Load A with $5730,Y
                    STA $0770,Y                     ; (54D0) Set $0770,Y to A
                    LDA $53FE                       ; (54D3) Load A with $53FE
                    STA $DB70,Y                     ; (54D6) Set $DB70,Y to A
                    LDA $5758,Y                     ; (54D9) Load A with $5758,Y
                    STA $0798,Y                     ; (54DC) Set $0798,Y to A
                    LDA $53FF                       ; (54DF) Load A with $53FF
                    STA $DB98,Y                     ; (54E2) Set $DB98,Y to A
                    INY                             ; (54E5) Increment Y Register
                    CPY #$28                        ; (54E6) Subtract #$28 from Y (40 / 00101000)
                    BEQ l_54ED                      ; (54E8) Branch to $54ED if Equal
                    JMP l_5432                      ; (54EA) Jump to $5432

l_54ED
                    RTS                             ; (54ED) Return from Subroutine

* = $54EE
            .byte $A9,$0D

* = $54F0

l_54F0
                    JSR l_5400                      ; (54F0) Jump to Subroutine at $5400
                    JMP l_53E0                      ; (54F3) Jump to $53E0

* = $54F6
            .byte $54,$4C,$E0,$53,$0D,$0D,$0D,$05,$05,$05,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$8F,$91,$84,$92,$92,$15,$85,$88,$91,$84,$15,$93
            .byte $8E,$15,$92,$93,$80,$91,$93,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$8C,$80,$98,$83,$80,$98,$15,$87,$80,$92
            .byte $15,$89,$94,$8C,$8F,$84,$83,$15,$85,$91,$8E,$8C,$15,$93,$87,$84
            .byte $15,$84,$88,$85,$85,$84,$8B,$15,$15,$15,$15,$15,$15,$15,$93,$8E
            .byte $96,$84,$91,$15,$80,$8D,$83,$15,$88,$92,$15,$8D,$8E,$96,$15,$8F
            .byte $80,$91,$80,$82,$87,$94,$93,$88,$8D,$86,$15,$93,$8E,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$87,$84,$91,$15,$83,$91,$8E,$8F,$15,$8F
            .byte $8E,$88,$8D,$93,$9A,$15,$85,$8E,$8B,$8B,$8E,$96,$15,$87,$84,$91
            .byte $15,$80,$8D,$83,$15,$86,$84,$93,$15,$15,$15,$15,$15,$15,$93,$87
            .byte $84,$91,$84,$15,$85,$88,$91,$92,$93,$9D,$15,$96,$80,$93,$82,$87
            .byte $15,$8E,$94,$93,$15,$85,$8E,$91,$15,$93,$87,$84,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$8F,$8E,$8B,$88,$82,$84,$15,$80,$8D,$83
            .byte $15,$91,$8E,$80,$83,$15,$81,$8B,$8E,$82,$8A,$92,$9A,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$89,$8E
            .byte $98,$92,$93,$88,$82,$8A,$15,$82,$8E,$8D,$93,$91,$8E,$8B,$92,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$85,$8E,$91,$96,$80,$91,$83,$15,$15,$15
            .byte $15,$15,$15,$80,$82,$82,$84,$8B,$84,$91,$80,$93,$84,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$81,$80
            .byte $82,$8A,$96,$80,$91,$83,$15,$15,$15,$15,$15,$91,$84,$95,$84,$91
            .byte $92,$84,$15,$81,$91,$80,$8A,$84,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$8B,$84,$85,$93,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$92,$93,$84,$84,$91,$15,$8B,$84,$85,$93,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$91,$88
            .byte $86,$87,$93,$15,$15,$15,$15,$15,$15,$15,$15,$92,$93,$84,$84,$91
            .byte $15,$91,$88,$86,$87,$93,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$85,$88,$91,$84,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$92,$87,$8E,$8E,$93,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$91,$84
            .byte $94,$84,$91,$92,$84,$A1,$85,$88,$91,$84,$15,$87,$80,$8D,$83,$81
            .byte $91,$80,$8A,$84,$15,$93,$94,$91,$8D,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$93,$87,$84,$8C,$84,$15,$93,$94,$8D,$84
            .byte $15,$8E,$8D,$8B,$98,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$92,$8E
            .byte $94,$8D,$83,$15,$84,$85,$85,$84,$82,$93,$92,$15,$8E,$8D,$8B,$98
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$81,$8E,$93,$87,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$0F,$2F,$00,$FF,$0C,$FF,$2F,$FF,$00,$FF,$00,$FF,$00,$FF
            .byte $00,$FD,$00,$FF,$00,$FF,$00,$FF,$24,$FF,$00,$FF,$00,$FF,$1F,$0F
            .byte $09,$00,$20,$FF,$00,$FF,$00,$FF,$0C,$FF,$00,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$0F,$FF,$00,$FF,$00,$FF,$A0,$FF,$00,$FF,$00,$FF,$00,$2F
            .byte $00,$FF,$08,$6F,$00,$0F,$0F,$FF,$2E,$FF,$08,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF

* = $5800

l_5800
                    SEI                             ; (5800) Set Interrupt Disable Flag
                    LDA #$8A                        ; (5801) Set A to #$8A (138 / 10001010)
                    STA IRQExecAddr1                ; (5803) Store A to $0314
                    LDA #$51                        ; (5806) Set A to #$51 (81 / 01010001)
                    STA IRQExecAddr2                ; (5808) Store A to $0315
                    LDA #$98                        ; (580B) Set A to #$98 (152 / 10011000)
                    STA ScreenControlRegister       ; (580D) Store A to $D011
                    LDA #$08                        ; (5810) Set A to #$08 (8 / 00001000)
                    STA ScreenControl               ; (5812) Store A to $D016
                    LDA #$00                        ; (5815) Set A to #$00 (0 / 00000000)
                    STA BackgroundColour            ; (5817) Store A to $D021
                    STA ExtraBackgroundColor1       ; (581A) Store A to $D022
                    LDA VIC2MemSetup                ; (581D) Load A with $D018
                    AND #$F0                        ; (5820) Logical AND with Accumulator and #$F0 (240 / 11110000)
                    ORA #$0C                        ; (5822) Logical OR with Accumulator and #$0C (12 / 00001100)
                    STA VIC2MemSetup                ; (5824) Store A to $D018
                    LDA #$00                        ; (5827) Set A to #$00 (0 / 00000000)
                    STA SpriteEnableRegister        ; (5829) Store A to $D015
                    NOP                             ; (582C) No operation
                    NOP                             ; (582D) No operation
                    NOP                             ; (582E) No operation
                    NOP                             ; (582F) No operation
                    NOP                             ; (5830) No operation
                    NOP                             ; (5831) No operation
                    NOP                             ; (5832) No operation
                    NOP                             ; (5833) No operation
                    NOP                             ; (5834) No operation
                    NOP                             ; (5835) No operation
                    NOP                             ; (5836) No operation
                    NOP                             ; (5837) No operation
                    NOP                             ; (5838) No operation
                    NOP                             ; (5839) No operation
                    NOP                             ; (583A) No operation
                    NOP                             ; (583B) No operation
                    NOP                             ; (583C) No operation
                    JSR l_5400                      ; (583D) Jump to Subroutine at $5400
                    LDA #$12                        ; (5840) Set A to #$12 (18 / 00010010)
                    STA $1006                       ; (5842) Store A to $1006
                    LDA #$25                        ; (5845) Set A to #$25 (37 / 00100101)
                    STA $1002                       ; (5847) Store A to $1002
                    JSR l_1000                      ; (584A) Jump to Subroutine at $1000
                    NOP                             ; (584D) No operation
                    NOP                             ; (584E) No operation
                    NOP                             ; (584F) No operation
                    LDA #$80                        ; (5850) Set A to #$80 (128 / 10000000)
                    STA $FC                         ; (5852) Store A to $FC
                    LDA #$00                        ; (5854) Set A to #$00 (0 / 00000000)
                    STA $FB                         ; (5856) Store A to $FB
                    LDX #$00                        ; (5858) Set X to #$00 (0 / 00000000)

l_585A
                    LDA $5880,X                     ; (585A) Load A with $5880,X
                    STA $FE                         ; (585D) Store A to $FE
                    LDA $5890,X                     ; (585F) Load A with $5890,X
                    STA $FD                         ; (5862) Store A to $FD
                    CLC                             ; (5864) Clear Carry Flag
                    LDA $FB                         ; (5865) Load A with $FB
                    ADC #$28                        ; (5867) Add with Carry with #$28 (40 / 00101000)
                    STA $FB                         ; (5869) Store A to $FB
                    LDA $FC                         ; (586B) Load A with $FC
                    ADC #$00                        ; (586D) Add with Carry with #$00 (0 / 00000000)
                    STA $FC                         ; (586F) Store A to $FC
                    JSR l_58C0                      ; (5871) Jump to Subroutine at $58C0
                    INX                             ; (5874) Increment X
                    CPX #$0A                        ; (5875) Subtract #$0A from X (10 / 00001010)
                    BNE l_585A                      ; (5877) Branch to $585A if Not Equal

l_5879
                    JMP l_5879                      ; (5879) Jump to $5879

* = $587C
            .byte $FF,$00,$FF,$00,$04,$04,$05,$05,$05,$06,$06,$06,$06,$06,$04,$04
            .byte $04,$04,$04,$04,$78,$F0,$40,$90,$B8,$08,$30,$58,$A8,$F8,$04,$04
            .byte $04,$04,$04,$04,$A2,$04,$A0,$18,$4C,$B9,$54,$A0,$00,$A9,$15,$91
            .byte $AE,$A9,$00,$91,$AC,$C8,$D0,$F5,$E6,$AF,$E6,$AD,$CA,$D0,$EC,$EA
            .byte $A0,$00,$B9,$00

* = $58C0

l_58C0
                    LDY #$00                        ; (58C0) Load Y with #$00 (0 / 00000000)

l_58C2
                    LDA ($FB),Y                     ; (58C2) Load A with ($FB),Y
                    STA ($FD),Y                     ; (58C4) Store Accumulator ($FD),Y
                    CMP #$15                        ; (58C6) Subtract #$15 from A (21 / 00010101)
                    BEQ l_58D0                      ; (58C8) Branch to $58D0 if Equal
                    JSR l_4480                      ; (58CA) Jump to Subroutine at $4480
                    JMP l_58E8                      ; (58CD) Jump to $58E8

l_58D0
                    LDA #$00                        ; (58D0) Set A to #$00 (0 / 00000000)
                    STA Voice1Control               ; (58D2) Store A to $D404
                    JMP l_58E8                      ; (58D5) Jump to $58E8

* = $58D8
            .byte $4C,$E8,$58,$4C,$E8,$58,$4C,$E8,$58,$4C,$E8,$58,$4C,$E8,$58,$EA

* = $58E8

l_58E8
                    TYA                             ; (58E8) Transfer Y to A
                    PHA                             ; (58E9) Push Accumulator to Stack
                    TXA                             ; (58EA) Transfer X to A
                    PHA                             ; (58EB) Push Accumulator to Stack
                    LDY #$3F                        ; (58EC) Load Y with #$3F (63 / 00111111)

l_58EE
                    LDX #$FF                        ; (58EE) Set X to #$FF (255 / 11111111)

l_58F0
                    DEX                             ; (58F0) Decrement X
                    BNE l_58F0                      ; (58F1) Branch to $58F0 if Not Equal
                    DEY                             ; (58F3) Decrement Y Register
                    BNE l_58EE                      ; (58F4) Branch to $58EE if Not Equal
                    PLA                             ; (58F6) Pull Accumulator from Stack
                    TAX                             ; (58F7) Transfer A to X
                    PLA                             ; (58F8) Pull Accumulator from Stack
                    TAY                             ; (58F9) Transfer A to Y
                    INY                             ; (58FA) Increment Y Register
                    CPY #$28                        ; (58FB) Subtract #$28 from Y (40 / 00101000)
                    BNE l_58C2                      ; (58FD) Branch to $58C2 if Not Equal
                    RTS                             ; (58FF) Return from Subroutine

* = $5900
            .byte $DF,$02,$FF,$00,$FF,$FF,$FF,$00,$FF,$08,$FF,$FF,$FF,$FF,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$FF,$FF,$FF,$FF,$02,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$08,$FF,$00,$FF,$20,$FF,$00,$FF,$F3,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$FF,$FF,$FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$20,$FF,$00,$FF,$17,$FF,$00,$FF,$00,$5F,$00
            .byte $FF,$08,$FF,$00,$FF,$DF,$FF,$00,$FF,$B1,$FF,$FF,$FF,$00,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00
            .byte $00,$FD,$00,$FF,$00,$0F,$00,$FF,$23,$FF,$00,$1F,$00,$0E,$0F,$FF
            .byte $00,$FF,$00,$FF,$00,$0F,$00,$0F,$00,$FF,$00,$FF,$00,$FF,$0F,$FF
            .byte $1F,$FF,$00,$FF,$00,$FF,$00,$FF,$0F,$2F,$00,$FF,$0C,$FF,$2F,$FF
            .byte $00,$FF,$00,$FF,$00,$FF,$00,$FD,$00,$FF,$00,$FF,$00,$FF,$24,$FF
            .byte $00,$FF,$00,$FF,$1F,$0F,$09,$00,$20,$FF,$00,$FF,$00,$FF,$0C,$FF
            .byte $00,$FF,$00,$FF,$00,$FF,$00,$FF,$0F,$FF,$00,$FF,$00,$FF,$A0,$FF
            .byte $00,$FF,$00,$FF,$00,$2F,$00,$FF,$00,$6F,$00,$0F,$0F,$FF,$2E,$FF
            .byte $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF

* = $5A00
                    JSR l_4000                      ; (5A00) Jump to Subroutine at $4000
                    JSR l_7A40                      ; (5A03) Jump to Subroutine at $7A40
                    JSR l_4A00                      ; (5A06) Jump to Subroutine at $4A00
                    JSR l_5000                      ; (5A09) Jump to Subroutine at $5000
                    JSR l_4F00                      ; (5A0C) Jump to Subroutine at $4F00
                    JSR l_5B25                      ; (5A0F) Jump to Subroutine at $5B25
                    NOP                             ; (5A12) No operation
                    NOP                             ; (5A13) No operation
                    NOP                             ; (5A14) No operation
                    NOP                             ; (5A15) No operation
                    NOP                             ; (5A16) No operation
                    NOP                             ; (5A17) No operation
                    NOP                             ; (5A18) No operation
                    NOP                             ; (5A19) No operation
                    NOP                             ; (5A1A) No operation
                    NOP                             ; (5A1B) No operation
                    NOP                             ; (5A1C) No operation
                    NOP                             ; (5A1D) No operation
                    NOP                             ; (5A1E) No operation
                    NOP                             ; (5A1F) No operation
                    NOP                             ; (5A20) No operation
                    NOP                             ; (5A21) No operation
                    NOP                             ; (5A22) No operation
                    NOP                             ; (5A23) No operation
                    NOP                             ; (5A24) No operation
                    NOP                             ; (5A25) No operation
                    NOP                             ; (5A26) No operation
                    NOP                             ; (5A27) No operation
                    NOP                             ; (5A28) No operation
                    NOP                             ; (5A29) No operation
                    NOP                             ; (5A2A) No operation
                    NOP                             ; (5A2B) No operation
                    NOP                             ; (5A2C) No operation
                    NOP                             ; (5A2D) No operation
                    NOP                             ; (5A2E) No operation
                    NOP                             ; (5A2F) No operation

l_5A30
                    LDX $0344                       ; (5A30) Load X with $0344
                    DEX                             ; (5A33) Decrement X
                    BNE l_5A4C                      ; (5A34) Branch to $5A4C if Not Equal
                    LDX #$10                        ; (5A36) Set X to #$10 (16 / 00010000)
                    LDY $0345                       ; (5A38) Load Y with Data from $0345
                    DEY                             ; (5A3B) Decrement Y Register
                    BNE l_5A52                      ; (5A3C) Branch to $5A52 if Not Equal
                    LDY #$02                        ; (5A3E) Load Y with #$02 (2 / 00000010)
                    STY $0345                       ; (5A40) Store Y Register $0345
                    STX $0344                       ; (5A43) Store X Register $0344
                    JMP l_5A60                      ; (5A46) Jump to $5A60

* = $5A49
            .byte $8C,$45,$03

* = $5A4C

l_5A4C
                    STX $0344                       ; (5A4C) Store X Register $0344
                    JMP l_5A66                      ; (5A4F) Jump to $5A66

l_5A52
                    STY $0345                       ; (5A52) Store Y Register $0345
                    JMP l_5B40                      ; (5A55) Jump to $5B40

* = $5A58
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA

* = $5A60

l_5A60
                    JSR l_4260                      ; (5A60) Jump to Subroutine at $4260
                    JMP l_5AB0                      ; (5A63) Jump to $5AB0

l_5A66
                    JSR l_4290                      ; (5A66) Jump to Subroutine at $4290
                    JSR l_4500                      ; (5A69) Jump to Subroutine at $4500
                    JSR l_4600                      ; (5A6C) Jump to Subroutine at $4600
                    JSR l_4850                      ; (5A6F) Jump to Subroutine at $4850
                    JSR l_5200                      ; (5A72) Jump to Subroutine at $5200
                    JSR l_4D92                      ; (5A75) Jump to Subroutine at $4D92
                    JSR l_4E00                      ; (5A78) Jump to Subroutine at $4E00
                    JSR l_4940                      ; (5A7B) Jump to Subroutine at $4940
                    LDA EndGameFlag                       ; (5A7E) Load A with $0313
                    BEQ l_5A8D                      ; (5A81) Branch to $5A8D if Equal
                    CMP #$80                        ; (5A83) Subtract #$80 from A (128 / 10000000)
                    BEQ l_5A8A                      ; (5A85) Branch to $5A8A if Equal
                    JMP l_43D0                      ; (5A87) Jump to $43D0

l_5A8A
                    JMP l_43E0                      ; (5A8A) Jump to $43E0

l_5A8D
                    JMP l_5A30                      ; (5A8D) Jump to $5A30

* = $5A90
            .byte $30,$5A,$EA,$EA,$EA,$30,$5A,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $00,$01,$00,$02,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA

* = $5AB0

l_5AB0
                    LDX $5AA2                       ; (5AB0) Load X with $5AA2
                    BEQ l_5AE0                      ; (5AB3) Branch to $5AE0 if Equal
                    LDY $5AA3                       ; (5AB5) Load Y with Data from $5AA3
                    DEY                             ; (5AB8) Decrement Y Register
                    BPL l_5ABD                      ; (5AB9) Branch to $5ABD if positive
                    LDY #$07                        ; (5ABB) Load Y with #$07 (7 / 00000111)

l_5ABD
                    DEX                             ; (5ABD) Decrement X
                    BNE l_5AC6                      ; (5ABE) Branch to $5AC6 if Not Equal
                    STX ForwardReverse                       ; (5AC0) Store X Register $03A4
                    STY CarFacingDirection                       ; (5AC3) Store Y Register $03A0

l_5AC6
                    STX $5AA2                       ; (5AC6) Store X Register $5AA2
                    STY $5AA3                       ; (5AC9) Store Y Register $5AA3
                    LDA $03A8,Y                     ; (5ACC) Load A with $03A8,Y
                    STA $AE                         ; (5ACF) Store A to $AE
                    CLC                             ; (5AD1) Clear Carry Flag
                    LDY #$BD                        ; (5AD2) Load Y with #$BD (189 / 10111101)
                    LDX #$AB                        ; (5AD4) Set X to #$AB (171 / 10101011)
                    LDA #$08                        ; (5AD6) Set A to #$08 (8 / 00001000)
                    JSR l_4200                      ; (5AD8) Jump to Subroutine at $4200
                    JMP l_4450                      ; (5ADB) Jump to $4450

* = $5ADE
            .byte $EA,$EA

* = $5AE0

l_5AE0
                    LDA $FE                         ; (5AE0) Load A with $FE
                    BNE l_5AF4                      ; (5AE2) Branch to $5AF4 if Not Equal
                    STA $5AA0                       ; (5AE4) Store A to $5AA0
                    LDA CarFacingDirection                       ; (5AE7) Load A with $03A0
                    AND #$01                        ; (5AEA) Logical AND with Accumulator and #$01 (1 / 00000001)
                    EOR #$01                        ; (5AEC) Exclusive OR (XOR) with Accumulator and #$01 (1 / 00000001)
                    STA $5AA1                       ; (5AEE) Store A to $5AA1
                    JMP l_5B2A                      ; (5AF1) Jump to $5B2A

l_5AF4
                    CMP $5AA0                       ; (5AF4) Subtract $5AA0 from A
                    BNE l_5B04                      ; (5AF7) Branch to $5B04 if Not Equal
                    DEC $5AA1                       ; (5AF9) Decrement $5AA1
                    LDA $5AA1                       ; (5AFC) Load A with $5AA1
                    BMI l_5B40                      ; (5AFF) Branch to $5B40 if minus 
                    NOP                             ; (5B01) No operation
                    LDA $FE                         ; (5B02) Load A with $FE

l_5B04
                    BPL l_5B16                      ; (5B04) Branch to $5B16 if positive
                    LDX CarFacingDirection                       ; (5B06) Load X with $03A0
                    DEX                             ; (5B09) Decrement X
                    CPX #$FF                        ; (5B0A) Subtract #$FF from X (255 / 11111111)
                    BNE l_5B10                      ; (5B0C) Branch to $5B10 if Not Equal
                    LDX #$07                        ; (5B0E) Set X to #$07 (7 / 00000111)

l_5B10
                    STX CarFacingDirection                       ; (5B10) Store X Register $03A0
                    JMP l_5B25                      ; (5B13) Jump to $5B25

l_5B16
                    LDX CarFacingDirection                       ; (5B16) Load X with $03A0
                    INX                             ; (5B19) Increment X
                    CPX #$08                        ; (5B1A) Subtract #$08 from X (8 / 00001000)
                    BNE l_5B10                      ; (5B1C) Branch to $5B10 if Not Equal
                    LDX #$00                        ; (5B1E) Set X to #$00 (0 / 00000000)
                    JMP l_5B10                      ; (5B20) Jump to $5B10

* = $5B23
            .byte $EA,$EA

* = $5B25

l_5B25
                    LDA $FE                         ; (5B25) Load A with $FE
                    STA $5AA0                       ; (5B27) Store A to $5AA0

l_5B2A
                    LDX CarFacingDirection                       ; (5B2A) Load X with $03A0
                    LDA $03A8,X                     ; (5B2D) Load A with $03A8,X
                    STA $AE                         ; (5B30) Store A to $AE
                    CLC                             ; (5B32) Clear Carry Flag
                    LDY #$BD                        ; (5B33) Load Y with #$BD (189 / 10111101)
                    LDX #$AB                        ; (5B35) Set X to #$AB (171 / 10101011)
                    LDA #$08                        ; (5B37) Set A to #$08 (8 / 00001000)
                    JSR l_4200                      ; (5B39) Jump to Subroutine at $4200
                    NOP                             ; (5B3C) No operation
                    NOP                             ; (5B3D) No operation
                    NOP                             ; (5B3E) No operation
                    NOP                             ; (5B3F) No operation

l_5B40
                    LDA $FE                         ; (5B40) Load A with $FE
                    BEQ l_5B51                      ; (5B42) Branch to $5B51 if Equal
                    LDA $07FD                       ; (5B44) Load A with $07FD
                    EOR #$02                        ; (5B47) Exclusive OR (XOR) with Accumulator and #$02 (2 / 00000010)
                    STA $07FD                       ; (5B49) Store A to $07FD
                    TAY                             ; (5B4C) Transfer A to Y
                    DEY                             ; (5B4D) Decrement Y Register
                    STY $07FC                       ; (5B4E) Store Y Register $07FC

l_5B51
                    JSR l_4260                      ; (5B51) Jump to Subroutine at $4260
                    LDA ForwardReverse                       ; (5B54) Load A with $03A4
                    BNE l_5B89                      ; (5B57) Branch to $5B89 if Not Equal
                    LDA $FD                         ; (5B59) Load A with $FD
                    BEQ l_5B86                      ; (5B5B) Branch to $5B86 if Equal
                    BPL l_5B6F                      ; (5B5D) Branch to $5B6F if positive

l_5B5F
                    DEC $0340                       ; (5B5F) Decrement $0340
                    LDA $0340                       ; (5B62) Load A with $0340
                    BNE l_5B86                      ; (5B65) Branch to $5B86 if Not Equal
                    LDA #$01                        ; (5B67) Set A to #$01 (1 / 00000001)
                    STA $0340                       ; (5B69) Store A to $0340
                    JMP l_5B86                      ; (5B6C) Jump to $5B86

l_5B6F
                    INC $0340                       ; (5B6F) Increment Memory $0340
                    LDA $0340                       ; (5B72) Load A with $0340
                    CMP #$40                        ; (5B75) Subtract #$40 from A (64 / 01000000)
                    BNE l_5B86                      ; (5B77) Branch to $5B86 if Not Equal
                    LDA ForwardReverse                       ; (5B79) Load A with $03A4
                    EOR #$08                        ; (5B7C) Exclusive OR (XOR) with Accumulator and #$08 (8 / 00001000)
                    STA ForwardReverse                       ; (5B7E) Store A to $03A4
                    LDA #$3F                        ; (5B81) Set A to #$3F (63 / 00111111)
                    STA $0340                       ; (5B83) Store A to $0340

l_5B86
                    JMP l_5B92                      ; (5B86) Jump to $5B92

l_5B89
                    LDA $FD                         ; (5B89) Load A with $FD
                    BEQ l_5B86                      ; (5B8B) Branch to $5B86 if Equal
                    BMI l_5B6F                      ; (5B8D) Branch to $5B6F if minus 
                    JMP l_5B5F                      ; (5B8F) Jump to $5B5F

l_5B92
                    LDA $02                         ; (5B92) Load A with $02
                    BEQ l_5BB8                      ; (5B94) Branch to $5BB8 if Equal
                    LDA $5AA2                       ; (5B96) Load A with $5AA2
                    BNE l_5BB8                      ; (5B99) Branch to $5BB8 if Not Equal
                    LDA ForwardReverse                       ; (5B9B) Load A with $03A4
                    BEQ l_5BB5                      ; (5B9E) Branch to $5BB5 if Equal
                    LDA $0340                       ; (5BA0) Load A with $0340
                    CMP #$15                        ; (5BA3) Subtract #$15 from A (21 / 00010101)
                    BCS l_5BB5                      ; (5BA5) Branch if Carry Set $5BB5
                    LDA #$04                        ; (5BA7) Set A to #$04 (4 / 00000100)
                    STA $5AA2                       ; (5BA9) Store A to $5AA2
                    LDA CarFacingDirection                       ; (5BAC) Load A with $03A0
                    STA $5AA3                       ; (5BAF) Store A to $5AA3
                    JMP l_5A66                      ; (5BB2) Jump to $5A66

l_5BB5
                    JSR l_4570                      ; (5BB5) Jump to Subroutine at $4570

l_5BB8
                    JMP l_5A66                      ; (5BB8) Jump to $5A66

* = $5BBB
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$84,$AE,$18,$A0,$BD,$A2,$AB,$A9,$08,$20,$00,$42,$4C
            .byte $66,$5A,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA

* = $5C00

l_5C00
                    LDA CarFacingDirection                       ; (5C00) Load A with $03A0
                    ORA ForwardReverse                       ; (5C03) Logical OR with Accumulator and $03A4
                    TAX                             ; (5C06) Transfer A to X
                    LDA $0370,X                     ; (5C07) Load A with $0370,X
                    BEQ l_5C53                      ; (5C0A) Branch to $5C53 if Equal
                    BMI l_5C32                      ; (5C0C) Branch to $5C32 if minus 
                    LDY $033E                       ; (5C0E) Load Y with Data from $033E
                    INY                             ; (5C11) Increment Y Register
                    INY                             ; (5C12) Increment Y Register
                    CPY #$08                        ; (5C13) Subtract #$08 from Y (8 / 00001000)
                    BNE l_5C1E                      ; (5C15) Branch to $5C1E if Not Equal
                    LDA #$01                        ; (5C17) Set A to #$01 (1 / 00000001)
                    STA $03A7                       ; (5C19) Store A to $03A7
                    LDY #$00                        ; (5C1C) Load Y with #$00 (0 / 00000000)

l_5C1E
                    STY $033E                       ; (5C1E) Store Y Register $033E
                    SEC                             ; (5C21) Set Carry Flag
                    LDA $0338                       ; (5C22) Load A with $0338
                    SBC #$02                        ; (5C25) Subtract with Carry #$02 (2 / 00000010)
                    STA $0338                       ; (5C27) Store A to $0338
                    BCS l_5C2F                      ; (5C2A) Branch if Carry Set $5C2F
                    DEC $0339                       ; (5C2C) Decrement $0339

l_5C2F
                    JMP l_5C53                      ; (5C2F) Jump to $5C53

l_5C32
                    LDY $033E                       ; (5C32) Load Y with Data from $033E
                    DEY                             ; (5C35) Decrement Y Register
                    DEY                             ; (5C36) Decrement Y Register
                    CPY #$FE                        ; (5C37) Subtract #$FE from Y (254 / 11111110)
                    BNE l_5C42                      ; (5C39) Branch to $5C42 if Not Equal
                    LDA #$01                        ; (5C3B) Set A to #$01 (1 / 00000001)
                    STA $03A7                       ; (5C3D) Store A to $03A7
                    LDY #$06                        ; (5C40) Load Y with #$06 (6 / 00000110)

l_5C42
                    STY $033E                       ; (5C42) Store Y Register $033E
                    CLC                             ; (5C45) Clear Carry Flag
                    LDA $0338                       ; (5C46) Load A with $0338
                    ADC #$02                        ; (5C49) Add with Carry with #$02 (2 / 00000010)
                    STA $0338                       ; (5C4B) Store A to $0338
                    BCC l_5C53                      ; (5C4E) Branch to $5C53 if Carry Clear
                    INC $0339                       ; (5C50) Increment Memory $0339

l_5C53
                    LDA $0380,X                     ; (5C53) Load A with $0380,X
                    BEQ l_5CAD                      ; (5C56) Branch to $5CAD if Equal
                    BMI l_5C85                      ; (5C58) Branch to $5C85 if minus 
                    LDY $033F                       ; (5C5A) Load Y with Data from $033F
                    INY                             ; (5C5D) Increment Y Register
                    INY                             ; (5C5E) Increment Y Register
                    CPY #$03                        ; (5C5F) Subtract #$03 from Y (3 / 00000011)
                    BNE l_5C6B                      ; (5C61) Branch to $5C6B if Not Equal
                    LDA $03A7                       ; (5C63) Load A with $03A7
                    ORA #$02                        ; (5C66) Logical OR with Accumulator and #$02 (2 / 00000010)
                    STA $03A7                       ; (5C68) Store A to $03A7

l_5C6B
                    CPY #$09                        ; (5C6B) Subtract #$09 from Y (9 / 00001001)
                    BNE l_5C71                      ; (5C6D) Branch to $5C71 if Not Equal
                    LDY #$01                        ; (5C6F) Load Y with #$01 (1 / 00000001)

l_5C71
                    STY $033F                       ; (5C71) Store Y Register $033F
                    SEC                             ; (5C74) Set Carry Flag
                    LDA $033A                       ; (5C75) Load A with $033A
                    SBC #$02                        ; (5C78) Subtract with Carry #$02 (2 / 00000010)
                    STA $033A                       ; (5C7A) Store A to $033A
                    BCS l_5C82                      ; (5C7D) Branch if Carry Set $5C82
                    DEC $033B                       ; (5C7F) Decrement $033B

l_5C82
                    JMP l_5CAD                      ; (5C82) Jump to $5CAD

l_5C85
                    LDY $033F                       ; (5C85) Load Y with Data from $033F
                    DEY                             ; (5C88) Decrement Y Register
                    DEY                             ; (5C89) Decrement Y Register
                    CPY #$01                        ; (5C8A) Subtract #$01 from Y (1 / 00000001)
                    BNE l_5C96                      ; (5C8C) Branch to $5C96 if Not Equal
                    LDA $03A7                       ; (5C8E) Load A with $03A7
                    ORA #$02                        ; (5C91) Logical OR with Accumulator and #$02 (2 / 00000010)
                    STA $03A7                       ; (5C93) Store A to $03A7

l_5C96
                    CPY #$FF                        ; (5C96) Subtract #$FF from Y (255 / 11111111)
                    BNE l_5C9C                      ; (5C98) Branch to $5C9C if Not Equal
                    LDY #$07                        ; (5C9A) Load Y with #$07 (7 / 00000111)

l_5C9C
                    STY $033F                       ; (5C9C) Store Y Register $033F
                    CLC                             ; (5C9F) Clear Carry Flag
                    LDA $033A                       ; (5CA0) Load A with $033A
                    ADC #$02                        ; (5CA3) Add with Carry with #$02 (2 / 00000010)
                    STA $033A                       ; (5CA5) Store A to $033A
                    BCC l_5CAD                      ; (5CA8) Branch to $5CAD if Carry Clear
                    INC $033B                       ; (5CAA) Increment Memory $033B

l_5CAD
                    LDA #$00                        ; (5CAD) Set A to #$00 (0 / 00000000)
                    STA $0341                       ; (5CAF) Store A to $0341
                    STA $0346                       ; (5CB2) Store A to $0346
                    LDA $03A7                       ; (5CB5) Load A with $03A7
                    BNE l_5CBE                      ; (5CB8) Branch to $5CBE if Not Equal
                    RTS                             ; (5CBA) Return from Subroutine

* = $5CBB
            .byte $60,$60,$EA

* = $5CBE

l_5CBE
                    LDA $03A7                       ; (5CBE) Load A with $03A7
                    AND #$01                        ; (5CC1) Logical AND with Accumulator and #$01 (1 / 00000001)
                    BEQ l_5D08                      ; (5CC3) Branch to $5D08 if Equal
                    LDA CarFacingDirection                       ; (5CC5) Load A with $03A0
                    ORA ForwardReverse                       ; (5CC8) Logical OR with Accumulator and $03A4
                    TAX                             ; (5CCB) Transfer A to X
                    LDA $0350,X                     ; (5CCC) Load A with $0350,X
                    BMI l_5CED                      ; (5CCF) Branch to $5CED if minus 
                    CLC                             ; (5CD1) Clear Carry Flag
                    ADC $033C                       ; (5CD2) Add with Carry $033C
                    STA $033C                       ; (5CD5) Store A to $033C
                    BCC l_5CDD                      ; (5CD8) Branch to $5CDD if Carry Clear
                    INC $033D                       ; (5CDA) Increment Memory $033D

l_5CDD
                    LDY $0334                       ; (5CDD) Load Y with Data from $0334
                    DEY                             ; (5CE0) Decrement Y Register
                    CPY #$FE                        ; (5CE1) Subtract #$FE from Y (254 / 11111110)
                    BNE l_5CE7                      ; (5CE3) Branch to $5CE7 if Not Equal
                    LDY #$01                        ; (5CE5) Load Y with #$01 (1 / 00000001)

l_5CE7
                    STY $0334                       ; (5CE7) Store Y Register $0334
                    JMP l_5D08                      ; (5CEA) Jump to $5D08

l_5CED
                    SEC                             ; (5CED) Set Carry Flag
                    LDA $033C                       ; (5CEE) Load A with $033C
                    SBC #$01                        ; (5CF1) Subtract with Carry #$01 (1 / 00000001)
                    STA $033C                       ; (5CF3) Store A to $033C
                    BCS l_5CFB                      ; (5CF6) Branch if Carry Set $5CFB
                    DEC $033D                       ; (5CF8) Decrement $033D

l_5CFB
                    LDY $0334                       ; (5CFB) Load Y with Data from $0334
                    INY                             ; (5CFE) Increment Y Register
                    CPY #$02                        ; (5CFF) Subtract #$02 from Y (2 / 00000010)
                    BNE l_5D05                      ; (5D01) Branch to $5D05 if Not Equal
                    LDY #$FF                        ; (5D03) Load Y with #$FF (255 / 11111111)

l_5D05
                    STY $0334                       ; (5D05) Store Y Register $0334

l_5D08
                    LDA $03A7                       ; (5D08) Load A with $03A7
                    AND #$02                        ; (5D0B) Logical AND with Accumulator and #$02 (2 / 00000010)
                    BEQ l_5D52                      ; (5D0D) Branch to $5D52 if Equal
                    LDA CarFacingDirection                       ; (5D0F) Load A with $03A0
                    ORA ForwardReverse                       ; (5D12) Logical OR with Accumulator and $03A4
                    TAX                             ; (5D15) Transfer A to X
                    LDA $0360,X                     ; (5D16) Load A with $0360,X
                    BMI l_5D37                      ; (5D19) Branch to $5D37 if minus 
                    CLC                             ; (5D1B) Clear Carry Flag
                    ADC $033C                       ; (5D1C) Add with Carry $033C
                    STA $033C                       ; (5D1F) Store A to $033C
                    BCC l_5D27                      ; (5D22) Branch to $5D27 if Carry Clear
                    INC $033D                       ; (5D24) Increment Memory $033D

l_5D27
                    LDY $0335                       ; (5D27) Load Y with Data from $0335
                    DEY                             ; (5D2A) Decrement Y Register
                    CPY #$FE                        ; (5D2B) Subtract #$FE from Y (254 / 11111110)
                    BNE l_5D31                      ; (5D2D) Branch to $5D31 if Not Equal
                    LDY #$01                        ; (5D2F) Load Y with #$01 (1 / 00000001)

l_5D31
                    STY $0335                       ; (5D31) Store Y Register $0335
                    JMP l_5D52                      ; (5D34) Jump to $5D52

l_5D37
                    SEC                             ; (5D37) Set Carry Flag
                    LDA $033C                       ; (5D38) Load A with $033C
                    SBC #$7E                        ; (5D3B) Subtract with Carry #$7E (126 / 01111110)
                    STA $033C                       ; (5D3D) Store A to $033C
                    BCS l_5D45                      ; (5D40) Branch if Carry Set $5D45
                    DEC $033D                       ; (5D42) Decrement $033D

l_5D45
                    LDY $0335                       ; (5D45) Load Y with Data from $0335
                    INY                             ; (5D48) Increment Y Register
                    CPY #$02                        ; (5D49) Subtract #$02 from Y (2 / 00000010)
                    BNE l_5D4F                      ; (5D4B) Branch to $5D4F if Not Equal
                    LDY #$FF                        ; (5D4D) Load Y with #$FF (255 / 11111111)

l_5D4F
                    STY $0335                       ; (5D4F) Store Y Register $0335

l_5D52
                    LDX #$0D                        ; (5D52) Set X to #$0D (13 / 00001101)
                    LDA #$DF                        ; (5D54) Set A to #$DF (223 / 11011111)
                    STA $5D70                       ; (5D56) Store A to $5D70
                    LDA #$05                        ; (5D59) Set A to #$05 (5 / 00000101)
                    STA $5D71                       ; (5D5B) Store A to $5D71
                    LDA $033C                       ; (5D5E) Load A with $033C
                    STA $5D6D                       ; (5D61) Store A to $5D6D
                    LDA $033D                       ; (5D64) Load A with $033D
                    STA $5D6E                       ; (5D67) Store A to $5D6E

l_5D6A
                    LDY #$28                        ; (5D6A) Load Y with #$28 (40 / 00101000)

l_5D6C
                    LDA $A3D1,Y                     ; (5D6C) Load A with $A3D1,Y
                    STA $07E7,Y                     ; (5D6F) Set $07E7,Y to A
                    DEY                             ; (5D72) Decrement Y Register
                    BNE l_5D6C                      ; (5D73) Branch to $5D6C if Not Equal
                    CLC                             ; (5D75) Clear Carry Flag
                    LDA $5D6D                       ; (5D76) Load A with $5D6D
                    ADC #$7E                        ; (5D79) Add with Carry with #$7E (126 / 01111110)
                    STA $5D6D                       ; (5D7B) Store A to $5D6D
                    BCC l_5D83                      ; (5D7E) Branch to $5D83 if Carry Clear
                    INC $5D6E                       ; (5D80) Increment Memory $5D6E

l_5D83
                    CLC                             ; (5D83) Clear Carry Flag
                    LDA $5D70                       ; (5D84) Load A with $5D70
                    ADC #$28                        ; (5D87) Add with Carry with #$28 (40 / 00101000)
                    STA $5D70                       ; (5D89) Store A to $5D70
                    BCC l_5D91                      ; (5D8C) Branch to $5D91 if Carry Clear
                    INC $5D71                       ; (5D8E) Increment Memory $5D71

l_5D91
                    DEX                             ; (5D91) Decrement X
                    BNE l_5D6A                      ; (5D92) Branch to $5D6A if Not Equal
                    LDA #$00                        ; (5D94) Set A to #$00 (0 / 00000000)
                    STA $03A7                       ; (5D96) Store A to $03A7
                    INC $0336                       ; (5D99) Increment Memory $0336
                    RTS                             ; (5D9C) Return from Subroutine

* = $5D9D
            .byte $60,$60,$60

* = $5DA0

l_5DA0
                    LDA $02FF                       ; (5DA0) Load A with $02FF
                    BNE l_5DB9                      ; (5DA3) Branch to $5DB9 if Not Equal
                    LDX $0342                       ; (5DA5) Load X with $0342
                    DEX                             ; (5DA8) Decrement X
                    BPL l_5DB6                      ; (5DA9) Branch to $5DB6 if positive
                    LDA $0340                       ; (5DAB) Load A with $0340
                    LSR A                           ; (5DAE) Logical Shift Right Accumulator
                    LSR A                           ; (5DAF) Logical Shift Right Accumulator
                    STA $0342                       ; (5DB0) Store A to $0342
                    JMP l_5DBA                      ; (5DB3) Jump to $5DBA

l_5DB6
                    STX $0342                       ; (5DB6) Store X Register $0342

l_5DB9
                    RTS                             ; (5DB9) Return from Subroutine

l_5DBA
                    LDA CarFacingDirection                       ; (5DBA) Load A with $03A0
                    STA $0347                       ; (5DBD) Store A to $0347
                    JSR l_5C00                      ; (5DC0) Jump to Subroutine at $5C00
                    RTS                             ; (5DC3) Return from Subroutine

* = $5DC4
            .byte $60,$D2,$5D,$D0,$08,$A0,$08,$8C,$D2,$5D,$20,$00,$4C,$60,$02,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$48,$A9,$00,$90
            .byte $02,$69,$00,$85,$02,$86,$AF,$84,$AC,$68,$AA,$48,$4C,$50,$4F,$38
            .byte $2A,$C8,$C8,$CA,$D0,$FA,$85,$FB,$84,$FC,$68,$48,$AA,$A5,$AE,$9D
            .byte $F7,$07,$A4,$FC,$A5,$AF,$99,$FE,$CF,$C8,$A5,$AC,$99,$FE,$CF,$A5
            .byte $02,$F0,$08,$AD,$10,$D0,$05,$FB,$4C,$36,$5E,$A9,$FF,$45,$FB,$2D
            .byte $10,$D0,$8D,$10,$D0,$A5,$FB,$0D,$15,$D0,$8D,$15,$D0,$68,$60,$01
            .byte $01,$FF,$FF,$FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$A9,$04,$85,$FE
            .byte $A9,$D8,$85,$FC,$A9,$00,$85,$FD,$85,$FB,$A9,$8D,$85,$AF,$A9,$20
            .byte $85,$AE,$A9,$91,$85,$AD,$A9,$08,$85,$AC,$A0,$00,$B1,$AE,$91,$FD
            .byte $B1,$AC,$91,$FB,$C8,$F0,$07,$C0,$E8,$D0,$F1,$4C,$4C,$50,$4F,$FE
            .byte $E6,$FC,$E6,$AF,$E6,$AD,$4C,$6E,$5E,$A5,$FE,$C9,$07,$D0,$DD,$60
            .byte $60,$0F,$00,$0F,$00,$FF,$00,$FF,$00,$FF,$0E,$FF,$1F,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$0F,$2F,$00,$FF,$0C,$FF,$27,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FD,$00,$FF,$00,$FF,$00,$FF,$24,$FF,$4C,$50,$4F,$FF
            .byte $1F,$0D,$09,$00,$20,$FF,$00,$FF,$00,$FF,$0C,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$0F,$FF,$00,$FF,$00,$FF,$A0,$FF,$00,$FF,$00,$FF
            .byte $00,$2F,$00,$FF,$00,$6F,$00,$0F,$0F,$FF,$2E,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$02,$FF,$00
            .byte $FF,$FF,$FF,$00,$FF,$00,$FF,$FF,$FF,$FF,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$FF,$FF,$FF,$FF,$02,$FF,$00,$FF,$00,$FF,$60,$FF,$00,$FF,$00
            .byte $FF,$20,$FF,$00,$F7,$F3,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$FF,$FF,$FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$20,$FF,$00,$FF,$17,$FF,$00,$FF,$00,$5F,$00,$FF,$00,$FF,$00
            .byte $FF,$DF,$FF,$00,$FF,$B1,$FF,$FF,$FF,$00,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$20,$FF,$02,$FF
            .byte $00,$0F,$00,$FF,$03,$FF,$00,$1F,$00,$0E,$0F,$FF,$02,$FF,$00,$FF
            .byte $00,$0F,$00,$0F,$00,$FF,$00,$FF,$00,$FF,$0E,$FF,$1F,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$0F,$2F,$00,$FF,$0C,$FF,$2F,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FC,$00,$FF,$00,$FF,$00,$FF,$24,$FF,$00,$FF,$00,$FF
            .byte $1F,$0F,$09,$00,$20,$FF,$00,$FF,$00,$FF,$0C,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$0F,$FF,$00,$FF,$00,$FF,$A0,$FF,$00,$FF,$00,$FF
            .byte $00,$2F,$00,$FF,$00,$6F,$00,$0F,$0F,$FF,$2E,$FF,$00,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$DC,$DC,$DC,$DC
            .byte $DC,$DC,$DC,$D2,$DC,$DC,$DC,$DC,$DC,$DC,$DC,$D4,$DC,$DC,$DC,$DC
            .byte $DC,$DC,$D2,$15,$DC,$DC,$DC,$DC,$DC,$DC,$D4,$15,$DC,$DC,$DC,$DC
            .byte $DC,$D2,$15,$15,$DC,$DC,$DC,$DC,$DC,$D4,$15,$15,$DC,$DC,$DC,$DC
            .byte $D2,$15,$15,$15,$DC,$DC,$DC,$DC,$D4,$15,$15,$15,$D0,$DC,$DC,$D2
            .byte $15,$15,$15,$15,$0C,$D0,$DC,$D4,$15,$15,$15,$15,$0C,$0C,$15,$15
            .byte $15,$15,$15,$15,$0C,$0C,$15,$15,$15,$15,$15,$15,$0C,$D1,$DC,$D5
            .byte $15,$15,$15,$15,$D1,$DC,$DC,$D3,$15,$15,$15,$15,$DC,$DC,$DC,$DC
            .byte $D5,$15,$15,$15,$DC,$DC,$DC,$DC,$D3,$15,$15,$15,$DC,$DC,$DC,$DC
            .byte $DC,$D5,$15,$15,$DC,$DC,$DC,$DC,$DC,$D3,$15,$15,$DC,$DC,$DC,$DC
            .byte $DC,$DC,$D5,$15,$DC,$DC,$DC,$DC,$DC,$DC,$D3,$15,$DC,$DC,$DC,$DC
            .byte $DC,$DC,$DC,$D5,$DC,$DC,$DC,$DC,$DC,$DC,$DC,$D3,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$ED,$15,$E5,$E6,$E7,$E5,$E6,$E7,$DE,$15,$E5,$E6,$E7,$E5
            .byte $E6,$EC,$15,$15,$E5,$E6,$E7,$E5,$E6,$DE,$15,$15,$E4,$E4,$E4,$E4
            .byte $EA,$15,$15,$15,$E4,$E4,$E4,$E4,$DE,$15,$15,$15,$DF,$E4,$E4,$EA
            .byte $15,$15,$15,$15,$0C,$DF,$E4,$DE,$15,$15,$15,$15,$0C,$0C,$15,$15
            .byte $15,$15,$15,$15,$0C,$0C,$15,$15,$15,$15,$15,$15,$0C,$DF,$E4,$DE
            .byte $15,$15,$15,$15,$DF,$E4,$E4,$EA,$15,$15,$15,$15,$E4,$E4,$E4,$E4
            .byte $DE,$15,$15,$15,$E4,$E4,$E4,$E4,$EA,$15,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$DE,$15,$15,$E5,$E6,$E7,$E5,$E6,$EC,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$E7,$DE,$15,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$15,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$D8,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DA,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$D8,$15,$DD,$DD,$DD,$DD,$DD,$DD,$DA,$15,$DD,$DD,$DD,$DD
            .byte $DD,$D8,$15,$15,$DD,$DD,$DD,$DD,$DD,$DA,$15,$15,$DD,$DD,$DD,$DD
            .byte $D8,$15,$15,$15,$DD,$DD,$DD,$DD,$DA,$15,$15,$15,$D6,$DD,$DD,$D8
            .byte $15,$15,$15,$15,$0C,$D6,$DD,$DA,$15,$15,$15,$15,$0C,$0C,$15,$15
            .byte $15,$15,$15,$15,$0C,$0C,$15,$15,$15,$15,$15,$15,$0C,$D7,$DD,$DB
            .byte $15,$15,$15,$15,$D7,$DD,$DD,$D9,$15,$15,$15,$15,$DD,$DD,$DD,$DD
            .byte $DB,$15,$15,$15,$DD,$DD,$DD,$DD,$D9,$15,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DB,$15,$15,$DD,$DD,$DD,$DD,$DD,$D9,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DB,$15,$DD,$DD,$DD,$DD,$DD,$DD,$D9,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DB,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$D9,$0C,$DF,$E4,$DE
            .byte $15,$15,$15,$15,$0C,$DF,$E4,$DE,$15,$15,$15,$15,$DF,$E4,$E4,$EA
            .byte $15,$15,$15,$15,$DF,$E4,$E4,$EA,$15,$15,$15,$15,$DF,$E4,$E4,$EA
            .byte $15,$15,$15,$15,$DF,$E4,$E4,$EA,$15,$15,$15,$15,$E4,$E4,$E4,$E4
            .byte $DE,$15,$15,$15,$E4,$E4,$E4,$E4,$DE,$15,$15,$15,$E4,$E4,$E4,$E4
            .byte $DE,$15,$15,$15,$E4,$E4,$E4,$E4,$DE,$15,$15,$15,$E4,$E4,$E4,$E4
            .byte $DE,$15,$15,$15,$E4,$E4,$E4,$E4,$DE,$15,$15,$15,$E4,$E4,$E4,$E4
            .byte $EA,$15,$15,$15,$E4,$E4,$E4,$E4,$EA,$15,$15,$15,$E4,$E4,$E4,$E4
            .byte $EA,$15,$15,$15,$E4,$E4,$E4,$E4,$EA,$15,$15,$15,$E4,$E4,$E4,$E4
            .byte $EA,$15,$15,$15,$E4,$E4,$E4,$E4,$EA,$15,$15,$15,$E4,$E4,$E4,$E4
            .byte $EA,$15,$15,$15,$E4,$E4,$E4,$E4,$EA,$15,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$DE,$15,$15,$E5,$E6,$E7,$E5,$E6,$DE,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$DE,$15,$15,$E5,$E6,$E7,$E5,$E6,$DE,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$DE,$15,$15,$E5,$E6,$E7,$E5,$E6,$DE,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$DE,$15,$15,$E5,$E6,$E7,$E5,$E6,$DE,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$DE,$15,$15,$E5,$E6,$E7,$E5,$E6,$DE,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$EC,$15,$15,$E5,$E6,$E7,$E5,$E6,$EC,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$EC,$15,$15,$E5,$E6,$E7,$E5,$E6,$EC,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$EC,$15,$15,$E5,$E6,$E7,$E5,$E6,$EC,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$EC,$15,$15,$E5,$E6,$E7,$E5,$E6,$EC,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$EC,$15,$15,$E5,$E6,$E7,$E5,$E6,$EC,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$EC,$15,$15,$E5,$E6,$E7,$E5,$E6,$EC,$15,$15,$E5,$E6,$E7,$E5
            .byte $E6,$E7,$DE,$15,$E5,$E6,$E7,$E5,$E6,$E7,$DE,$15,$E5,$E6,$E7,$E5
            .byte $E6,$E7,$DE,$15,$E5,$E6,$E7,$E5,$E6,$E7,$DE,$15,$E5,$E6,$E7,$E5
            .byte $E6,$E7,$DE,$15,$E5,$E6,$E7,$E5,$E6,$E7,$DE,$15,$E5,$E6,$E7,$E5
            .byte $E6,$E7,$DE,$15,$E5,$E6,$E7,$E5,$E6,$E7,$DE,$15,$E5,$E6,$E7,$E5
            .byte $E6,$E7,$DE,$15,$E5,$E6,$E7,$E5,$E6,$E7,$DE,$15,$E5,$E6,$E7,$E5
            .byte $E6,$E7,$DE,$15,$E5,$E6,$E7,$E5,$E6,$E7,$DE,$15,$E5,$E6,$E7,$E5
            .byte $E6,$E7,$DE,$15,$E5,$E6,$E7,$E5,$E6,$E7,$DE,$15,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$ED,$15,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$15,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$ED,$15,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$15,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$ED,$15,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$15,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$ED,$15,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$15,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$ED,$15,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$15,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$ED,$15,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$15,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$ED,$15,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$15,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$ED,$15,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$15,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$DE,$E9,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$DE,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$ED,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8
            .byte $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8,$F4,$F4,$F4,$F4
            .byte $F4,$F4,$F4,$F0,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F2,$F4,$F4,$F4,$F4
            .byte $F4,$F4,$F0,$15,$F4,$F4,$F4,$F4,$F4,$F4,$F2,$15,$F4,$F4,$F4,$F4
            .byte $F4,$F0,$15,$15,$F4,$F4,$F4,$F4,$F4,$F2,$15,$15,$F4,$F4,$F4,$F4
            .byte $F0,$15,$15,$15,$F4,$F4,$F4,$F4,$F2,$15,$15,$15,$EE,$F4,$F4,$F0
            .byte $15,$15,$15,$15,$0C,$EE,$F4,$F2,$15,$15,$15,$15,$0C,$0C,$15,$15
            .byte $15,$15,$15,$15,$0C,$0C,$15,$15,$15,$15,$15,$15,$0C,$EF,$F4,$F3
            .byte $15,$15,$15,$15,$EF,$F4,$F4,$F1,$15,$15,$15,$15,$F4,$F4,$F4,$F4
            .byte $F3,$15,$15,$15,$F4,$F4,$F4,$F4,$F1,$15,$15,$15,$F4,$F4,$F4,$F4
            .byte $F4,$F3,$15,$15,$F4,$F4,$F4,$F4,$F4,$F1,$15,$15,$F4,$F4,$F4,$F4
            .byte $F4,$F4,$F3,$15,$F4,$F4,$F4,$F4,$F4,$F4,$F1,$15,$F4,$F4,$F4,$F4
            .byte $F4,$F4,$F4,$F3,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F1,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$D8,$D8,$D8,$D8,$D8,$D8,$DE,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$DE,$15,$D8,$D8,$D8,$D8,$D8,$D8,$DE,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$DE,$15,$D8,$D8,$D8,$D8,$D8,$D8,$DE,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$DE,$15,$D8,$D8,$D8,$D8,$D8,$D8,$DE,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$DE,$15,$D8,$D8,$D8,$D8,$D8,$D8,$DE,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$DE,$15,$D8,$D8,$D8,$D8,$D8,$D8,$DE,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$DE,$15,$D8,$D8,$D8,$D8,$D8,$D8,$DE,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$DE,$15,$D8,$D8,$D8,$D8,$D8,$D8,$DE,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$DE,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$D8,$15,$D8,$D8,$D8,$D8,$D8,$D8,$D8,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$D8,$15,$D8,$D8,$D8,$D8,$D8,$D8,$D8,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$D8,$15,$D8,$D8,$D8,$D8,$D8,$D8,$D8,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$D8,$15,$D8,$D8,$D8,$D8,$D8,$D8,$D8,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$D8,$15,$D8,$D8,$D8,$D8,$D8,$D8,$D8,$15,$D8,$D8,$D8,$D8
            .byte $D8,$D8,$D8,$15,$D8,$D8,$D8,$D8,$D8,$D8,$D8,$15,$FA,$68,$E6,$F2
            .byte $CB,$8C,$40,$C5,$0A,$56,$C4,$A0,$8C,$8C,$68,$FF,$03,$00,$02,$01
            .byte $01,$02,$00,$01,$02,$00,$01,$00,$00,$01,$02,$06,$90,$8E,$8A,$8C
            .byte $8C,$8C,$8A,$8C,$8C,$8A,$8C,$8E,$8C,$8A,$8C,$AC,$00,$06,$02,$04
            .byte $04,$04,$02,$04,$04,$02,$04,$06,$04,$02,$04,$00,$01,$02,$00,$01
            .byte $02,$03,$03,$01,$02,$01,$01,$02,$03,$01,$02,$FF,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$04,$05,$04
            .byte $05,$06,$03,$04,$04,$05,$07,$05,$04,$05,$04,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FA,$28,$70,$6A
            .byte $C0,$18,$38,$6D,$B5,$FD,$23,$80,$23,$70,$18,$FF,$0A,$0A,$0A,$0A
            .byte $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$88,$89,$8A,$8B
            .byte $8C,$8D,$8E,$8F,$88,$89,$8A,$8B,$8C,$8D,$8E,$00,$00,$01,$01,$01
            .byte $00,$81,$81,$81,$81,$81,$00,$01,$01,$01,$00,$81,$01,$00,$00,$00
            .byte $00,$02,$02,$02,$02,$02,$03,$02,$03,$00,$02,$FF,$42,$40,$40,$00
            .byte $00,$00,$00,$00,$00,$40,$02,$A2,$A0,$B5,$40,$90,$00,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$F6,$FD,$40,$41
            .byte $E5,$FF,$40,$ED,$01,$00,$FD,$FF,$20,$00,$20,$00,$03,$68,$E6,$42
            .byte $CB,$8C,$40,$C5,$0A,$56,$C4,$A0,$8C,$8C,$57,$02,$03,$00,$02,$01
            .byte $01,$02,$00,$01,$02,$00,$01,$00,$00,$01,$02,$06,$92,$8E,$8A,$8A
            .byte $8C,$8C,$8A,$8C,$8C,$8A,$8C,$8E,$8C,$8C,$88,$AC,$02,$06,$02,$02
            .byte $04,$04,$02,$04,$04,$02,$04,$06,$04,$04,$00,$00,$02,$02,$00,$02
            .byte $02,$03,$03,$01,$02,$01,$01,$02,$03,$01,$02,$FF,$01,$01,$05,$04
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$05,$04,$01,$00,$04,$05,$04
            .byte $05,$06,$03,$04,$04,$05,$07,$05,$04,$05,$04,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$6F,$28,$70,$A0
            .byte $C0,$18,$38,$6D,$B5,$FD,$23,$80,$23,$0E,$79,$DD,$0A,$0A,$18,$0A
            .byte $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$88,$89,$8A,$8B
            .byte $8C,$8D,$8E,$8F,$88,$89,$8A,$8B,$8C,$8D,$8E,$00,$00,$01,$01,$01
            .byte $00,$81,$81,$81,$81,$81,$00,$01,$01,$01,$00,$81,$02,$00,$00,$00
            .byte $00,$02,$02,$02,$02,$02,$03,$02,$03,$01,$01,$F0,$42,$40,$40,$00
            .byte $00,$00,$00,$00,$00,$40,$02,$A2,$A0,$B5,$40,$90,$00,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$F6,$FD,$40,$41
            .byte $E5,$FF,$40,$ED,$21,$4C,$FD,$FF,$18,$02,$20,$00,$00,$10,$20,$40
            .byte $70,$B0,$00,$60,$D0,$50,$E0,$80,$00,$00,$00,$00,$00,$00,$10,$30
            .byte $60,$A0,$F0,$50,$C0,$40,$D0,$70,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$61,$62,$62,$62
            .byte $62,$62,$63,$63,$63,$64,$64,$65,$00,$00,$00,$00,$61,$70,$70,$70
            .byte $70,$70,$70,$71,$71,$72,$72,$73,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$0A,$09,$08
            .byte $07,$06,$05,$04,$03,$02,$01,$00,$00,$00,$00,$00,$0A,$0A,$09,$08
            .byte $07,$06,$05,$04,$03,$02,$01,$00,$00,$00,$00,$00,$0A,$0A,$09,$08
            .byte $07,$06,$05,$04,$03,$02,$01,$00,$00,$00,$00,$00,$0A,$0A,$09,$08
            .byte $07,$06,$05,$04,$03,$02,$01,$00,$00,$00,$00,$00,$0C,$0C,$0D,$0E
            .byte $0F,$10,$11,$12,$13,$14,$15,$16,$00,$00,$00,$00,$0C,$0C,$0D,$0E
            .byte $0F,$10,$11,$12,$13,$14,$15,$16,$00,$00,$00,$00,$0C,$0C,$0D,$0E
            .byte $0F,$10,$11,$12,$13,$14,$15,$16,$00,$00,$00,$00,$0C,$0C,$0D,$0E
            .byte $0F,$10,$11,$12,$13,$14,$15,$16,$00,$00,$00,$00,$04,$00,$00,$1B
            .byte $1B,$00,$00,$00,$04,$04,$04,$18,$01,$14,$00,$00,$00,$14,$00,$00
            .byte $14,$00,$00,$02,$00,$01,$01,$02,$02,$02,$00,$00,$00,$00,$08,$00
            .byte $08,$00,$00,$00,$09,$08,$00,$0D,$5D,$09,$49,$50,$00,$00,$42,$42
            .byte $84,$84,$C6,$C6,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$20,$40
            .byte $70,$B0,$00,$60,$D0,$50,$E0,$80,$00,$00,$00,$00,$61,$62,$62,$62
            .byte $62,$62,$63,$63,$63,$64,$64,$65,$00,$00,$00,$00,$00,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01
            .byte $00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$0A,$0A,$0A,$09,$08
            .byte $07,$06,$05,$04,$03,$02,$01,$00,$00,$00,$00,$00,$0C,$0C,$0D,$0E
            .byte $0F,$10,$11,$12,$13,$14,$15,$16,$00,$00,$00,$00,$B0,$30,$60,$30
            .byte $00,$30,$00,$30,$00,$60,$60,$60,$60,$60,$00,$00,$00,$00,$B0,$B0
            .byte $B0,$B0,$B0,$B0,$B0,$B0,$B0,$00,$B0,$B0,$B0,$B0,$60,$60,$60,$60
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$66,$61,$66
            .byte $60,$66,$60,$66,$60,$61,$61,$61,$61,$61,$60,$60,$60,$60,$60,$60
            .byte $60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$60,$61,$61,$61,$61
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7A,$01
            .byte $F4,$02,$F0,$03,$6E,$04,$6A,$05,$E8,$05,$66,$06,$E4,$06,$62,$07
            .byte $E0,$07,$02,$00,$7C,$01,$F6,$02,$F2,$03,$71,$04,$6C,$05,$EA,$05
            .byte $68,$06,$E6,$06,$64,$07,$E2,$07,$04,$00,$7E,$01,$F8,$02,$F4,$03
            .byte $73,$04,$6E,$05,$EC,$05,$6A,$06,$E8,$06,$66,$07,$E4,$07,$F4,$07
            .byte $F1,$07,$EE,$07,$EC,$07,$EB,$07,$E9,$07,$E8,$07,$E7,$07,$E6,$07
            .byte $E5,$07,$E4,$07,$F0,$08,$ED,$08,$EA,$08,$E8,$08,$E7,$08,$E5,$08
            .byte $E4,$08,$E3,$08,$E2,$08,$E1,$08,$E0,$08,$EC,$09,$E9,$09,$E6,$09
            .byte $E4,$09,$E3,$09,$E1,$09,$E0,$09,$DF,$09,$DE,$09,$DD,$09,$DC,$09
            .byte $BC,$11,$42,$10,$C8,$0E,$CC,$0D,$4E,$0D,$52,$0C,$D4,$0B,$56,$0B
            .byte $D8,$0A,$5A,$0A,$DC,$09,$BA,$11,$40,$10,$C6,$0E,$CA,$0D,$4C,$0D
            .byte $50,$0C,$D2,$0B,$54,$0B,$D6,$0A,$58,$0A,$DA,$09,$B8,$11,$3E,$10
            .byte $C4,$0E,$C8,$0D,$4A,$0D,$4E,$0C,$D0,$0B,$52,$0B,$D4,$0A,$56,$0A
            .byte $D8,$09,$C8,$09,$CB,$09,$CE,$09,$D0,$09,$D1,$09,$D3,$09,$D4,$09
            .byte $D5,$09,$D6,$09,$D7,$09,$D8,$09,$CC,$08,$CF,$08,$D2,$08,$D4,$08
            .byte $D5,$08,$D7,$08,$D8,$08,$D9,$08,$DA,$08,$DB,$08,$DC,$08,$D0,$07
            .byte $D3,$07,$D6,$07,$D8,$07,$D9,$07,$DB,$07,$DC,$07,$DD,$07,$DE,$07
            .byte $DF,$07,$E0,$07,$E4,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$84,$84,$84,$84
            .byte $84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84
            .byte $84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84
            .byte $84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84
            .byte $84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84
            .byte $84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$84,$00,$80,$90,$80
            .byte $90,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$DF,$DD,$DE
            .byte $15,$15,$15,$15,$0C,$DF,$DD,$DE,$15,$15,$15,$15,$DF,$DD,$DD,$E0
            .byte $15,$15,$15,$15,$DF,$DD,$DD,$E0,$15,$15,$15,$15,$DF,$DD,$DD,$E0
            .byte $15,$15,$15,$15,$DF,$DD,$DD,$E0,$15,$15,$15,$15,$DD,$DD,$DD,$DD
            .byte $DE,$15,$15,$15,$DD,$A8,$DD,$DD,$DE,$15,$15,$15,$DD,$DD,$DD,$DD
            .byte $DE,$15,$15,$15,$DD,$DD,$DD,$DD,$DE,$15,$15,$15,$DD,$A8,$DD,$DD
            .byte $DE,$15,$15,$15,$DD,$DD,$DD,$DD,$DE,$15,$15,$15,$DD,$DD,$DD,$DD
            .byte $E0,$15,$15,$15,$DD,$A8,$DD,$DD,$E0,$15,$15,$15,$DD,$DD,$DD,$DD
            .byte $E0,$15,$15,$15,$DD,$DD,$DD,$DD,$E0,$15,$15,$15,$DD,$DD,$DD,$DD
            .byte $E0,$15,$15,$15,$DD,$A8,$DD,$DD,$E0,$15,$15,$15,$DD,$DD,$DD,$DD
            .byte $E0,$15,$15,$15,$DD,$DD,$DD,$DD,$E0,$15,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DE,$15,$15,$DD,$DD,$DD,$DD,$DD,$DE,$15,$15,$DD,$DD,$A9,$DD
            .byte $DD,$DE,$15,$15,$DD,$DD,$DD,$DD,$DD,$DE,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DE,$15,$15,$DD,$DD,$DD,$DD,$DD,$DE,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DE,$15,$15,$DD,$DD,$A9,$DD,$DD,$DE,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DE,$15,$15,$DD,$DD,$DD,$DD,$DD,$DE,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$E0,$15,$15,$DD,$DD,$DD,$DD,$DD,$E0,$15,$15,$DD,$DD,$AA,$DD
            .byte $DD,$E0,$15,$15,$DD,$DD,$DD,$DD,$DD,$E0,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$E0,$15,$15,$DD,$DD,$DD,$DD,$DD,$E0,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$E0,$15,$15,$DD,$DD,$DD,$DD,$DD,$E0,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$E0,$15,$15,$DD,$DD,$AA,$DD,$DD,$E0,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$E0,$15,$15,$DD,$DD,$DD,$DD,$DD,$E0,$15,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DE,$15,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DE,$15,$DD,$DD,$AB,$DD,$DD,$DD,$DE,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DE,$15,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DE,$15,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DE,$15,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$15,$DD,$DD,$AB,$DD
            .byte $DD,$DD,$DE,$15,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DE,$15,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$E0,$15,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$E0,$15,$DD,$AE,$AD,$B1,$DD,$DD,$E0,$15,$DD,$AF,$AB,$B2
            .byte $DD,$DD,$E0,$15,$DD,$B0,$AC,$B3,$DD,$DD,$E0,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$E0,$15,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$E0,$15,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$15,$DD,$AE,$AD,$B1
            .byte $DD,$DD,$E0,$15,$DD,$AF,$AB,$B2,$DD,$DD,$E0,$15,$DD,$B0,$AC,$B3
            .byte $DD,$DD,$E0,$15,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$E0,$15,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$15,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$DD,$B6,$B4,$B9
            .byte $DD,$DD,$DD,$DE,$DD,$B7,$AB,$BA,$DD,$DD,$DD,$DE,$DD,$B8,$B5,$BB
            .byte $DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DE,$DD,$B6,$B4,$B9,$DD,$DD,$DD,$DE,$DD,$B7,$AB,$BA
            .byte $DD,$DD,$DD,$DE,$DD,$B8,$B5,$BB,$DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DE,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$DD,$AB,$AB,$AB
            .byte $DD,$DD,$DD,$E0,$DD,$AB,$AB,$AB,$DD,$DD,$DD,$E0,$DD,$AB,$AB,$AB
            .byte $DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$E0,$DD,$AB,$AB,$AB,$DD,$DD,$DD,$E0,$DD,$AB,$AB,$AB
            .byte $DD,$DD,$DD,$E0,$DD,$AB,$AB,$AB,$DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$E0,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$AB,$AB,$AB
            .byte $DD,$DD,$DD,$DD,$DD,$AB,$AB,$AB,$DD,$DD,$DD,$DD,$DD,$AB,$AB,$AB
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$AB,$AB,$AB,$DD,$DD,$DD,$DD,$DD,$AB,$AB,$AB
            .byte $DD,$DD,$DD,$DD,$DD,$AB,$AB,$AB,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$FF,$68,$EE,$DF
            .byte $35,$5F,$FF,$E8,$FD,$EE,$FF,$FF,$FF,$EA,$FF,$16,$FF,$15,$FF,$00
            .byte $DE,$5F,$A1,$5D,$FE,$EA,$FE,$5F,$FF,$FD,$FF,$FF,$FD,$FE,$FD,$90
            .byte $FF,$DF,$FC,$00,$00,$EA,$FF,$DF,$FD,$EA,$FF,$FF,$FF,$FF,$FF,$00
            .byte $FF,$00,$FF,$15,$FD,$95,$FF,$4C,$FF,$00,$5F,$FD,$FD,$FF,$7A,$DF
            .byte $FD,$00,$DE,$E8,$FD,$A0,$FF,$FF,$FF,$E8,$FF,$00,$DF,$15,$5F,$00
            .byte $FB,$5F,$00,$F8,$31,$DF,$22,$5D,$FF,$FD,$58,$48,$AC,$A0,$04,$A0
            .byte $9F,$A2,$00,$3F,$00,$A0,$00,$FF,$DF,$B5,$00,$A0,$0C,$AD,$00,$FF
            .byte $15,$FF,$00,$FF,$00,$A0,$00,$BF,$00,$FF,$20,$B5,$00,$BF,$7F,$20
            .byte $DF,$A0,$A0,$3F,$3B,$BF,$80,$A0,$88,$BE,$E8,$B5,$00,$FF,$00,$FF
            .byte $BD,$A0,$FE,$BA,$80,$37,$15,$A0,$AA,$BF,$38,$00,$C8,$FD,$00,$FD
            .byte $95,$A0,$FB,$FF,$FD,$37,$00,$A0,$FD,$BD,$00,$A0,$00,$A8,$80,$FF
            .byte $15,$FF,$00,$FF,$00,$FF,$00,$BF,$00,$FF,$A0,$B6,$80,$E8,$85,$A0
            .byte $00,$FF,$A5,$3F,$00,$FF,$00,$A0,$1D,$BF,$00,$FF,$A0,$FF,$A0,$FF
            .byte $24,$A4,$FF,$BF,$DE,$A0,$DD,$FF,$3F,$BF,$FF,$FF,$FB,$FF,$FF,$FF
            .byte $FD,$FD,$FF,$FD,$FF,$5F,$FF,$04,$20,$FE,$FF,$FF,$FF,$FA,$FF,$00
            .byte $FF,$00,$FF,$01,$FF,$DF,$FF,$4C,$FF,$00,$DF,$FE,$FF,$68,$EE,$DF
            .byte $35,$5F,$FF,$E8,$FD,$EE,$FF,$FF,$FF,$EA,$FF,$1E,$FF,$15,$FF,$00
            .byte $FE,$5F,$A1,$5D,$FF,$EA,$FA,$5F,$FF,$FD,$FF,$FF,$FD,$F7,$FD,$B0
            .byte $FF,$DF,$FC,$00,$19,$EA,$FF,$DF,$FC,$EA,$FF,$FF,$FF,$FF,$FF,$00
            .byte $FF,$00,$FF,$15,$FD,$95,$FF,$4C,$FF,$00,$5F,$FD,$FD,$FF,$7A,$DF
            .byte $FD,$00,$FE,$E8,$FD,$A0,$FF,$FF,$FF,$E8,$FF,$00,$DF,$15,$5F,$00
            .byte $FB,$5F,$00,$FC,$7F,$DF,$22,$55,$FF,$FD,$48,$40,$AC,$A0,$04,$A0
            .byte $9F,$A2,$00,$3F,$00,$A0,$00,$FF,$DF,$BD,$00,$A0,$0C,$AD,$00,$FF
            .byte $15,$FF,$00,$FF,$00,$A0,$00,$BF,$00,$FF,$20,$B5,$00,$BF,$7F,$20
            .byte $DF,$A0,$A0,$3F,$3B,$BF,$80,$A0,$88,$BF,$E8,$B5,$00,$FF,$00,$FF
            .byte $FD,$A0,$FE,$BB,$80,$37,$15,$A0,$EA,$BF,$B9,$28,$C8,$FD,$00,$FD
            .byte $95,$A0,$FB,$FF,$BC,$37,$00,$A0,$FD,$FD,$00,$A2,$00,$A8,$80,$FF
            .byte $15,$FF,$00,$FF,$00,$FF,$00,$BF,$00,$FF,$A0,$B6,$80,$E8,$85,$A0
            .byte $00,$FF,$A5,$3F,$00,$FF,$00,$A0,$1D,$BF,$00,$FF,$A0,$FF,$A0,$FF
            .byte $24,$A4,$FF,$BB,$96,$A0,$DD,$FF,$3F,$BF,$FF,$FF,$FB,$FF,$FF,$DF
            .byte $ED,$FD,$FF,$FD,$FF,$5F,$FF,$04,$00,$DE,$FF,$DF,$FF,$FA,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$DF,$FF,$4C,$FF,$00,$DF,$FE,$FF,$68,$6E,$DF
            .byte $35,$5F,$FF,$E8,$FD,$EE,$FF,$FF,$FF,$EA,$FF,$16,$FF,$15,$FF,$00
            .byte $CE,$5F,$A1,$5D,$FE,$EA,$FE,$5F,$FF,$FD,$FF,$FF,$FF,$FF,$FF,$92
            .byte $FF,$DF,$FC,$00,$00,$EA,$FF,$DF,$FF,$EA,$FF,$FF,$FF,$FF,$FF,$00
            .byte $FF,$00,$FF,$15,$FF,$95,$FF,$4C,$FF,$00,$5F,$FD,$FF,$FF,$7A,$DF
            .byte $FF,$00,$DE,$E8,$FF,$A0,$FF,$FF,$FF,$E8,$FF,$00,$DF,$15,$5F,$00
            .byte $DB,$5F,$00,$FC,$35,$DF,$22,$55,$FF,$FC,$58,$48,$AC,$A0,$04,$A0
            .byte $9F,$A2,$00,$3F,$00,$A0,$00,$FF,$DF,$B1,$00,$A0,$4C,$AD,$00,$FF
            .byte $15,$FF,$00,$FF,$00,$A0,$00,$BF,$00,$FF,$20,$B5,$00,$BF,$7F,$20
            .byte $DF,$A0,$A0,$3F,$3B,$BF,$80,$A0,$88,$BE,$E8,$B5,$00,$FF,$00,$FF
            .byte $FD,$A0,$FE,$BA,$80,$37,$15,$A0,$EA,$BF,$78,$20,$C8,$FD,$00,$FD
            .byte $95,$A0,$FB,$FF,$FF,$37,$00,$A0,$FD,$FD,$00,$A2,$40,$E8,$80,$FF
            .byte $15,$FF,$04,$FF,$00,$FF,$00,$BF,$00,$FF,$A0,$B2,$80,$E8,$85,$A0
            .byte $00,$FF,$A5,$3F,$00,$FF,$00,$A0,$1D,$BF,$00,$FF,$A0,$FF,$A0,$FF
            .byte $24,$A4,$FF,$FF,$DE,$A0,$DD,$FF,$3F,$BF,$FF,$FF,$FB,$FF,$FF,$DF
            .byte $FF,$FD,$FF,$FD,$FF,$5F,$FF,$04,$20,$DE,$FF,$DF,$FF,$FA,$FF,$00
            .byte $FF,$00,$FF,$01,$FF,$DF,$FF,$4C,$FF,$00,$DF,$FE,$FF,$68,$6E,$DF
            .byte $37,$5F,$FF,$E8,$FF,$EE,$FF,$FF,$FF,$EA,$FF,$16,$FF,$15,$FF,$00
            .byte $DE,$5F,$A1,$5D,$FF,$EA,$FE,$5F,$FF,$FD,$FF,$FF,$FF,$F7,$FF,$92
            .byte $FF,$DF,$FF,$00,$5B,$EA,$FF,$DF,$FF,$EA,$FF,$FF,$FF,$FF,$FF,$00
            .byte $FF,$00,$FF,$15,$FF,$95,$FF,$4C,$FF,$00,$5F,$FD,$FF,$FF,$7A,$DF
            .byte $FF,$00,$FE,$E8,$FF,$A4,$FF,$FF,$FF,$E8,$FF,$00,$DF,$15,$5F,$00
            .byte $FF,$5F,$00,$FC,$7F,$DF,$22,$55,$FF,$FD,$40,$40,$AC,$A0,$04,$A0
            .byte $9F,$A2,$00,$3F,$00,$A0,$00,$FF,$DF,$BD,$00,$A0,$0C,$AD,$00,$FF
            .byte $15,$FF,$00,$FF,$00,$A0,$00,$FF,$00,$FF,$20,$B5,$00,$BF,$7F,$20
            .byte $DF,$A0,$A0,$3F,$2B,$BF,$80,$A0,$88,$BF,$E8,$B5,$00,$FF,$00,$FF
            .byte $FD,$A0,$FE,$FB,$80,$37,$15,$A0,$EA,$BF,$F9,$20,$CA,$FD,$02,$FF
            .byte $95,$A0,$FB,$FF,$BE,$37,$02,$A0,$FF,$FD,$00,$A2,$00,$E8,$80,$FF
            .byte $15,$FF,$00,$FF,$02,$FF,$00,$FF,$00,$FF,$A0,$B6,$82,$E8,$87,$A0
            .byte $02,$FF,$A5,$3F,$00,$FF,$00,$A0,$1D,$BF,$02,$FF,$A0,$FF,$A0,$FF
            .byte $24,$A4,$FF,$FF,$96,$A0,$DD,$FF,$3F,$BF,$FF,$FF,$FB,$FF,$FF,$FF
            .byte $ED,$FD,$FF,$FD,$FF,$5F,$FF,$04,$20,$DE,$FF,$DF,$FF,$FA,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$DF,$FF,$4C,$FF,$00,$DF,$FE,$FF,$68,$EE,$DF
            .byte $35,$5F,$FF,$E8,$FD,$EE,$FF,$FF,$FF,$EA,$FF,$16,$FF,$15,$FF,$00
            .byte $CE,$5F,$A1,$5D,$FE,$EA,$FE,$5F,$FF,$FD,$FF,$FF,$FD,$FE,$FD,$B0
            .byte $FF,$DF,$FC,$00,$00,$EA,$FF,$DF,$FD,$EA,$FF,$FF,$FF,$FF,$FF,$00
            .byte $FF,$00,$FF,$15,$FD,$95,$FF,$4C,$FF,$00,$5F,$FD,$FD,$FF,$78,$DF
            .byte $FD,$00,$FE,$E8,$FD,$A4,$FF,$FF,$FF,$E8,$FF,$00,$DF,$15,$5F,$00
            .byte $FF,$5F,$00,$FC,$35,$DF,$22,$55,$FF,$FD,$5C,$48,$AC,$A0,$04,$A0
            .byte $9F,$A2,$00,$3F,$00,$A0,$00,$FF,$DF,$B1,$00,$A0,$4C,$AC,$00,$FF
            .byte $15,$FF,$00,$FF,$00,$A0,$00,$BF,$00,$FF,$20,$B5,$00,$BF,$7F,$20
            .byte $DF,$A0,$A0,$3F,$3B,$BF,$80,$A0,$88,$BE,$E8,$B5,$00,$FF,$00,$FF
            .byte $FD,$A0,$FE,$BA,$80,$37,$15,$A0,$AA,$BF,$38,$20,$CA,$FD,$02,$FF
            .byte $95,$A0,$FB,$FF,$FF,$37,$02,$A0,$FF,$B5,$00,$A2,$40,$A8,$80,$FF
            .byte $15,$FF,$04,$FF,$02,$FF,$00,$BF,$00,$FF,$A0,$B6,$82,$E8,$87,$A0
            .byte $02,$FF,$A5,$3F,$02,$FF,$00,$A0,$1D,$BF,$00,$FF,$A0,$FF,$A0,$FF
            .byte $24,$A4,$FF,$FF,$DE,$A0,$DD,$FF,$3F,$BF,$FF,$FF,$FB,$FF,$FF,$DF
            .byte $FF,$FD,$FF,$FD,$FF,$5F,$FF,$04,$20,$DE,$FF,$DF,$FF,$FA,$FF,$00
            .byte $FF,$00,$FF,$00,$FF,$DF,$FF,$4C,$FF,$00,$DF,$FE,$FF,$68,$6E,$DF
            .byte $37,$5F,$FF,$E8,$FF,$EE,$FF,$FF,$FF,$E8,$FF,$1E,$FF,$15,$FF,$00
            .byte $DE,$5F,$A1,$5D,$FE,$EA,$FA,$5F,$FF,$FD,$FF,$FF,$FD,$FF,$FD,$90
            .byte $FF,$DF,$FD,$00,$5B,$EA,$FF,$DF,$FC,$EA,$FF,$FF,$FF,$FF,$FF,$00
            .byte $FF,$00,$FF,$15,$FD,$95,$FF,$4C,$FF,$00,$5F,$FD,$FD,$FF,$7A,$DF
            .byte $FD,$00,$FE,$E8,$FD,$A0,$FF,$FF,$FF,$E8,$FF,$00,$DF,$15,$5F,$00
            .byte $FB,$5F,$00,$F8,$7F,$DF,$22,$55,$FF,$FC,$48,$40,$AC,$A0,$04,$A0
            .byte $9D,$A2,$00,$BF,$00,$A0,$00,$FF,$DF,$BD,$00,$A0,$0C,$AD,$00,$FF
            .byte $15,$FF,$00,$FF,$00,$A0,$00,$FF,$00,$FF,$20,$B5,$00,$BF,$7F,$20
            .byte $DF,$A0,$A0,$BF,$3B,$BF,$80,$A0,$88,$BF,$E8,$F5,$00,$FF,$00,$FF
            .byte $FD,$A0,$FE,$FB,$00,$37,$15,$A0,$EA,$BF,$F9,$20,$C8,$FD,$00,$FD
            .byte $95,$A0,$FB,$FF,$BC,$37,$00,$A0,$FD,$FD,$00,$AE,$00,$E8,$80,$FF
            .byte $15,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$A0,$B6,$80,$E8,$85,$A0
            .byte $00,$FF,$A5,$BF,$00,$FF,$00,$A0,$1D,$BF,$00,$FF,$A0,$FF,$A0,$FF
            .byte $24,$A4,$FF,$FF,$94,$A0,$DD,$FF,$3F,$BF,$FF,$FF,$FB,$FF,$FF,$FF
            .byte $ED,$FD,$FF,$FD,$FF,$5F,$FF,$04,$20,$DE,$FF,$FF,$FF,$FA,$FF,$00
            .byte $FF,$00,$FF,$00,$09,$19,$1A,$81,$21,$41,$00,$0E,$06,$00,$00,$70
            .byte $B6,$4E,$E2,$ED,$F8,$03,$04,$03,$E4,$6C,$00,$6C,$06,$41,$1A,$03
            .byte $36,$02,$A1,$0D,$0F,$EA,$FE,$5F,$FF,$FD,$FF,$FF

* = $7A40

l_7A40
                    LDA #$09                        ; (7A40) Set A to #$09 (9 / 00001001)
                    STA $7A18                       ; (7A42) Store A to $7A18
                    LDA #$19                        ; (7A45) Set A to #$19 (25 / 00011001)
                    STA $7A19                       ; (7A47) Store A to $7A19
                    LDA #$1A                        ; (7A4A) Set A to #$1A (26 / 00011010)
                    STA $7A1A                       ; (7A4C) Store A to $7A1A
                    LDA #$81                        ; (7A4F) Set A to #$81 (129 / 10000001)
                    STA $7A1B                       ; (7A51) Store A to $7A1B
                    LDA #$21                        ; (7A54) Set A to #$21 (33 / 00100001)
                    STA $7A1C                       ; (7A56) Store A to $7A1C
                    LDA #$41                        ; (7A59) Set A to #$41 (65 / 01000001)
                    STA $7A1D                       ; (7A5B) Store A to $7A1D
                    LDA #$00                        ; (7A5E) Set A to #$00 (0 / 00000000)
                    STA $7A1E                       ; (7A60) Store A to $7A1E
                    LDA #$0E                        ; (7A63) Set A to #$0E (14 / 00001110)
                    STA $7A1F                       ; (7A65) Store A to $7A1F
                    LDA #$06                        ; (7A68) Set A to #$06 (6 / 00000110)
                    STA $7A20                       ; (7A6A) Store A to $7A20
                    LDA #$09                        ; (7A6D) Set A to #$09 (9 / 00001001)
                    STA FilterCutOff1               ; (7A6F) Store A to $D415
                    LDA #$73                        ; (7A72) Set A to #$73 (115 / 01110011)
                    STA FilterCutOff2               ; (7A74) Store A to $D416
                    LDA #$05                        ; (7A77) Set A to #$05 (5 / 00000101)
                    STA FilterControl               ; (7A79) Store A to $D417
                    LDA #$3F                        ; (7A7C) Set A to #$3F (63 / 00111111)
                    STA $D418                       ; (7A7E) Store A to $D418

l_7A81
                    LDA #$00                        ; (7A81) Set A to #$00 (0 / 00000000)
                    STA $7A23                       ; (7A83) Store A to $7A23
                    LDA #$E0                        ; (7A86) Set A to #$E0 (224 / 11100000)
                    STA $7A26                       ; (7A88) Store A to $7A26
                    LDA #$D1                        ; (7A8B) Set A to #$D1 (209 / 11010001)
                    STA $7A24                       ; (7A8D) Store A to $7A24
                    LDA #$EA                        ; (7A90) Set A to #$EA (234 / 11101010)
                    STA $7A27                       ; (7A92) Store A to $7A27
                    LDA #$55                        ; (7A95) Set A to #$55 (85 / 01010101)
                    STA $7A25                       ; (7A97) Store A to $7A25
                    LDA #$F7                        ; (7A9A) Set A to #$F7 (247 / 11110111)
                    STA $7A28                       ; (7A9C) Store A to $7A28
                    LDA #$08                        ; (7A9F) Set A to #$08 (8 / 00001000)
                    STA $7A29                       ; (7AA1) Store A to $7A29
                    STA $7A2A                       ; (7AA4) Store A to $7A2A
                    STA $7A2B                       ; (7AA7) Store A to $7A2B
                    RTS                             ; (7AAA) Return from Subroutine

l_7AAB
                    JSR l_7B98                      ; (7AAB) Jump to Subroutine at $7B98
                    LDA $7A21                       ; (7AAE) Load A with $7A21
                    BEQ l_7AD3                      ; (7AB1) Branch to $7AD3 if Equal
                    INC $7A22                       ; (7AB3) Increment Memory $7A22
                    LDA $7A22                       ; (7AB6) Load A with $7A22
                    CMP #$02                        ; (7AB9) Subtract #$02 from A (2 / 00000010)
                    BCC l_7AD0                      ; (7ABB) Branch to $7AD0 if Carry Clear

l_7ABD
                    LDA #$00                        ; (7ABD) Set A to #$00 (0 / 00000000)
                    STA $7A22                       ; (7ABF) Store A to $7A22
                    LDA $7A21                       ; (7AC2) Load A with $7A21
                    CLC                             ; (7AC5) Clear Carry Flag
                    ADC #$01                        ; (7AC6) Add with Carry with #$01 (1 / 00000001)
                    AND #$01                        ; (7AC8) Logical AND with Accumulator and #$01 (1 / 00000001)
                    STA $7A21                       ; (7ACA) Store A to $7A21
                    JSR l_7AE0                      ; (7ACD) Jump to Subroutine at $7AE0

l_7AD0
                    JMP l_7B86                      ; (7AD0) Jump to $7B86

l_7AD3
                    INC $7A22                       ; (7AD3) Increment Memory $7A22
                    LDA $7A22                       ; (7AD6) Load A with $7A22
                    CMP #$03                        ; (7AD9) Subtract #$03 from A (3 / 00000011)
                    BCC l_7AD0                      ; (7ADB) Branch to $7AD0 if Carry Clear
                    JMP l_7ABD                      ; (7ADD) Jump to $7ABD

l_7AE0
                    LDX #$00                        ; (7AE0) Set X to #$00 (0 / 00000000)

l_7AE2
                    LDA $7A23,X                     ; (7AE2) Load A with $7A23,X
                    STA $D9                         ; (7AE5) Store A to $D9
                    LDA $7A26,X                     ; (7AE7) Load A with $7A26,X
                    STA $DA                         ; (7AEA) Store A to $DA
                    LDA $7A18,X                     ; (7AEC) Load A with $7A18,X
                    STA $7A32                       ; (7AEF) Store A to $7A32
                    LDA $7A1B,X                     ; (7AF2) Load A with $7A1B,X
                    STA $7A31                       ; (7AF5) Store A to $7A31
                    LDA $7A1E,X                     ; (7AF8) Load A with $7A1E,X
                    STA $7A30                       ; (7AFB) Store A to $7A30
                    LDA $7A29,X                     ; (7AFE) Load A with $7A29,X
                    STA $7A33                       ; (7B01) Store A to $7A33
                    STX $7A35                       ; (7B04) Store X Register $7A35
                    JSR l_7B23                      ; (7B07) Jump to Subroutine at $7B23
                    LDX $7A35                       ; (7B0A) Load X with $7A35
                    LDA $7A33                       ; (7B0D) Load A with $7A33
                    STA $7A29,X                     ; (7B10) Store A to $7A29,X
                    LDA $D9                         ; (7B13) Load A with $D9
                    STA $7A23,X                     ; (7B15) Store A to $7A23,X
                    LDA $DA                         ; (7B18) Load A with $DA
                    STA $7A26,X                     ; (7B1A) Store A to $7A26,X
                    INX                             ; (7B1D) Increment X
                    CPX #$03                        ; (7B1E) Subtract #$03 from X (3 / 00000011)
                    BNE l_7AE2                      ; (7B20) Branch to $7AE2 if Not Equal

l_7B22
                    RTS                             ; (7B22) Return from Subroutine

l_7B23
                    DEC $7A33                       ; (7B23) Decrement $7A33
                    LDA $7A33                       ; (7B26) Load A with $7A33
                    BNE l_7B22                      ; (7B29) Branch to $7B22 if Not Equal
                    LDA $7BC8,X                     ; (7B2B) Load A with $7BC8,X
                    TAX                             ; (7B2E) Transfer A to X
                    LDY #$00                        ; (7B2F) Load Y with #$00 (0 / 00000000)
                    TYA                             ; (7B31) Transfer Y to A
                    STA Voice1Control,X             ; (7B32) Store A to $D404,X
                    LDA $7A32                       ; (7B35) Load A with $7A32
                    STA Voice1AttackDecayLength,X   ; (7B38) Store A to $D405,X
                    JSR l_7B73                      ; (7B3B) Jump to Subroutine at $7B73
                    STA Voice1Frequency2,X          ; (7B3E) Store A to $D401,X
                    INY                             ; (7B41) Increment Y Register
                    JSR l_7B73                      ; (7B42) Jump to Subroutine at $7B73
                    STA Voice1Frequency1,X          ; (7B45) Store A to $D400,X
                    STA $7A2F                       ; (7B48) Store A to $7A2F
                    LDA $7A30                       ; (7B4B) Load A with $7A30
                    STA Voice1PulseWidth2,X         ; (7B4E) Store A to $D403,X
                    LDA $7A31                       ; (7B51) Load A with $7A31
                    STA Voice1Control,X             ; (7B54) Store A to $D404,X
                    INY                             ; (7B57) Increment Y Register
                    JSR l_7B73                      ; (7B58) Jump to Subroutine at $7B73
                    STA $7A33                       ; (7B5B) Store A to $7A33
                    LDA $D9                         ; (7B5E) Load A with $D9
                    CLC                             ; (7B60) Clear Carry Flag
                    ADC #$03                        ; (7B61) Add with Carry with #$03 (3 / 00000011)
                    STA $D9                         ; (7B63) Store A to $D9
                    BCC l_7B69                      ; (7B65) Branch to $7B69 if Carry Clear
                    INC $DA                         ; (7B67) Increment Memory $DA

l_7B69
                    LDX $7A35                       ; (7B69) Load X with $7A35
                    LDA $7A2F                       ; (7B6C) Load A with $7A2F
                    STA $7A2C,X                     ; (7B6F) Store A to $7A2C,X
                    RTS                             ; (7B72) Return from Subroutine

l_7B73
                    LDA ProgrammableLogicArray      ; (7B73) Load A with $01
                    STA $7A34                       ; (7B75) Store A to $7A34
                    LDA #$00                        ; (7B78) Set A to #$00 (0 / 00000000)
                    STA ProgrammableLogicArray      ; (7B7A) Store A to $01
                    LDA ($D9),Y                     ; (7B7C) Load A with ($D9),Y
                    PHA                             ; (7B7E) Push Accumulator to Stack
                    LDA $7A34                       ; (7B7F) Load A with $7A34
                    STA ProgrammableLogicArray      ; (7B82) Store A to $01
                    PLA                             ; (7B84) Pull Accumulator from Stack
                    RTS                             ; (7B85) Return from Subroutine

l_7B86
                    LDA $7A23                       ; (7B86) Load A with $7A23
                    CMP #$D1                        ; (7B89) Subtract #$D1 from A (209 / 11010001)
                    BNE l_7B97                      ; (7B8B) Branch to $7B97 if Not Equal
                    LDA $7A26                       ; (7B8D) Load A with $7A26
                    CMP #$EA                        ; (7B90) Subtract #$EA from A (234 / 11101010)
                    BNE l_7B97                      ; (7B92) Branch to $7B97 if Not Equal
                    JMP l_7A81                      ; (7B94) Jump to $7A81

l_7B97
                    RTS                             ; (7B97) Return from Subroutine

l_7B98
                    LDX #$00                        ; (7B98) Set X to #$00 (0 / 00000000)
                    JMP l_7BB6                      ; (7B9A) Jump to $7BB6

l_7B9D
                    LDA $7BC8,X                     ; (7B9D) Load A with $7BC8,X
                    TAY                             ; (7BA0) Transfer A to Y
                    LDA $7A36,X                     ; (7BA1) Load A with $7A36,X
                    CLC                             ; (7BA4) Clear Carry Flag
                    ADC #$04                        ; (7BA5) Add with Carry with #$04 (4 / 00000100)
                    AND #$0F                        ; (7BA7) Logical AND with Accumulator and #$0F (15 / 00001111)
                    STA $7A36,X                     ; (7BA9) Store A to $7A36,X
                    CLC                             ; (7BAC) Clear Carry Flag
                    ADC $7A2C,X                     ; (7BAD) Add with Carry $7A2C,X
                    STA Voice1Frequency1,Y          ; (7BB0) Set $D400,Y to A
                    JMP l_7BC2                      ; (7BB3) Jump to $7BC2

l_7BB6
                    LDA $7A2C,X                     ; (7BB6) Load A with $7A2C,X
                    CLC                             ; (7BB9) Clear Carry Flag
                    ADC #$0A                        ; (7BBA) Add with Carry with #$0A (10 / 00001010)
                    STA $7A2C,X                     ; (7BBC) Store A to $7A2C,X
                    STA Voice1Frequency1            ; (7BBF) Store A to $D400

l_7BC2
                    INX                             ; (7BC2) Increment X
                    CPX #$03                        ; (7BC3) Subtract #$03 from X (3 / 00000011)
                    BCC l_7B9D                      ; (7BC5) Branch to $7B9D if Carry Clear
                    RTS                             ; (7BC7) Return from Subroutine

* = $7BC8
            .byte $00,$07,$0E,$A1,$FF,$FD,$20,$AB,$00,$E8,$80,$FF,$15,$FF,$00,$FF
            .byte $02,$FF,$00,$FF,$00,$FF,$A0,$B6,$82,$E8,$87,$A0,$02,$FF,$A5,$BF
            .byte $02,$FF,$00,$A0,$1D,$BF,$02,$FF,$A0,$FF,$A0,$FF,$24,$A4,$FF,$FB
            .byte $90,$A0,$DD,$FF,$BF,$BF,$FF,$FF,$FB,$FF,$FF,$FF,$ED,$FD,$FF,$FD
            .byte $FF,$5F,$FF,$04,$20,$DE,$FF,$DF,$FF,$FA,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$DF,$FF,$4C,$FF,$00,$DF,$FE,$FF,$68,$EE,$DF,$35,$5F,$FF,$E8
            .byte $FD,$EE,$FF,$FF,$FF,$EA,$FF,$16,$FF,$15,$FF,$00,$CE,$5F,$A1,$5D
            .byte $FE,$EA,$FE,$5F,$FF,$FD,$FF,$FF,$FD,$EF,$FD,$B0,$FF,$DF,$FC,$00
            .byte $00,$EA,$FF,$DF,$FD,$EA,$FF,$FF,$FF,$FF,$FF,$00,$FF,$00,$FF,$15
            .byte $FD,$95,$FF,$4C,$FF,$00,$5F,$FD,$FD,$FF,$78,$DF,$FD,$00,$FE,$E8
            .byte $FD,$A0,$FF,$FF,$FF,$E8,$FF,$00,$DF,$15,$5F,$00,$FB,$5B,$00,$F8
            .byte $31,$DF,$22,$5D,$FF,$FD,$48,$48,$AC,$A0,$04,$A0,$9F,$A2,$08,$3F
            .byte $00,$A0,$00,$FF,$DF,$B5,$00,$A0,$4C,$AC,$00,$FF,$15,$FF,$00,$FF
            .byte $00,$A0,$00,$BF,$00,$FF,$20,$B5,$00,$BF,$7F,$20,$DF,$A0,$A0,$3F
            .byte $3B,$BF,$80,$A0,$88,$BE,$E8,$B5,$00,$FF,$00,$FF,$FD,$A0,$FE,$BA
            .byte $80,$37,$15,$A0,$EA,$BF,$F8,$20,$C8,$FD,$00,$FD,$95,$A0,$FB,$FF
            .byte $FF,$37,$00,$A0,$FD,$F5,$00,$A2,$48,$A8,$80,$FF,$15,$FF,$04,$FF
            .byte $00,$FF,$00,$BF,$00,$FF,$A0,$B6,$80,$E8,$85,$A0,$00,$FF,$A5,$3F
            .byte $00,$FF,$00,$A0,$1D,$BF,$00,$FF,$A0,$FF,$A0,$FF,$24,$A4,$FF,$FF
            .byte $DE,$A0,$DD,$FF,$3F,$BF,$FF,$FF,$FB,$FF,$FF,$FF,$FF,$FD,$FF,$FD
            .byte $FF,$5F,$FF,$04,$20,$FE,$FF,$FF,$FF,$FA,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$DF,$FF,$4C,$FF,$00,$DF,$FE,$FF,$68,$EE,$DF,$37,$5F,$FF,$E8
            .byte $FF,$EE,$FF,$FF,$FF,$E8,$FF,$1E,$FF,$15,$FF,$00,$FE,$5F,$A3,$5D
            .byte $FF,$EA,$FA,$5F,$FF,$FD,$FF,$FF,$FD,$F7,$FD,$B0,$FF,$DF,$FD,$00
            .byte $5F,$EA,$FF,$DF,$FD,$EA,$FF,$FF,$FF,$FF,$FF,$00,$FF,$00,$FF,$15
            .byte $FD,$95,$FF,$4C,$FF,$00,$5F,$FD,$FD,$FF,$7A,$DF,$FD,$00,$FE,$E8
            .byte $FD,$A4,$FF,$FF,$FF,$E8,$FF,$00,$DF,$15,$5F,$00,$FF,$5F,$02,$FC
            .byte $7F,$DF,$22,$55,$FF,$FD,$48,$40,$AC,$A0,$04,$A0,$9D,$A2,$00,$BF
            .byte $00,$A0,$00,$FF,$DF,$BD,$00,$A0,$0C,$AD,$00,$FF,$15,$FF,$00,$FF
            .byte $00,$A0,$00,$FF,$00,$FF,$20,$B5,$00,$BF,$7F,$20,$DD,$A0,$A0,$BF
            .byte $29,$BF,$80,$A0,$88,$BF,$E8,$F5,$00,$FF,$00,$FF,$FD,$A0,$FE,$BB
            .byte $00,$37,$15,$A0,$EA,$BF,$FC,$20,$C8,$FD,$00,$FD,$95,$A0,$E9,$FF
            .byte $A4,$37,$00,$A0,$FD,$FD,$00,$AE,$00,$E8,$80,$FF,$15,$FF,$00,$FF
            .byte $00,$FF,$00,$FF,$00,$FF,$A0,$B6,$80,$E8,$85,$A0,$00,$FF,$A5,$BF
            .byte $00,$FF,$00,$A0,$1D,$BF,$00,$FF,$A0,$FF,$A0,$FF,$24,$A4,$FF,$FF
            .byte $90,$A0,$DD,$FF,$BF,$BF,$FF,$FF,$FB,$FF,$FF,$FF,$EC,$FD,$FF,$FD
            .byte $FF,$5F,$FF,$04,$20,$DE,$FF,$DF,$FF,$FA,$FF,$00,$FF,$00,$FF,$01
            .byte $FF,$DF,$FF,$4C,$FF,$00,$DF,$FE,$FF,$68,$6E,$DF,$35,$5F,$FF,$E8
            .byte $FD,$EE,$FF,$FF,$FF,$EA,$FF,$16,$FF,$15,$FF,$00,$CE,$5F,$A1,$5D
            .byte $FF,$EA,$FE,$5F,$FF,$FD,$FF,$FF,$FD,$FF,$FD,$B0,$FF,$DF,$FC,$00
            .byte $00,$EA,$FF,$DF,$FC,$EA,$FF,$FF,$FF,$FF,$FF,$00,$FF,$00,$FF,$15
            .byte $FD,$95,$FF,$4C,$FF,$00,$5F,$FD,$FD,$FF,$78,$DF,$FD,$00,$FE,$E8
            .byte $FD,$A0,$FF,$FF,$FF,$E8,$FF,$00,$DF,$15,$5F,$00,$FB,$5F,$00,$F8
            .byte $71,$DF,$22,$55,$FF,$FC,$48,$48,$AC,$A0,$04,$A0,$9F,$A2,$00,$3F
            .byte $00,$A0,$00,$FF,$DF,$B5,$00,$A0,$4C,$AD,$00,$FF,$15,$FF,$00,$FF
            .byte $00,$A0,$00,$BF,$00,$FF,$20,$B5,$00,$BF,$7F,$20,$DF,$A0,$A0,$3F
            .byte $3B,$BF,$80,$A0,$88,$BE,$E8,$B5,$00,$FF,$00,$FF,$BD,$A0,$FE,$BA
            .byte $80,$37,$15,$A0,$AA,$BF,$38,$20,$CA,$FD,$02,$FF,$95,$A0,$FB,$FF
            .byte $FF,$37,$02,$A0,$FF,$B5,$00,$A6,$40,$A0,$80,$FF,$15,$FF,$04,$FF
            .byte $02,$FF,$00,$BF,$00,$FF,$A0,$B6,$82,$E8,$87,$A0,$02,$FF,$A5,$3F
            .byte $02,$FF,$00,$A0,$1D,$BF,$00,$FF,$A0,$FF,$A0,$FF,$24,$A4,$FF,$BF
            .byte $DE,$A0,$DD,$FF,$3F,$BF,$FF,$FF,$FB,$FF,$FF,$DF,$FF,$FD,$FF,$FD
            .byte $FF,$5F,$FF,$04,$60,$FE,$FF,$FF,$FF,$FA,$FF,$00,$FF,$00,$FF,$00
            .byte $FF,$DF,$FF,$4C,$FF,$00,$DF,$FE,$FF,$68,$EE,$DF,$37,$5F,$FF,$E8
            .byte $FF,$EE,$FF,$FF,$FF,$E8,$FF,$16,$FF,$15,$FF,$00,$FE,$5F,$AB,$5D
            .byte $FF,$EA,$FA,$5F,$FF,$FD,$FF,$FF,$FF,$D7,$FF,$92,$FF,$DF,$FF,$00
            .byte $5F,$EA,$FF,$DF,$FF,$EA,$FF,$FF,$FF,$FF,$FF,$00,$FF,$00,$FF,$15
            .byte $FF,$95,$FF,$4C,$FF,$00,$5F,$FD,$FF,$FF,$7A,$DF,$FF,$00,$FE,$E8
            .byte $FF,$A0,$FF,$FF,$FF,$E8,$FF,$00,$DF,$15,$5F,$00,$FF,$5F,$0A,$E8
            .byte $7F,$DF,$2A,$55,$FF,$FD,$48,$40,$AC,$A0,$04,$A0,$9F,$A2,$00,$BF
            .byte $00,$A2,$00,$FF,$DF,$BD,$00,$A0,$0C,$AD,$00,$FF,$15,$FF,$00,$FF
            .byte $00,$A0,$00,$FF,$02,$FF,$20,$B5,$00,$BF,$7F,$A0,$DD,$A0,$A0,$BF
            .byte $A9,$BF,$80,$A0,$88,$BF,$E8,$FD,$00,$FF,$00,$FF,$FD,$A0,$FC,$BF
            .byte $00,$37,$15,$A0,$EE,$BF,$FF,$20,$4A,$FD,$02,$FF,$97,$A0,$EB,$FF
            .byte $A4,$37,$02,$A0,$FF,$FD,$00,$AE,$04,$E8,$80,$FF,$15,$FF,$00,$FF
            .byte $02,$FF,$00,$FF,$02,$FF,$A0,$B6,$82,$E8,$87,$A0,$02,$FF,$A5,$BF
            .byte $02,$FF,$00,$A0,$1D,$BF,$02,$FF,$A0,$FF,$A0,$FF,$24,$A4,$FF,$FF
            .byte $94,$A0,$DD,$FF,$BF,$BF,$FF,$FF,$00,$5A,$15,$60,$C3,$C2,$CD,$38
            .byte $30,$A2,$30,$8E,$8D,$83,$15,$64,$64,$6B,$15,$8E,$8D,$15,$8B,$8E
            .byte $82,$80,$93,$88,$8E,$8D,$9A,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$89,$80,$8C,$84,$92,$15,$81,$8E,$8D,$83,$15,$64
            .byte $64,$6B,$15,$8E,$8D,$15,$8B,$8E,$82,$80,$93,$88,$8E,$8D,$9A,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$9F,$8C,$A0,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$87,$90,$9A,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$98,$8E,$94,$91
            .byte $15,$91,$84,$85,$9E,$80,$95,$93,$80,$8A,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$8E,$94,$91,$15,$15,$91,$84,$85,$9E,$91,$8C,$9C
            .byte $8C,$8F,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$96,$84,$8B,$8B
            .byte $15,$83,$8E,$8D,$84,$15,$64,$64,$6B,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$98,$8E,$94,$91,$15,$82,$8E,$83,$84,$15,$85,$8E
            .byte $91,$15,$82,$88,$93,$98,$15,$87,$80,$8B,$8B,$15,$88,$92,$9A,$9A
            .byte $9A,$9A,$9A,$15,$15,$15,$15,$15,$15,$15,$15,$15,$82,$82,$8F,$87
            .byte $89,$9A,$9A,$9A,$9A,$9A,$92,$93,$8E,$8F,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$86,$8E,$8E,$83,$15,$8B,$94,$82,$8A,$9D,$9A,$9A
            .byte $9A,$9A,$9A,$92,$93,$8E,$8F,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$84,$8D,$83,$15
            .byte $8E,$85,$15,$8C,$84,$92,$92,$80,$86,$84,$9A,$9A,$9A,$9A,$9A,$92
            .byte $93,$8E,$8F,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$D0,$ED,$80,$19,$20,$20,$08
            .byte $A0,$00,$A0,$00,$A1,$C1,$08,$00,$C0,$48,$20,$20,$8D,$D1,$21,$10
            .byte $11,$20,$05,$89,$E8,$E4,$1D,$00,$41,$60,$85,$C0,$68,$85,$41,$00
            .byte $88,$81,$D0,$04,$68,$85,$40,$40,$85,$40,$20,$04,$89,$84,$29,$40
            .byte $01,$00,$29,$80,$B0,$C8,$48,$80,$86,$20,$38,$A6,$22,$33,$83,$B7
            .byte $0F,$A2,$2E,$36,$EE,$A3,$22,$B7,$C6,$63,$F3,$EF,$D3,$EF,$62,$F7
            .byte $D7,$D3,$E3,$E6,$56,$CB,$62,$5B,$BE,$BF,$BF,$BF,$B2,$BF,$9B,$FF
            .byte $B6,$DE,$96,$FE,$B6,$9F,$B4,$DE,$D7,$FF,$DE,$E3,$DB,$DB,$D3,$FF
            .byte $F6,$FF,$DF,$FF,$FF,$FF,$FF,$FF,$F9,$88,$B0,$18,$20,$A9,$00,$08
            .byte $C0,$F1,$04,$29,$90,$0C,$B1,$08,$8D,$00,$10,$85,$BD,$B0,$8D,$20
            .byte $01,$20,$90,$81,$CA,$D0,$D4,$00,$00,$C0,$82,$A8,$E8,$D0,$01,$40
            .byte $88,$20,$AD,$00,$88,$84,$1D,$00,$20,$08,$A6,$0E,$60,$84,$20,$00
            .byte $A9,$82,$A9,$C0,$80,$C0,$60,$00,$A4,$E2,$AA,$30,$01,$A8,$65,$E7
            .byte $92,$23,$C8,$72,$A6,$23,$CA,$BF,$CA,$E5,$EF,$EF,$EF,$E5,$E3,$FF
            .byte $F5,$C7,$E7,$F7,$C7,$C1,$F2,$43,$F6,$FF,$B5,$BF,$98,$FF,$B2,$FF
            .byte $B6,$BE,$BD,$BC,$B4,$9F,$94,$DE,$D4,$FF,$D0,$F7,$F0,$FB,$DA,$FF
            .byte $FF,$FF,$F6,$FF,$FF,$FF,$FF,$FF,$20,$40,$7A,$20,$AB,$7A,$60,$48
            .byte $89,$B0,$04,$48,$48,$48,$00,$08,$0D,$D0,$04,$A0,$80,$A9,$00,$08
            .byte $B9,$A1,$8D,$81,$29,$29,$01,$00,$00,$90,$29,$8D,$A8,$98,$20,$00
            .byte $E0,$80,$F0,$09,$48,$90,$00,$40,$48,$08,$20,$88,$00,$00,$00,$00
            .byte $90,$01,$BC,$01,$35,$AF,$04,$01,$3F,$00,$07,$05,$0F,$02,$01,$08
            .byte $00,$00,$26,$00,$05,$05,$01,$40,$00,$01,$01,$01,$00,$81,$81,$81
            .byte $00,$81,$81,$81,$00,$01,$01,$01,$FE,$FE,$00,$7E,$7E,$7E,$00,$FE
            .byte $7E,$7E,$00,$FE,$FE,$FE,$00,$7E,$00,$81,$81,$81,$00,$01,$01,$01
            .byte $00,$01,$01,$01,$00,$81,$81,$81,$01,$01,$00,$81,$81,$81,$00,$01
            .byte $81,$81,$00,$01,$01,$01,$00,$81,$01,$00,$0A,$01,$08,$0A,$00,$00
            .byte $96,$15,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$88,$00
            .byte $80,$81,$82,$83,$84,$85,$86,$87,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$FE,$FD,$FB,$F7,$EF,$DF,$BF,$7F
            .byte $01,$02,$04,$08,$10,$20,$40,$80,$01,$0F,$02,$0B,$00,$00,$00,$06
            .byte $05,$0A,$10,$20,$30,$40,$50,$60,$90,$91,$92,$93,$94,$95,$96,$97
            .byte $68,$00,$00,$00,$00,$00,$00,$00,$18,$19,$12,$13,$14,$15,$16,$17
            .byte $14,$15,$16,$17,$18,$19,$12,$00,$2E,$C8,$08,$81,$C1,$B0,$00,$40
            .byte $C0,$A9,$08,$4C,$C8,$88,$00,$00,$89,$82,$0C,$A9,$38,$20,$0D,$08
            .byte $20,$19,$88,$A9,$08,$4C,$4C,$08,$00,$00,$88,$A9,$08,$20,$05,$00
            .byte $20,$91,$85,$20,$08,$84,$09,$00,$8D,$44,$00,$88,$00,$4C,$41,$00
            .byte $20,$00,$A8,$80,$C1,$80,$C0,$00,$06,$A2,$C9,$2F,$F2,$23,$22,$A6
            .byte $8A,$6E,$22,$BB,$26,$73,$8A,$B7,$C3,$E7,$C6,$E7,$C6,$E7,$76,$E7
            .byte $F6,$CE,$CB,$F6,$F6,$F7,$D7,$67,$FE,$FF,$97,$DF,$F2,$DE,$B2,$9F
            .byte $B7,$BE,$BE,$FF,$BF,$BE,$97,$DE,$F6,$FF,$F6,$B3,$DA,$DB,$FA,$FF
            .byte $FE,$FF,$D6,$FF,$D6,$FF,$FF,$FF,$F9,$00,$C9,$28,$00,$18,$41,$00
            .byte $E0,$F1,$20,$89,$81,$B0,$08,$00,$88,$88,$A4,$C1,$84,$C0,$85,$00
            .byte $A9,$30,$95,$31,$E8,$95,$33,$08,$40,$D0,$86,$25,$A0,$00,$04,$00
            .byte $80,$00,$86,$20,$A1,$29,$20,$40,$80,$06,$2B,$86,$28,$8A,$2D,$40
            .byte $89,$00,$69,$80,$B9,$88,$89,$00,$6F,$A5,$A2,$26,$E0,$23,$D2,$B7
            .byte $A6,$22,$F0,$BE,$A7,$2B,$CB,$FF,$EB,$F7,$F7,$FF,$E7,$EF,$C7,$EF
            .byte $D6,$F6,$E6,$FF,$D6,$4F,$FF,$EF,$BD,$BD,$FF,$BD,$BD,$BF,$DF,$FF
            .byte $97,$BE,$FF,$9D,$DE,$DE,$D5,$FE,$D6,$FF,$FC,$85,$F0,$FF,$D7,$FF
            .byte $F7,$FF,$F7,$FF,$F7,$FF,$FF,$FF,$F9,$40,$88,$A0,$20,$F0,$00,$00
            .byte $28,$C9,$9D,$D0,$18,$20,$11,$00,$90,$08,$18,$D0,$69,$A0,$24,$10
            .byte $61,$10,$05,$C8,$D0,$60,$24,$00,$00,$50,$C8,$C8,$88,$A4,$20,$40
            .byte $01,$B1,$C0,$00,$20,$4D,$0D,$00,$C0,$44,$A5,$08,$20,$4C,$0D,$00
            .byte $41,$88,$69,$00,$20,$80,$81,$00,$EE,$A0,$22,$B7,$82,$AB,$22,$AF
            .byte $7A,$22,$A7,$F6,$26,$BF,$87,$BF,$7F,$E7,$CF,$FF,$C6,$E7,$C3,$E7
            .byte $DE,$CF,$CE,$FF,$46,$CF,$7E,$43,$BF,$BF,$BF,$FF,$92,$BF,$97,$BF
            .byte $D6,$DE,$9E,$9C,$B6,$FF,$97,$9E,$DF,$FF,$FA,$D5,$FB,$FB,$DE,$FF
            .byte $FE,$FF,$FF,$FF,$D7,$FF,$FF,$FF,$F9,$90,$80,$E8,$80,$20,$24,$08
            .byte $60,$C9,$30,$90,$01,$C9,$41,$40,$38,$40,$45,$21,$D0,$01,$60,$09
            .byte $91,$48,$09,$80,$48,$48,$4A,$08,$4A,$20,$38,$88,$A8,$68,$21,$01
            .byte $48,$30,$88,$05,$01,$08,$68,$00,$ED,$04,$04,$86,$00,$84,$05,$40
            .byte $08,$48,$29,$80,$01,$48,$69,$00,$85,$22,$A9,$A0,$85,$30,$D2,$BF
            .byte $4A,$AA,$48,$BA,$4E,$BB,$BF,$B7,$C7,$FF,$E7,$F7,$E7,$FF,$E2,$F7
            .byte $F7,$FF,$EF,$FF,$66,$DD,$CE,$79,$B5,$BF,$FC,$BD,$96,$FF,$97,$BF
            .byte $DC,$FC,$95,$9C,$FC,$9F,$97,$FE,$D5,$FF,$FD,$91,$DD,$D9,$D3,$FF
            .byte $FF,$FF,$FF,$FF,$FE,$FF,$FF,$FF,$F9,$98,$84,$08,$58,$20,$01,$00
            .byte $19,$A5,$14,$85,$C1,$A5,$11,$00,$C0,$80,$00,$20,$20,$89,$05,$18
            .byte $A9,$00,$20,$49,$8D,$24,$11,$00,$01,$80,$11,$4C,$C9,$84,$01,$00
            .byte $20,$10,$50,$18,$A1,$00,$45,$00,$C0,$48,$A5,$00,$C5,$04,$40,$40
            .byte $A1,$08,$E8,$48,$A1,$08,$C0,$40,$AD,$A0,$85,$36,$32,$37,$46,$B7
            .byte $B2,$23,$4E,$BE,$86,$A7,$0A,$BF,$EF,$FF,$CF,$EF,$EF,$FB,$CE,$EB
            .byte $5E,$D2,$C7,$F6,$66,$CB,$E7,$43,$B6,$9F,$B5,$FF,$96,$FF,$B2,$BF
            .byte $9F,$BF,$B6,$9F,$B7,$BE,$DE,$9E,$F6,$FF,$FF,$F3,$FB,$DB,$D3,$FF
            .byte $F7,$FF,$DE,$FF,$DF,$FF,$FF,$FF,$F9,$00,$85,$10,$D0,$41,$44,$08
            .byte $C0,$2D,$AD,$00,$D8,$C9,$78,$50,$3C,$80,$51,$4C,$8D,$80,$A9,$00
            .byte $F0,$00,$A9,$40,$D0,$00,$A9,$00,$01,$10,$85,$31,$A0,$14,$84,$20
            .byte $A0,$11,$84,$28,$20,$04,$80,$40,$0D,$40,$07,$C8,$20,$C0,$01,$40
            .byte $20,$82,$28,$40,$88,$00,$C9,$80,$20,$26,$80,$E9,$0D,$F0,$83,$EF
            .byte $32,$A7,$20,$B2,$8F,$A7,$9E,$FF,$FF,$F5,$F7,$E7,$F7,$E7,$C7,$F7
            .byte $DF,$E7,$F7,$F7,$42,$D1,$57,$D5,$F6,$BF,$F5,$BF,$90,$FF,$B7,$BF
            .byte $94,$BC,$DF,$9D,$BD,$9E,$95,$9F,$FD,$FF,$D5,$93,$D8,$DF,$F7,$FF
            .byte $F6,$FF,$F7,$FF,$F7,$FF,$FF,$FF,$F9,$00,$A9,$00,$A8,$20,$08,$08
            .byte $A1,$10,$F0,$00,$78,$A4,$08,$18,$A5,$00,$48,$A5,$01,$48,$21,$00
            .byte $48,$A1,$05,$48,$A4,$04,$20,$00,$01,$10,$05,$11,$08,$85,$30,$00
            .byte $C8,$84,$20,$8D,$88,$28,$70,$00,$68,$40,$4C,$84,$80,$00,$40,$00
            .byte $81,$C0,$A8,$C0,$81,$00,$80,$00,$A6,$20,$22,$22,$8F,$A7,$1A,$BF
            .byte $AB,$22,$87,$B6,$87,$37,$22,$F7,$CA,$E7,$DF,$E7,$F7,$EF,$DE,$EB
            .byte $76,$EA,$CF,$DF,$6F,$C7,$72,$63,$F6,$BB,$B7,$BF,$96,$BF,$BA,$FF
            .byte $9E,$9F,$BE,$9E,$BF,$BE,$96,$9E,$DF,$FF,$FA,$89,$FA,$DF,$D2,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F9,$08,$D0,$08,$20,$08,$00,$00
            .byte $01,$A4,$21,$D0,$18,$20,$20,$08,$20,$D4,$80,$A8,$BD,$B9,$89,$00
            .byte $00,$20,$E8,$80,$4C,$98,$80,$00,$02,$C0,$02,$D0,$39,$F0,$00,$00
            .byte $20,$80,$38,$20,$20,$8D,$A8,$40,$24,$48,$20,$00,$89,$C4,$21,$00
            .byte $21,$88,$28,$00,$89,$80,$09,$80,$AE,$E5,$0B,$E8,$20,$20,$8F,$A7
            .byte $0B,$A7,$AF,$F7,$AF,$B3,$91,$BD,$FA,$EB,$E5,$EF,$E4,$EF,$ED,$ED
            .byte $F6,$E2,$EF,$F7,$72,$61,$4F,$CD,$B4,$BF,$BD,$BD,$90,$FF,$B0,$BF
            .byte $B6,$DE,$9C,$9D,$D7,$9E,$D4,$BE,$F2,$FF,$DD,$A7,$DE,$F9,$F2,$FF
            .byte $FE,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F9,$00,$50,$88,$B0,$F0,$20,$40
            .byte $88,$B0,$01,$20,$60,$88,$01,$40,$84,$C4,$60,$20,$F8,$80,$0C,$00
            .byte $88,$A1,$C0,$20,$20,$88,$25,$00,$48,$40,$48,$48,$48,$20,$30,$00
            .byte $A8,$60,$29,$0D,$20,$38,$08,$40,$88,$00,$09,$80,$68,$4C,$09,$00
            .byte $08,$48,$E8,$90,$00,$48,$00,$40,$3E,$62,$A2,$26,$B7,$E2,$4A,$B7
            .byte $C2,$B7,$C2,$FE,$97,$E3,$CA,$F7,$F7,$E7,$EF,$E7,$C7,$EF,$62,$E7
            .byte $DE,$CB,$62,$F6,$FF,$63,$CA,$CB,$B4,$BF,$B4,$BF,$9A,$BF,$F6,$BF
            .byte $96,$9F,$BE,$BE,$F6,$9E,$96,$9F,$F6,$FF,$DF,$81,$FB,$DB,$D7,$FF
            .byte $F6,$FF,$DE,$FF,$F7,$FF,$FF,$FF,$F9,$88,$C9,$20,$D0,$08,$10,$40
            .byte $20,$99,$88,$08,$08,$08,$08,$00,$2C,$00,$A4,$88,$20,$99,$88,$00
            .byte $28,$38,$60,$C9,$3A,$08,$29,$08,$08,$90,$02,$69,$08,$60,$20,$00
            .byte $80,$C1,$0D,$C0,$E8,$4C,$9C,$00,$A5,$00,$C9,$CE,$C0,$06,$08,$00
            .byte $C8,$CA,$A9,$C0,$28,$40,$A0,$C0,$A0,$A0,$CA,$F0,$FD,$A8,$D2,$FF
            .byte $62,$A7,$03,$B6,$06,$63,$87,$B7,$E6,$E5,$E7,$FF,$EF,$E7,$E6,$EF
            .byte $F6,$E7,$EE,$F7,$47,$CD,$C6,$61,$F4,$FD,$F4,$BD,$F4,$BF,$96,$BF
            .byte $B6,$9E,$B4,$FF,$9C,$DF,$9D,$FE,$D7,$FF,$DF,$81,$F8,$DF,$DB,$FF
            .byte $F6,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F9,$C0,$A9,$01,$E0,$09,$00,$40
            .byte $C1,$D0,$04,$E4,$C0,$D0,$00,$40,$29,$40,$18,$48,$20,$20,$09,$08
            .byte $A0,$28,$20,$29,$88,$A9,$20,$08,$09,$00,$4C,$09,$80,$A5,$40,$40
            .byte $00,$90,$21,$20,$00,$80,$49,$40,$C0,$08,$A5,$08,$C9,$CC,$00,$00
            .byte $A0,$00,$A8,$10,$80,$C0,$80,$C0,$A6,$22,$22,$6F,$8D,$AB,$FF,$A7
            .byte $1A,$6E,$9E,$B6,$A6,$23,$BF,$BF,$CE,$E3,$CF,$E7,$EF,$E7,$56,$F7
            .byte $F7,$E2,$E2,$DF,$E6,$6F,$EB,$7B,$B6,$BF,$9E,$BD,$92,$BF,$B2,$BF
            .byte $B7,$9F,$B6,$BE,$9C,$BE,$FE,$9E,$F6,$FF,$DA,$C7,$DF,$DF,$DE,$DF
            .byte $FF,$FF,$D7,$FF,$D6,$FF,$FF,$FF,$F9,$00,$F8,$88,$81,$20,$20,$00
            .byte $88,$20,$E1,$88,$D0,$F8,$C0,$08,$F0,$C0,$78,$20,$DC,$88,$A4,$08
            .byte $98,$20,$9D,$88,$6C,$00,$A0,$08,$03,$80,$A0,$01,$80,$B8,$84,$00
            .byte $88,$80,$B7,$80,$80,$84,$91,$00,$00,$04,$AC,$88,$21,$84,$A9,$00
            .byte $00,$80,$E9,$00,$F0,$C8,$C9,$00,$F0,$3A,$C9,$22,$D0,$F9,$A2,$A7
            .byte $82,$EB,$22,$F2,$A6,$EB,$8F,$F7,$CB,$F5,$FF,$E7,$F7,$EF,$E2,$F7
            .byte $F6,$E7,$F7,$FE,$E7,$5F,$CB,$4D,$F4,$FF,$BD,$BD,$B0,$FF,$FF,$BF
            .byte $BE,$9E,$B5,$9C,$BD,$9E,$D4,$FE,$DC,$FF,$D8,$A1,$DE,$DB,$DB,$FF
            .byte $FF,$FF,$FF,$FF,$F7,$FF,$FF,$FF,$F9,$08,$0D,$F0,$D1,$C9,$00,$40
            .byte $F8,$85,$B8,$20,$00,$80,$49,$08,$F0,$C8,$49,$2C,$D0,$E0,$20,$18
            .byte $81,$20,$04,$80,$C9,$2C,$D0,$00,$00,$60,$88,$85,$A8,$84,$25,$00
            .byte $00,$80,$C9,$20,$F0,$F9,$49,$00,$C0,$4C,$A5,$0C,$C9,$40,$40,$40
            .byte $20,$00,$A9,$88,$00,$80,$A9,$80,$AE,$A6,$AF,$AB,$C3,$22,$DA,$FF
            .byte $4E,$BE,$82,$B7,$37,$F3,$06,$B7,$C6,$F3,$C6,$EF,$EF,$EF,$EA,$EB
            .byte $56,$EF,$77,$56,$CF,$53,$F2,$43,$FE,$FF,$BE,$BF,$D6,$FF,$9A,$FF
            .byte $FE,$BF,$D7,$9F,$D7,$BF,$D6,$9F,$D6,$FF,$DB,$85,$FF,$FB,$D3,$FF
            .byte $F7,$FF,$DF,$FF,$F7,$FF,$FF,$FF,$F9,$10,$C9,$21,$F0,$11,$44,$08
            .byte $E0,$C9,$38,$A5,$C1,$E9,$28,$00,$C1,$90,$E0,$C4,$C4,$D0,$DC,$00
            .byte $18,$20,$11,$88,$B0,$B5,$A5,$08,$49,$30,$F0,$15,$C9,$25,$D0,$00
            .byte $18,$A1,$08,$65,$C1,$85,$C1,$00,$00,$46,$C2,$00,$A8,$82,$4C,$40
            .byte $88,$08,$A9,$C0,$69,$08,$81,$C0,$90,$22,$E6,$E2,$20,$20,$8B,$A7
            .byte $2E,$A9,$3A,$B0,$AF,$A9,$A0,$BF,$CA,$FD,$EF,$E7,$CF,$EF,$CE,$EF
            .byte $DE,$EE,$FF,$DF,$64,$F5,$C2,$F9,$B4,$BD,$B7,$BD,$BC,$BF,$DF,$BF
            .byte $BD,$9C,$95,$DE,$95,$BF,$95,$BF,$F4,$FF,$DD,$B1,$F8,$D9,$DE,$FF
            .byte $FE,$FF,$DF,$FF,$DF,$FF,$FF,$FF,$F9,$D0,$F0,$01,$48,$51,$08,$00
            .byte $D1,$85,$C1,$A5,$D0,$85,$40,$08,$19,$84,$2D,$A0,$01,$20,$15,$08
            .byte $C9,$38,$F0,$19,$C9,$2C,$70,$00,$49,$20,$F0,$11,$C0,$2D,$70,$00
            .byte $15,$15,$15,$A7,$15,$15,$15,$15,$A2,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$A3
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$19,$1A,$1A,$1A,$1B,$15
            .byte $A4,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$A5,$83,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$1C,$04,$04,$1D,$1E,$15,$A4,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$A5
            .byte $80,$15,$05,$06,$07,$15,$15,$15,$15,$15,$1C,$1F,$20,$1D,$1E,$15
            .byte $A4,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$A5,$8C,$15,$08,$09,$0A,$15,$15,$15
            .byte $15,$15,$04,$21,$21,$22,$04,$15,$A4,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$A5
            .byte $80,$15,$0B,$0C,$0D,$15,$15,$15,$15,$15,$24,$23,$23,$23,$25,$15
            .byte $A4,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$A5,$86,$15,$0E,$0F,$10,$15,$15,$15
            .byte $15,$15,$26,$6D,$64,$64,$27,$15,$A4,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$A5
            .byte $84,$15,$11,$12,$13,$15,$15,$15,$15,$15,$28,$29,$29,$29,$2A,$15
            .byte $A4,$15,$15,$14,$15,$15,$15,$15,$15,$14,$15,$15,$18,$15,$15,$14
            .byte $15,$15,$15,$15,$15,$15,$15,$A5,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$A4,$A6,$A6,$A6,$A6,$A6,$A6,$A6
            .byte $A6,$A6,$A6,$A6,$A6,$A6,$A6,$A6,$A6,$A6,$A6,$A6,$A6,$A6,$A6,$A5
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$2B
            .byte $2D,$2F,$31,$33,$35,$37,$15,$15,$15,$15,$15,$15,$15,$15,$4E,$3F
            .byte $3F,$3F,$40,$41,$41,$41,$41,$43,$4C,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$4F,$2C,$2E,$30,$32,$34,$36,$38,$39,$3A
            .byte $3B,$3C,$3D,$3D,$3E,$3E,$3D,$3F,$15,$15,$15,$15,$15,$42,$42,$42
            .byte $4D,$50,$15,$15,$15,$15,$15,$15,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
            .byte $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
            .byte $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$00,$C0,$00,$02,$00,$00,$20,$C0
            .byte $08,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B
            .byte $0B,$0B,$0B,$0B,$0B,$0B,$0B,$08,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$20,$00,$00,$00,$00,$00,$00,$08,$0B,$0B,$0B,$0B,$0B,$0B,$0B
            .byte $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$08
            .byte $00,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $08,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B
            .byte $0B,$0B,$0B,$0B,$0B,$0B,$0B,$08,$00,$00,$06,$06,$06,$02,$00,$00
            .byte $20,$00,$00,$00,$20,$00,$00,$00,$08,$08,$08,$08,$08,$08,$08,$08
            .byte $08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
            .byte $00,$00,$06,$06,$06,$02,$00,$00,$00,$00,$00,$20,$00,$00,$00,$00
            .byte $08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
            .byte $08,$08,$08,$08,$08,$08,$08,$08,$00,$00,$06,$06,$06,$02,$00,$20
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$08,$08,$08,$08
            .byte $08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
            .byte $00,$00,$06,$06,$06,$02,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00
            .byte $08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
            .byte $08,$08,$08,$08,$08,$08,$08,$08,$B0,$00,$06,$06,$06,$02,$00,$00
            .byte $00,$00,$00,$00,$D0,$00,$90,$00,$08,$08,$08,$08,$08,$08,$08,$08
            .byte $08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$D8
            .byte $00,$00,$D0,$00,$A0,$00,$D0,$00,$A0,$00,$D0,$00,$90,$00,$D0,$00
            .byte $08,$D8,$08,$D8,$08,$D8,$08,$98,$08,$D8,$08,$A8,$08,$D8,$08,$08
            .byte $A8,$08,$08,$98,$08,$48,$08,$D8,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$08,$08,$0F,$0F
            .byte $0D,$0D,$0E,$0E,$0A,$0A,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08
            .byte $08,$08,$09,$09,$0F,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
            .byte $08,$08,$08,$08,$08,$08,$08,$08,$08,$00,$00,$00,$00,$00,$00,$00
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E
            .byte $0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$FF
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$1B,$1B,$1B,$1B
            .byte $1B,$1B,$04,$04,$04,$02,$02,$02,$04,$04,$04,$02,$02,$02,$04,$04
            .byte $04,$04,$04,$04,$1B,$1B,$1B,$04,$04,$04,$03,$03,$03,$02,$02,$02
            .byte $04,$04,$04,$04,$04,$04,$04,$04,$04,$02,$02,$02,$01,$01,$01,$03
            .byte $03,$03,$04,$04,$04,$03,$03,$03,$04,$04,$04,$1B,$1B,$1B,$02,$02
            .byte $02,$01,$01,$01,$1B,$1B,$1B,$01,$01,$01,$03,$03,$03,$02,$02,$02
            .byte $03,$03,$03,$04,$04,$04,$1B,$1B,$1B,$04,$04,$04,$04,$04,$04,$02
            .byte $02,$02,$1B,$1B,$1B,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$04,$04,$04,$1B,$1B,$1B,$1B,$1B,$1B
            .byte $04,$04,$04,$02,$02,$02,$04,$04,$04,$02,$02,$02,$04,$04,$04,$04
            .byte $04,$04,$1B,$1B,$1B,$04,$04,$04,$03,$03,$03,$02,$02,$02,$04,$04
            .byte $04,$04,$04,$04,$04,$04,$04,$02,$02,$02,$01,$01,$01,$03,$03,$03
            .byte $04,$04,$04,$03,$03,$03,$04,$04,$04,$1B,$1B,$1B,$02,$02,$02,$01
            .byte $01,$01,$1B,$1B,$1B,$01,$01,$01,$03,$03,$03,$02,$02,$02,$03,$03
            .byte $03,$04,$04,$04,$1B,$1B,$1B,$04,$04,$04,$04,$04,$04,$02,$02,$02
            .byte $1B,$1B,$1B,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$04,$04,$04,$1B,$1B,$1B,$1B,$1B,$1B,$04,$04
            .byte $04,$02,$02,$02,$04,$04,$04,$02,$02,$02,$04,$04,$04,$04,$04,$04
            .byte $1B,$1B,$1B,$04,$04,$04,$03,$03,$03,$02,$02,$02,$04,$04,$04,$04
            .byte $04,$04,$04,$04,$04,$02,$02,$02,$01,$01,$01,$03,$03,$03,$04,$04
            .byte $04,$03,$03,$03,$04,$04,$04,$1B,$1B,$1B,$02,$02,$02,$01,$01,$01
            .byte $1B,$1B,$1B,$01,$01,$01,$03,$03,$03,$02,$02,$02,$03,$03,$03,$04
            .byte $04,$04,$1B,$1B,$1B,$04,$04,$04,$04,$04,$04,$02,$02,$02,$1B,$1B
            .byte $1B,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$04,$04,$04,$01,$01,$01,$00,$00,$00,$00,$00,$00,$03
            .byte $03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$02,$02,$02,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00
            .byte $00,$1B,$1B,$1B,$01,$01,$01,$00,$1A,$00,$00,$14,$00,$03,$03,$03
            .byte $00,$12,$00,$00,$1C,$00,$00,$1C,$00,$00,$12,$00,$00,$1C,$00,$00
            .byte $1C,$00,$00,$14,$00,$03,$03,$03,$00,$14,$00,$00,$16,$00,$00,$16
            .byte $00,$00,$16,$00,$00,$16,$00,$04,$04,$04,$00,$14,$00,$00,$16,$00
            .byte $00,$16,$00,$00,$1A,$00,$02,$02,$02,$00,$14,$00,$00,$16,$00,$00
            .byte $16,$00,$00,$16,$00,$00,$16,$00,$00,$16,$00,$00,$16,$00,$00,$16
            .byte $00,$00,$16,$00,$00,$16,$00,$02,$02,$02,$02,$02,$02,$00,$14,$00
            .byte $00,$16,$00,$00,$16,$00,$02,$02,$02,$00,$14,$00,$00,$1A,$00,$1B
            .byte $1B,$1B,$01,$01,$01,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$1B,$1B,$1B
            .byte $04,$04,$04,$1B,$1B,$1B,$00,$00,$00,$04,$04,$04,$00,$00,$00,$01
            .byte $01,$01,$04,$04,$04,$00,$00,$00,$04,$04,$04,$03,$03,$03,$00,$00
            .byte $00,$02,$02,$02,$00,$00,$00,$1B,$1B,$1B,$01,$01,$01,$04,$04,$04
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$03,$03,$03,$04
            .byte $04,$04,$02,$02,$02,$00,$00,$00,$04,$04,$04,$04,$04,$04,$00,$00
            .byte $00,$04,$04,$04,$00,$00,$00,$02,$02,$02,$00,$00,$00,$01,$01,$01
            .byte $00,$00,$00,$00,$00,$00,$1B,$1B,$1B,$00,$00,$00,$02,$02,$02,$00
            .byte $00,$00,$03,$03,$03,$00,$00,$00,$03,$03,$03,$03,$03,$03,$04,$04
            .byte $04,$1B,$1B,$1B,$00,$14,$00,$04,$04,$04,$00,$1F,$00,$01,$01,$01
            .byte $04,$04,$04,$00,$14,$00,$04,$04,$04,$03,$03,$03,$00,$14,$00,$02
            .byte $02,$02,$00,$14,$00,$1B,$1B,$1B,$01,$01,$01,$04,$04,$04,$00,$18
            .byte $00,$00,$16,$00,$00,$16,$00,$04,$04,$04,$03,$03,$03,$04,$04,$04
            .byte $02,$02,$02,$00,$14,$00,$04,$04,$04,$04,$04,$04,$00,$18,$00,$04
            .byte $04,$04,$00,$1D,$00,$02,$02,$02,$00,$1D,$00,$01,$01,$01,$00,$18
            .byte $00,$00,$16,$00,$1B,$1B,$1B,$00,$14,$00,$02,$02,$02,$00,$18,$00
            .byte $03,$03,$03,$00,$14,$00,$03,$03,$03,$03,$03,$03,$04,$04,$04,$1B
            .byte $1B,$1B,$00,$00,$00,$04,$04,$04,$00,$00,$00,$01,$01,$01,$04,$04
            .byte $04,$00,$00,$00,$04,$04,$04,$03,$03,$03,$00,$00,$00,$02,$02,$02
            .byte $00,$00,$00,$1B,$1B,$1B,$01,$01,$01,$04,$04,$04,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$04,$04,$04,$03,$03,$03,$04,$04,$04,$02,$02
            .byte $02,$00,$00,$00,$04,$04,$04,$04,$04,$04,$00,$00,$00,$04,$04,$04
            .byte $00,$00,$00,$02,$02,$02,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00
            .byte $00,$00,$1B,$1B,$1B,$00,$00,$00,$02,$02,$02,$00,$00,$00,$03,$03
            .byte $03,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03,$03,$02,$02,$02
            .byte $00,$00,$00,$01,$01,$01,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$04,$04,$04,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$02,$02,$02
            .byte $04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$03,$03,$03,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$04,$04,$04,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$04,$04,$04,$00
            .byte $00,$00,$00,$00,$00,$01,$01,$01,$03,$03,$03,$02,$02,$02,$00,$14
            .byte $00,$01,$01,$01,$00,$1F,$00,$02,$02,$02,$00,$12,$00,$00,$12,$00
            .byte $00,$14,$00,$03,$03,$03,$00,$14,$00,$04,$04,$04,$00,$12,$00,$00
            .byte $14,$00,$00,$1E,$00,$00,$16,$00,$01,$01,$01,$02,$02,$02,$04,$04
            .byte $04,$00,$14,$00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$00,$16,$00
            .byte $00,$14,$00,$02,$02,$02,$00,$1F,$00,$03,$03,$03,$00,$14,$00,$00
            .byte $1E,$00,$00,$16,$00,$02,$02,$02,$04,$04,$04,$00,$18,$00,$00,$16
            .byte $00,$00,$16,$00,$01,$01,$01,$00,$18,$00,$04,$04,$04,$00,$12,$00
            .byte $00,$14,$00,$01,$01,$01,$03,$03,$03,$02,$02,$02,$00,$00,$00,$01
            .byte $01,$01,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$03,$03,$03,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$01,$01,$01,$02,$02,$02,$04,$04,$04,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$02,$02,$02,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$02,$02,$02,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$01,$01,$01,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00
            .byte $00,$01,$01,$01,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$04,$04
            .byte $04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $03,$03,$03,$03,$03,$03,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$04,$04
            .byte $04,$02,$02,$02,$00,$00,$00,$04,$04,$04,$01,$01,$01,$02,$02,$02
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$03
            .byte $03,$03,$03,$03,$03,$00,$12,$00,$00,$12,$00,$00,$12,$00,$00,$12
            .byte $00,$00,$12,$00,$00,$18,$00,$02,$02,$02,$00,$12,$00,$00,$12,$00
            .byte $00,$12,$00,$00,$14,$00,$03,$03,$03,$00,$14,$00,$04,$04,$04,$00
            .byte $18,$00,$00,$16,$00,$00,$16,$00,$00,$1E,$00,$00,$14,$00,$03,$03
            .byte $03,$03,$03,$03,$00,$18,$00,$03,$03,$03,$00,$14,$00,$00,$1C,$00
            .byte $00,$12,$00,$00,$1C,$00,$00,$14,$00,$02,$02,$02,$04,$04,$04,$02
            .byte $02,$02,$00,$14,$00,$04,$04,$04,$01,$01,$01,$02,$02,$02,$00,$12
            .byte $00,$00,$18,$00,$00,$16,$00,$02,$02,$02,$00,$14,$00,$03,$03,$03
            .byte $03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$04,$04,$04,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03
            .byte $03,$03,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$04,$04,$04,$02,$02,$02
            .byte $00,$00,$00,$04,$04,$04,$01,$01,$01,$02,$02,$02,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$03,$03,$03,$02,$02
            .byte $02,$00,$00,$00,$03,$03,$03,$00,$00,$00,$03,$03,$03,$00,$00,$00
            .byte $04,$04,$04,$01,$01,$01,$02,$02,$02,$00,$00,$00,$01,$01,$01,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1B,$1B,$1B,$00,$00
            .byte $00,$01,$01,$01,$01,$01,$01,$00,$00,$00,$03,$03,$03,$02,$02,$02
            .byte $00,$00,$00,$01,$01,$01,$00,$00,$00,$01,$01,$01,$00,$00,$00,$04
            .byte $04,$04,$00,$00,$00,$02,$02,$02,$04,$04,$04,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$04,$04,$04
            .byte $00,$00,$00,$03,$03,$03,$00,$00,$00,$03,$03,$03,$02,$02,$02,$00
            .byte $1F,$00,$03,$03,$03,$00,$1F,$00,$03,$03,$03,$00,$1F,$00,$04,$04
            .byte $04,$01,$01,$01,$02,$02,$02,$00,$1F,$00,$01,$01,$01,$00,$12,$00
            .byte $00,$14,$00,$00,$16,$00,$00,$16,$00,$1B,$1B,$1B,$00,$1D,$00,$01
            .byte $01,$01,$01,$01,$01,$00,$1D,$00,$03,$03,$03,$02,$02,$02,$00,$18
            .byte $00,$01,$01,$01,$00,$1D,$00,$01,$01,$01,$00,$1F,$00,$04,$04,$04
            .byte $00,$1D,$00,$02,$02,$02,$04,$04,$04,$00,$12,$00,$00,$12,$00,$00
            .byte $1C,$00,$00,$14,$00,$01,$01,$01,$00,$18,$00,$04,$04,$04,$00,$18
            .byte $00,$03,$03,$03,$00,$14,$00,$03,$03,$03,$02,$02,$02,$00,$00,$00
            .byte $03,$03,$03,$00,$00,$00,$03,$03,$03,$00,$00,$00,$04,$04,$04,$01
            .byte $01,$01,$02,$02,$02,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$1B,$1B,$1B,$00,$00,$00,$01,$01,$01
            .byte $01,$01,$01,$00,$00,$00,$03,$03,$03,$02,$02,$02,$00,$00,$00,$01
            .byte $01,$01,$00,$00,$00,$01,$01,$01,$00,$00,$00,$04,$04,$04,$00,$00
            .byte $00,$02,$02,$02,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$01,$01,$01,$00,$00,$00,$04,$04,$04,$00,$00,$00,$03
            .byte $03,$03,$00,$00,$00,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$02,$02,$02,$03,$03,$03,$00,$00,$00,$02
            .byte $02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$04,$04,$04,$00,$00
            .byte $00,$04,$04,$04,$04,$04,$04,$01,$01,$01,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$02,$02,$02,$03,$03,$03,$00,$18,$00,$00,$1E,$00,$00
            .byte $16,$00,$00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$00,$1E
            .byte $00,$00,$16,$00,$02,$02,$02,$03,$03,$03,$00,$14,$00,$02,$02,$02
            .byte $00,$18,$00,$00,$1E,$00,$00,$14,$00,$02,$02,$02,$00,$12,$00,$00
            .byte $12,$00,$00,$1C,$00,$00,$12,$00,$00,$12,$00,$00,$1C,$00,$00,$12
            .byte $00,$00,$1C,$00,$00,$18,$00,$04,$04,$04,$00,$12,$00,$00,$1C,$00
            .byte $00,$12,$00,$00,$18,$00,$01,$01,$01,$04,$04,$04,$00,$1D,$00,$04
            .byte $04,$04,$04,$04,$04,$01,$01,$01,$00,$18,$00,$03,$03,$03,$00,$14
            .byte $00,$02,$02,$02,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$02,$02,$02,$03,$03,$03,$00,$00,$00,$02,$02,$02,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$01,$01,$01,$04,$04,$04,$00,$00,$00,$04,$04,$04
            .byte $04,$04,$04,$01,$01,$01,$00,$00,$00,$03,$03,$03,$00,$00,$00,$02
            .byte $02,$02,$03,$03,$03,$04,$04,$04,$04,$04,$04,$1B,$1B,$1B,$01,$01
            .byte $01,$00,$00,$00,$02,$02,$02,$00,$00,$00,$04,$04,$04,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$04
            .byte $04,$04,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$05,$0A,$0A
            .byte $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$07,$01,$01
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$01,$01,$01,$02
            .byte $02,$02,$02,$02,$02,$1B,$1B,$1B,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02
            .byte $03,$03,$03,$04,$04,$04,$04,$04,$04,$1B,$1B,$1B,$01,$01,$01,$00
            .byte $18,$00,$02,$02,$02,$00,$14,$00,$04,$04,$04,$00,$18,$00,$00,$1E
            .byte $00,$00,$16,$00,$00,$16,$00,$4D,$4F,$4E,$2A,$01,$01,$04,$04,$04
            .byte $00,$14,$00,$00,$16,$00,$01,$01,$01,$01,$05,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$07,$01,$00,$18
            .byte $00,$00,$1E,$00,$00,$16,$00,$04,$04,$04,$01,$01,$01,$02,$02,$02
            .byte $02,$02,$02,$1B,$1B,$1B,$00,$12,$00,$00,$1C,$00,$00,$14,$00,$03
            .byte $03,$03,$00,$18,$00,$00,$16,$00,$00,$16,$00,$02,$02,$02,$03,$03
            .byte $03,$04,$04,$04,$04,$04,$04,$1B,$1B,$1B,$01,$01,$01,$00,$00,$00
            .byte $02,$02,$02,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$04,$04,$04,$00,$00
            .byte $00,$00,$00,$00,$01,$01,$01,$05,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$07,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$04,$04,$04,$01,$01,$01,$02,$02,$02,$02,$02
            .byte $02,$1B,$1B,$1B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$04,$04,$04,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$1B,$1B
            .byte $1B,$00,$00,$00,$01,$01,$01,$00,$00,$00,$03,$03,$03,$00,$00,$00
            .byte $04,$04,$04,$00,$00,$00,$01,$01,$01,$02,$02,$02,$00,$00,$00,$02
            .byte $02,$02,$01,$01,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0A,$0A,$0A,$0A,$0A,$20
            .byte $00,$00,$00,$21,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
            .byte $0A,$0A,$0A,$0A,$0A,$0A,$0A,$20,$00,$00,$00,$21,$0A,$0A,$0A,$0A
            .byte $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$04,$04,$04,$00,$14,$00
            .byte $00,$1E,$00,$00,$16,$00,$03,$03,$03,$00,$1F,$00,$1B,$1B,$1B,$00
            .byte $1D,$00,$01,$01,$01,$00,$1F,$00,$03,$03,$03,$00,$1F,$00,$04,$04
            .byte $04,$00,$18,$00,$01,$01,$01,$02,$02,$02,$00,$1D,$00,$02,$02,$02
            .byte $01,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0C,$00,$1F
            .byte $00,$0D,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$0C,$00,$1D,$00,$0D,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$04,$04,$04,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$1B,$1B,$1B,$00,$00,$00
            .byte $01,$01,$01,$00,$00,$00,$03,$03,$03,$00,$00,$00,$04,$04,$04,$00
            .byte $00,$00,$01,$01,$01,$02,$02,$02,$00,$00,$00,$02,$02,$02,$05,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0C,$00,$00,$00,$0D
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$0C,$00,$00,$00,$0D,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$02,$02,$02,$00,$00,$00,$04,$04,$04,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$05,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$0C,$00,$00,$00,$0D,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$0C,$00,$00,$00,$0D,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$02,$02,$02,$00,$1D,$00,$04,$04,$04,$00,$18,$00
            .byte $00,$12,$00,$00,$18,$00,$01,$01,$01,$00,$12,$00,$00,$12,$00,$00
            .byte $18,$00,$01,$01,$01,$00,$18,$00,$00,$1E,$00,$00,$16,$00,$00,$1E
            .byte $00,$00,$16,$00,$00,$16,$00,$01,$05,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$0C,$00,$18,$00,$0D,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0C
            .byte $00,$14,$00,$0D,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$02,$02,$02,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$0C,$00,$00,$00,$0D,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0C,$00,$00
            .byte $00,$0D,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $03,$03,$03,$00,$00,$00,$1B,$1B,$1B,$02,$02,$02,$00,$00,$00,$01
            .byte $01,$01,$02,$02,$02,$03,$03,$03,$00,$00,$00,$02,$02,$02,$1B,$1B
            .byte $1B,$00,$00,$00,$04,$04,$04,$02,$02,$02,$04,$04,$04,$04,$04,$04
            .byte $01,$01,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$0C,$00,$00,$00,$0D,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0C,$00,$00,$00,$0D
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$03,$03
            .byte $03,$00,$14,$00,$1B,$1B,$1B,$02,$02,$02,$00,$1F,$00,$01,$01,$01
            .byte $02,$02,$02,$03,$03,$03,$00,$1F,$00,$02,$02,$02,$1B,$1B,$1B,$00
            .byte $1F,$00,$04,$04,$04,$02,$02,$02,$04,$04,$04,$04,$04,$04,$01,$05
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$0C,$00,$1F,$00,$0D,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$0C,$00,$1D,$00,$0D,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$03,$03,$03,$00
            .byte $00,$00,$1B,$1B,$1B,$02,$02,$02,$00,$00,$00,$01,$01,$01,$02,$02
            .byte $02,$03,$03,$03,$00,$00,$00,$02,$02,$02,$1B,$1B,$1B,$00,$00,$00
            .byte $04,$04,$04,$02,$02,$02,$04,$04,$04,$04,$04,$04,$05,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$22
            .byte $00,$00,$00,$23,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B
            .byte $0B,$0B,$0B,$0B,$0B,$0B,$0B,$22,$00,$00,$00,$23,$0B,$0B,$0B,$0B
            .byte $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$03,$03,$03,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$03,$03,$03,$1B
            .byte $1B,$1B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$06,$04,$04,$04,$1B,$1B,$1B,$02,$02,$02,$03
            .byte $03,$03,$04,$04,$04,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00
            .byte $00,$03,$03,$03,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$00,$12,$00,$00,$1C
            .byte $00,$00,$12,$00,$00,$18,$00,$02,$02,$02,$03,$03,$03,$1B,$1B,$1B
            .byte $00,$12,$00,$00,$1C,$00,$00,$12,$00,$00,$12,$00,$00,$1C,$00,$00
            .byte $12,$00,$00,$1C,$00,$00,$14,$00,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$06,$01,$04,$04,$04,$1B,$1B,$1B,$02,$02,$02,$03,$03,$03
            .byte $04,$04,$04,$00,$14,$00,$02,$02,$02,$00,$12,$00,$00,$18,$00,$03
            .byte $03,$03,$02,$02,$02,$00,$14,$00,$00,$16,$00,$00,$1E,$00,$00,$16
            .byte $00,$00,$1E,$00,$00,$16,$00,$00,$1C,$00,$00,$12,$00,$00,$1C,$00
            .byte $00,$14,$00,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$02,$02,$02,$03,$03,$03,$1B,$1B,$1B,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$09,$09,$09,$09,$09,$09,$09,$09,$09,$06
            .byte $01,$01,$04,$04,$04,$1B,$1B,$1B,$02,$02,$02,$03,$03,$03,$04,$04
            .byte $04,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$03,$03,$03
            .byte $02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$03,$03,$03,$02,$02,$02,$04,$04,$04,$04,$04,$04,$02,$02,$02
            .byte $00,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$03
            .byte $03,$03,$02,$02,$02,$00,$00,$00,$01,$01,$01,$00,$00,$00,$01,$01
            .byte $0E,$00,$00,$00,$09,$09,$09,$09,$09,$09,$09,$09,$06,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00
            .byte $00,$00,$04,$04,$04,$00,$00,$00,$03,$03,$03,$02,$02,$02,$1B,$1B
            .byte $1B,$00,$00,$00,$03,$03,$03,$02,$02,$02,$02,$02,$02,$02,$02,$02
            .byte $03,$03,$03,$04,$04,$04,$00,$00,$00,$04,$04,$04,$00,$00,$00,$02
            .byte $02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$02,$02,$02,$00,$18
            .byte $00,$00,$16,$00,$01,$01,$01,$00,$12,$00,$00,$18,$00,$03,$03,$03
            .byte $02,$02,$02,$00,$1F,$00,$01,$01,$01,$00,$18,$00,$01,$05,$0C,$00
            .byte $1D,$00,$09,$09,$09,$09,$09,$09,$09,$06,$01,$00,$14,$00,$00,$1E
            .byte $00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$02,$02,$02,$00,$14,$00
            .byte $04,$04,$04,$00,$1F,$00,$03,$03,$03,$02,$02,$02,$1B,$1B,$1B,$00
            .byte $1D,$00,$03,$03,$03,$02,$02,$02,$02,$02,$02,$02,$02,$02,$03,$03
            .byte $03,$04,$04,$04,$00,$1D,$00,$04,$04,$04,$00,$1D,$00,$02,$02,$02
            .byte $02,$02,$02,$04,$04,$04,$04,$04,$04,$02,$02,$02,$00,$00,$00,$00
            .byte $00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$03,$03,$03,$02,$02
            .byte $02,$00,$00,$00,$01,$01,$01,$00,$00,$00,$05,$09,$0C,$00,$00,$00
            .byte $09,$09,$09,$09,$09,$09,$06,$01,$01,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$04,$04
            .byte $04,$00,$00,$00,$03,$03,$03,$02,$02,$02,$1B,$1B,$1B,$00,$00,$00
            .byte $03,$03,$03,$02,$02,$02,$02,$02,$02,$02,$02,$02,$03,$03,$03,$04
            .byte $04,$04,$00,$00,$00,$04,$04,$04,$00,$00,$00,$02,$02,$02,$02,$02
            .byte $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04
            .byte $00,$00,$00,$01,$01,$01,$00,$00,$00,$04,$04,$04,$02,$02,$02,$00
            .byte $00,$00,$00,$00,$00,$01,$01,$05,$09,$09,$0C,$00,$00,$00,$09,$09
            .byte $09,$09,$09,$06,$01,$01,$01,$00,$00,$00,$04,$04,$04,$00,$00,$00
            .byte $04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$02,$02,$02,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$02,$02,$02,$00
            .byte $12,$00,$00,$12,$00,$00,$12,$00,$00,$18,$00,$04,$04,$04,$00,$14
            .byte $00,$01,$01,$01,$00,$1F,$00,$04,$04,$04,$02,$02,$02,$00,$18,$00
            .byte $00,$16,$00,$01,$05,$09,$09,$09,$0C,$00,$14,$00,$09,$09,$09,$09
            .byte $06,$01,$01,$01,$01,$00,$14,$00,$04,$04,$04,$00,$18,$00,$04,$04
            .byte $04,$00,$18,$00,$00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00,$18,$00
            .byte $02,$02,$02,$00,$14,$00,$01,$01,$01,$00,$12,$00,$00,$1C,$00,$00
            .byte $12,$00,$00,$14,$00,$04,$04,$04,$00,$14,$00,$00,$1E,$00,$00,$16
            .byte $00,$00,$1E,$00,$00,$16,$00,$01,$01,$01,$02,$02,$02,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$01
            .byte $01,$01,$00,$00,$00,$04,$04,$04,$02,$02,$02,$00,$00,$00,$00,$00
            .byte $00,$05,$09,$09,$09,$09,$0C,$00,$00,$00,$09,$09,$09,$06,$01,$01
            .byte $01,$01,$01,$00,$00,$00,$04,$04,$04,$00,$00,$00,$04,$04,$04,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02
            .byte $02,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$01,$01,$01,$03,$03,$03,$00,$00,$00,$04,$04
            .byte $04,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$05,$09
            .byte $09,$09,$09,$09,$0C,$00,$00,$00,$09,$09,$06,$00,$00,$00,$03,$03
            .byte $03,$00,$00,$00,$03,$03,$03,$00,$00,$00,$01,$01,$01,$00,$00,$00
            .byte $02,$02,$02,$04,$04,$04,$03,$03,$03,$00,$00,$00,$01,$01,$01,$00
            .byte $00,$00,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00
            .byte $00,$02,$02,$02,$00,$00,$00,$01,$01,$01,$01,$01,$01,$03,$03,$03
            .byte $03,$03,$03,$01,$01,$01,$03,$03,$03,$00,$18,$00,$04,$04,$04,$03
            .byte $03,$03,$03,$03,$03,$00,$12,$00,$00,$12,$00,$00,$1C,$00,$00,$18
            .byte $00,$00,$1C,$00,$00,$12,$00,$00,$18,$00,$01,$05,$09,$09,$09,$09
            .byte $09,$09,$0C,$00,$1D,$00,$09,$06,$01,$00,$14,$00,$03,$03,$03,$00
            .byte $1D,$00,$03,$03,$03,$00,$1F,$00,$01,$01,$01,$00,$1F,$00,$02,$02
            .byte $02,$04,$04,$04,$03,$03,$03,$00,$1F,$00,$01,$01,$01,$00,$14,$00
            .byte $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$1D,$00,$02
            .byte $02,$02,$00,$1D,$00,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$03
            .byte $03,$01,$01,$01,$03,$03,$03,$00,$00,$00,$04,$04,$04,$03,$03,$03
            .byte $03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$05,$09,$09,$09,$09,$09,$09,$09
            .byte $0C,$00,$00,$00,$06,$01,$01,$00,$00,$00,$03,$03,$03,$00,$00,$00
            .byte $03,$03,$03,$00,$00,$00,$01,$01,$01,$00,$00,$00,$02,$02,$02,$04
            .byte $04,$04,$03,$03,$03,$00,$00,$00,$01,$01,$01,$00,$00,$00,$03,$03
            .byte $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$02,$02,$02
            .byte $00,$00,$00,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03,$01
            .byte $01,$01,$04,$04,$04,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00
            .byte $00,$04,$04,$04,$00,$00,$00,$04,$04,$04,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$01,$01,$05,$09,$09,$09,$09,$09,$09,$09,$09,$0C,$00
            .byte $00,$00,$04,$04,$04,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$04,$04,$04,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04
            .byte $04,$04,$04,$00,$18,$00,$00,$16,$00,$04,$04,$04,$00,$14,$00,$04
            .byte $04,$04,$00,$1F,$00,$04,$04,$04,$00,$1F,$00,$03,$03,$03,$00,$18
            .byte $00,$01,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0C,$00,$14,$00
            .byte $04,$04,$04,$00,$14,$00,$04,$04,$04,$00,$12,$00,$00,$1C,$00,$00
            .byte $18,$00,$01,$01,$01,$00,$18,$00,$00,$16,$00,$00,$1E,$00,$00,$16
            .byte $00,$00,$16,$00,$00,$16,$00,$00,$16,$00,$00,$16,$00,$00,$1E,$00
            .byte $00,$16,$00,$02,$02,$02,$00,$14,$00,$04,$04,$04,$00,$12,$00,$00
            .byte $1C,$00,$00,$12,$00,$00,$1C,$00,$00,$14,$00,$04,$04,$04,$04,$04
            .byte $04,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$04,$04,$04
            .byte $00,$00,$00,$04,$04,$04,$00,$00,$00,$03,$03,$03,$00,$00,$00,$05
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0C,$00,$00,$00,$04,$04
            .byte $04,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$02,$02,$02,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$01,$01,$01,$03
            .byte $03,$03,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$05,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$06,$00,$00,$00,$03,$03,$03,$00
            .byte $00,$00,$01,$01,$01,$04,$04,$04,$02,$02,$02,$01,$01,$01,$02,$02
            .byte $02,$03,$03,$03,$00,$00,$00,$01,$01,$01,$00,$00,$00,$02,$02,$02
            .byte $00,$00,$00,$01,$01,$01,$00,$00,$00,$03,$03,$03,$00,$00,$00,$01
            .byte $01,$01,$00,$00,$00,$04,$04,$04,$00,$00,$00,$01,$01,$01,$02,$02
            .byte $02,$03,$03,$03,$00,$00,$00,$04,$04,$04,$01,$01,$01,$03,$03,$03
            .byte $00,$18,$00,$02,$02,$02,$00,$12,$00,$00,$1C,$00,$00,$12,$00,$00
            .byte $1C,$00,$00,$18,$00,$00,$16,$00,$01,$05,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$06,$01,$00,$1D,$00,$03,$03,$03,$00,$14,$00
            .byte $01,$01,$01,$04,$04,$04,$02,$02,$02,$01,$01,$01,$02,$02,$02,$03
            .byte $03,$03,$00,$1D,$00,$01,$01,$01,$00,$1F,$00,$02,$02,$02,$00,$1D
            .byte $00,$01,$01,$01,$00,$1F,$00,$03,$03,$03,$00,$1F,$00,$01,$01,$01
            .byte $00,$1D,$00,$04,$04,$04,$00,$18,$00,$01,$01,$01,$02,$02,$02,$03
            .byte $03,$03,$00,$1D,$00,$04,$04,$04,$01,$01,$01,$03,$03,$03,$00,$00
            .byte $00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$06,$01,$01,$00,$00,$00,$03,$03,$03,$00,$00,$00,$01,$01
            .byte $01,$04,$04,$04,$02,$02,$02,$01,$01,$01,$02,$02,$02,$03,$03,$03
            .byte $00,$00,$00,$01,$01,$01,$00,$00,$00,$02,$02,$02,$00,$00,$00,$01
            .byte $01,$01,$00,$00,$00,$03,$03,$03,$00,$00,$00,$01,$01,$01,$00,$00
            .byte $00,$04,$04,$04,$00,$00,$00,$01,$01,$01,$02,$4A,$02,$03,$03,$03
            .byte $00,$00,$00,$04,$04,$04,$1B,$1B,$1B,$00,$00,$00,$00,$00,$00,$04
            .byte $04,$04,$00,$00,$00,$03,$03,$03,$1B,$1B,$1B,$01,$01,$01,$04,$04
            .byte $04,$01,$01,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$06
            .byte $01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03
            .byte $03,$03,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$03,$03,$03,$1B,$1B,$1B,$00,$12,$00,$00,$18,$00,$04,$04,$04
            .byte $00,$1F,$00,$03,$03,$03,$1B,$1B,$1B,$01,$01,$01,$04,$04,$04,$01
            .byte $05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$06,$01,$01,$01
            .byte $01,$00,$12,$00,$00,$12,$00,$00,$14,$00,$00,$1E,$00,$00,$16,$00
            .byte $00,$1E,$00,$00,$16,$00,$00,$16,$00,$01,$01,$01,$00,$14,$00,$00
            .byte $1C,$00,$00,$18,$00,$02,$02,$02,$00,$14,$00,$03,$03,$03,$00,$18
            .byte $00,$02,$02,$02,$00,$14,$00,$00,$1E,$00,$00,$16,$00,$03,$03,$03
            .byte $02,$02,$02,$02,$02,$02,$00,$14,$00,$00,$1E,$00,$00,$16,$00,$03
            .byte $03,$03,$1B,$1B,$1B,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00
            .byte $00,$03,$03,$03,$1B,$1B,$1B,$01,$01,$01,$04,$04,$04,$05,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$06,$01,$01,$01,$01,$01,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$02,$02,$02,$00,$00,$00,$03,$03,$03,$00,$00,$00,$02
            .byte $02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$02,$02
            .byte $02,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03
            .byte $01,$01,$01,$00,$00,$00,$02,$02,$02,$04,$04,$04,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$05,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$06,$02,$02,$02,$03,$03,$03,$01,$01,$01
            .byte $04,$04,$04,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01
            .byte $00,$00,$00,$1B,$1B,$1B,$04,$04,$04,$03,$03,$03,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$00,$18,$00,$02,$02,$02,$04,$04,$04,$00,$18,$00,$00,$16,$00
            .byte $00,$1E,$00,$00,$16,$00,$01,$05,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$06,$01,$02,$02,$02,$03,$03,$03,$01,$01,$01,$04,$04
            .byte $04,$00,$1D,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $00,$18,$00,$00,$16,$00,$00,$16,$00,$01,$01,$01,$00,$18,$00,$00
            .byte $1C,$00,$00,$12,$00,$00,$1C,$00,$00,$18,$00,$01,$01,$01,$00,$14
            .byte $00,$1B,$1B,$1B,$04,$04,$04,$03,$03,$03,$00,$14,$00,$00,$1E,$00
            .byte $00,$14,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00
            .byte $00,$00,$02,$02,$02,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$05,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B
            .byte $06,$01,$01,$02,$02,$02,$03,$03,$03,$01,$01,$01,$04,$04,$04,$00
            .byte $00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$1B
            .byte $1B,$1B,$04,$04,$04,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$00,$00,$00
            .byte $04,$04,$04,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00
            .byte $01,$01,$01,$24,$27,$2A,$2D,$30,$33,$01,$01,$01,$00,$00,$00,$02
            .byte $02,$02,$01,$01,$01,$02,$02,$02,$00,$00,$00,$1B,$1B,$1B,$02,$02
            .byte $02,$03,$03,$03,$00,$00,$00,$01,$01,$01,$00,$00,$00,$01,$01,$01
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$01
            .byte $01,$01,$00,$00,$00,$01,$01,$01,$02,$02,$02,$00,$1A,$00,$04,$04
            .byte $04,$00,$12,$00,$00,$18,$00,$01,$01,$01,$01,$01,$01,$00,$18,$00
            .byte $00,$16,$00,$00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$04
            .byte $04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$14,$00,$01,$01
            .byte $01,$25,$28,$2B,$2E,$31,$34,$01,$01,$01,$00,$1F,$00,$02,$02,$02
            .byte $01,$01,$01,$02,$02,$02,$00,$1F,$00,$1B,$1B,$1B,$02,$02,$02,$03
            .byte $03,$03,$00,$1F,$00,$01,$01,$01,$00,$1D,$00,$01,$01,$01,$00,$14
            .byte $00,$00,$1E,$00,$00,$14,$00,$04,$04,$04,$00,$14,$00,$01,$01,$01
            .byte $00,$1A,$00,$01,$01,$01,$02,$02,$02,$00,$00,$00,$04,$04,$04,$00
            .byte $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04
            .byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$01,$01,$01,$26
            .byte $29,$2C,$2F,$32,$35,$01,$01,$01,$00,$00,$00,$02,$02,$02,$01,$01
            .byte $01,$02,$02,$02,$00,$00,$00,$1B,$1B,$1B,$02,$02,$02,$03,$03,$03
            .byte $00,$00,$00,$01,$01,$01,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$01,$01,$01,$00,$00
            .byte $00,$01,$01,$01,$1B,$1B,$1B,$02,$02,$02,$01,$01,$01,$02,$02,$02
            .byte $00,$00,$00,$03,$03,$03,$01,$01,$05,$0A,$0A,$0A,$0A,$0A,$0A,$0A
            .byte $0A,$0A,$0A,$0A,$11,$02,$02,$02,$00,$00,$00,$00,$00,$00,$03,$03
            .byte $03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$3F,$42,$45
            .byte $36,$39,$3C,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03
            .byte $03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$03,$03,$03,$00,$00,$00,$02,$02,$02,$00,$00,$00,$02,$02,$02
            .byte $00,$00,$00,$01,$01,$01,$00,$00,$00,$02,$02,$02,$00,$00,$00,$02
            .byte $02,$02,$1B,$1B,$1B,$02,$02,$02,$01,$01,$01,$02,$02,$02,$00,$1F
            .byte $00,$03,$03,$03,$01,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$06,$01,$02,$02,$02,$00,$18,$00,$00,$16,$00,$03,$03,$03,$00
            .byte $12,$00,$00,$1C,$00,$00,$14,$00,$01,$01,$01,$40,$43,$46,$37,$3A
            .byte $3D,$01,$01,$01,$00,$18,$00,$00,$12,$00,$00,$14,$00,$03,$03,$03
            .byte $00,$18,$00,$00,$1C,$00,$00,$12,$00,$00,$1C,$00,$00,$18,$00,$03
            .byte $03,$03,$00,$14,$00,$02,$02,$02,$00,$1D,$00,$02,$02,$02,$00,$1D
            .byte $00,$01,$01,$01,$00,$1D,$00,$02,$02,$02,$00,$14,$00,$02,$02,$02
            .byte $1B,$1B,$1B,$02,$02,$02,$01,$01,$01,$02,$02,$02,$00,$00,$00,$03
            .byte $03,$03,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$06,$01
            .byte $01,$02,$02,$02,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$01,$01,$01,$41,$44,$47,$38,$3B,$3E,$01
            .byte $01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$02,$02,$02,$00,$00,$00,$02,$02,$02,$00,$00,$00,$01
            .byte $01,$01,$00,$00,$00,$02,$02,$02,$00,$00,$00,$02,$02,$02,$02,$02
            .byte $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$05
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$06,$00,$00,$00,$01
            .byte $01,$01,$01,$01,$01,$00,$00,$00,$01,$01,$01,$00,$00,$00,$1B,$1B
            .byte $1B,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02
            .byte $02,$02,$03,$03,$03,$1B,$1B,$1B,$03,$03,$03,$03,$03,$03,$00,$00
            .byte $00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$02,$02,$02,$00
            .byte $12,$00,$00,$1C,$00,$00,$12,$00,$00,$18,$00,$01,$05,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$06,$01,$00,$14,$00,$01,$01,$01
            .byte $01,$01,$01,$00,$1F,$00,$01,$01,$01,$00,$1F,$00,$1B,$1B,$1B,$00
            .byte $1D,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$1F
            .byte $00,$02,$02,$02,$00,$14,$00,$00,$1E,$00,$00,$18,$00,$02,$02,$02
            .byte $03,$03,$03,$1B,$1B,$1B,$03,$03,$03,$03,$03,$03,$00,$1D,$00,$04
            .byte $04,$04,$00,$12,$00,$00,$1C,$00,$00,$14,$00,$03,$03,$03,$00,$14
            .byte $00,$00,$16,$00,$00,$16,$00,$04,$04,$04,$02,$02,$02,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$06,$01,$01,$00,$00,$00,$01,$01,$01,$01,$01
            .byte $01,$00,$00,$00,$01,$01,$01,$00,$00,$00,$1B,$1B,$1B,$00,$00,$00
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$02
            .byte $02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$03,$03
            .byte $03,$1B,$1B,$1B,$03,$03,$03,$03,$03,$03,$00,$00,$00,$04,$04,$04
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$04,$04,$04,$04,$04,$04,$00,$00,$00,$02,$02
            .byte $02,$00,$00,$00,$01,$01,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$06,$04,$04,$04,$00,$00,$00,$02,$02,$02,$02,$02,$02,$00
            .byte $00,$00,$04,$04,$04,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$02,$02,$02,$00,$00,$00,$03,$03,$03,$02,$02,$02,$1B
            .byte $1B,$1B,$01,$01,$01,$04,$04,$04,$00,$00,$00,$04,$04,$04,$03,$03
            .byte $03,$02,$02,$02,$00,$00,$00,$03,$03,$03,$00,$00,$00,$01,$01,$01
            .byte $03,$03,$03,$02,$02,$02,$04,$04,$04,$00,$1F,$00,$02,$02,$02,$00
            .byte $18,$00,$01,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$06
            .byte $01,$04,$04,$04,$00,$14,$00,$02,$02,$02,$02,$02,$02,$00,$1F,$00
            .byte $04,$04,$04,$00,$18,$00,$02,$02,$02,$00,$12,$00,$00,$1C,$00,$00
            .byte $12,$00,$00,$1C,$00,$00,$12,$00,$00,$18,$00,$03,$03,$03,$00,$1D
            .byte $00,$02,$02,$02,$00,$1F,$00,$03,$03,$03,$02,$02,$02,$1B,$1B,$1B
            .byte $01,$01,$01,$04,$04,$04,$00,$14,$00,$04,$04,$04,$03,$03,$03,$02
            .byte $02,$02,$00,$1D,$00,$03,$03,$03,$00,$1D,$00,$01,$01,$01,$03,$03
            .byte $03,$02,$02,$02,$04,$04,$04,$00,$00,$00,$02,$02,$02,$00,$00,$00
            .byte $05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$06,$01,$01,$04
            .byte $04,$04,$00,$00,$00,$02,$02,$02,$02,$02,$02,$00,$00,$00,$04,$04
            .byte $04,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$02
            .byte $02,$02,$00,$00,$00,$03,$03,$03,$02,$02,$02,$1B,$1B,$1B,$01,$01
            .byte $01,$04,$04,$04,$00,$00,$00,$04,$04,$04,$03,$03,$03,$02,$02,$02
            .byte $00,$00,$00,$03,$03,$03,$00,$00,$00,$01,$01,$01,$03,$03,$03,$02
            .byte $02,$02,$1B,$1B,$1B,$00,$00,$00,$00,$00,$00,$01,$01,$05,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$06,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00
            .byte $00,$00,$03,$03,$03,$00,$00,$00,$03,$03,$03,$00,$00,$00,$03,$03
            .byte $03,$00,$00,$00,$01,$01,$01,$03,$03,$03,$00,$00,$00,$04,$04,$04
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00
            .byte $00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02
            .byte $1B,$1B,$1B,$00,$18,$00,$00,$16,$00,$01,$05,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$06,$01,$00,$12,$00,$00,$12,$00,$00,$12
            .byte $00,$00,$1C,$00,$00,$12,$00,$00,$18,$00,$02,$02,$02,$00,$1F,$00
            .byte $03,$03,$03,$00,$1D,$00,$03,$03,$03,$00,$1F,$00,$03,$03,$03,$00
            .byte $1D,$00,$01,$01,$01,$03,$03,$03,$00,$14,$00,$04,$04,$04,$00,$18
            .byte $00,$00,$16,$00,$00,$16,$00,$00,$16,$00,$04,$04,$04,$00,$12,$00
            .byte $00,$12,$00,$00,$1C,$00,$00,$14,$00,$04,$04,$04,$00,$14,$00,$03
            .byte $03,$03,$00,$14,$00,$00,$1E,$00,$00,$16,$00,$02,$02,$02,$1B,$1B
            .byte $1B,$00,$00,$00,$00,$00,$00,$05,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$06,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$03,$03
            .byte $03,$00,$00,$00,$03,$03,$03,$00,$00,$00,$03,$03,$03,$00,$00,$00
            .byte $01,$01,$01,$03,$03,$03,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$02,$02,$02,$00
            .byte $00,$00,$01,$01,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
            .byte $06,$04,$04,$04,$1B,$1B,$1B,$01,$01,$01,$00,$00,$00,$03,$03,$03
            .byte $03,$03,$03,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$02,$02,$02,$00,$00,$00,$01,$01,$01,$00,$00,$00,$03,$03
            .byte $03,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03
            .byte $04,$04,$04,$01,$01,$01,$04,$04,$04,$00,$00,$00,$02,$02,$02,$01
            .byte $01,$01,$00,$00,$00,$04,$04,$04,$00,$00,$00,$01,$01,$01,$00,$00
            .byte $00,$01,$01,$01,$00,$00,$00,$03,$03,$03,$02,$02,$02,$00,$1F,$00
            .byte $01,$05,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$06,$01,$04
            .byte $04,$04,$1B,$1B,$1B,$01,$01,$01,$00,$18,$00,$03,$03,$03,$03,$03
            .byte $03,$00,$1F,$00,$04,$04,$04,$00,$18,$00,$00,$1E,$00,$00,$14,$00
            .byte $02,$02,$02,$00,$1F,$00,$01,$01,$01,$00,$1D,$00,$03,$03,$03,$04
            .byte $04,$04,$00,$12,$00,$00,$1C,$00,$00,$18,$00,$03,$03,$03,$04,$04
            .byte $04,$01,$01,$01,$04,$04,$04,$00,$1F,$00,$02,$02,$02,$01,$01,$01
            .byte $00,$1D,$00,$04,$04,$04,$00,$1D,$00,$01,$01,$01,$00,$1D,$00,$01
            .byte $01,$01,$00,$1F,$00,$03,$03,$03,$02,$02,$02,$00,$00,$00,$05,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$06,$01,$01,$04,$04,$04
            .byte $1B,$1B,$1B,$01,$01,$01,$00,$00,$00,$03,$03,$03,$03,$03,$03,$00
            .byte $00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02
            .byte $02,$00,$00,$00,$01,$01,$01,$00,$00,$00,$03,$03,$03,$04,$04,$04
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$04,$04,$04,$01
            .byte $01,$01,$04,$04,$04,$00,$00,$00,$02,$02,$02,$01,$01,$01,$00,$00
            .byte $00,$04,$04,$04,$00,$00,$00,$01,$01,$01,$00,$00,$00,$01,$01,$01
            .byte $00,$00,$00,$03,$03,$03,$01,$01,$01,$00,$00,$00,$0D,$09,$09,$09
            .byte $09,$09,$09,$09,$09,$09,$09,$06,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $03,$03,$03,$00,$00,$00,$01,$01,$01,$00,$00,$00,$04,$04,$04,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01
            .byte $01,$01,$01,$01,$04,$04,$04,$1B,$1B,$1B,$01,$01,$01,$01,$01,$01
            .byte $02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$01,$01,$01,$01,$01,$01,$00,$18,$00,$0D,$09,$09,$09,$09,$09
            .byte $09,$09,$09,$09,$06,$01,$00,$12,$00,$00,$1C,$00,$00,$12,$00,$00
            .byte $1C,$00,$00,$12,$00,$00,$1C,$00,$00,$12,$00,$00,$18,$00,$03,$03
            .byte $03,$00,$18,$00,$01,$01,$01,$00,$1D,$00,$04,$04,$04,$00,$18,$00
            .byte $00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$01,$01,$01,$01
            .byte $01,$01,$04,$04,$04,$1B,$1B,$1B,$01,$01,$01,$01,$01,$01,$02,$02
            .byte $02,$00,$18,$00,$00,$1C,$00,$00,$12,$00,$00,$12,$00,$00,$1C,$00
            .byte $00,$14,$00,$02,$02,$02,$00,$12,$00,$00,$1C,$00,$00,$18,$00,$01
            .byte $01,$01,$01,$01,$01,$00,$00,$00,$0D,$09,$09,$09,$09,$09,$09,$09
            .byte $09,$06,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00
            .byte $00,$00,$01,$01,$01,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01
            .byte $04,$04,$04,$1B,$1B,$1B,$01,$01,$01,$01,$01,$01,$02,$02,$02,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01
            .byte $01,$01,$0E,$00,$00,$00,$0D,$09,$09,$09,$09,$09,$09,$09,$06,$1B
            .byte $1B,$1B,$00,$00,$00,$01,$01,$01,$00,$00,$00,$03,$03,$03,$03,$03
            .byte $03,$03,$03,$03,$04,$04,$04,$03,$03,$03,$03,$03,$03,$00,$00,$00
            .byte $02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00
            .byte $00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $03,$03,$03,$00,$00,$00,$03,$03,$03,$01,$01,$01,$00,$00,$00,$03
            .byte $03,$03,$04,$04,$04,$01,$01,$01,$01,$01,$01,$02,$02,$02,$01,$05
            .byte $0C,$00,$1F,$00,$0D,$09,$09,$09,$09,$09,$09,$06,$01,$1B,$1B,$1B
            .byte $00,$1F,$00,$01,$01,$01,$00,$1D,$00,$03,$03,$03,$03,$03,$03,$03
            .byte $03,$03,$04,$04,$04,$03,$03,$03,$03,$03,$03,$00,$18,$00,$02,$02
            .byte $02,$00,$12,$00,$00,$12,$00,$00,$18,$00,$04,$04,$04,$00,$1D,$00
            .byte $02,$02,$02,$00,$18,$00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$00
            .byte $1E,$00,$00,$16,$00,$00,$16,$00,$00,$1E,$00,$00,$18,$00,$03,$03
            .byte $03,$00,$18,$00,$03,$03,$03,$01,$01,$01,$00,$14,$00,$03,$03,$03
            .byte $04,$04,$04,$01,$01,$01,$01,$01,$01,$02,$02,$02,$05,$09,$0C,$00
            .byte $00,$00,$0D,$09,$09,$09,$09,$09,$06,$01,$01,$1B,$1B,$1B,$00,$00
            .byte $00,$01,$01,$01,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03,$03
            .byte $04,$04,$04,$03,$03,$03,$03,$03,$03,$00,$00,$00,$02,$02,$02,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$02,$02
            .byte $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00
            .byte $00,$00,$03,$03,$03,$01,$01,$01,$00,$00,$00,$03,$03,$03,$04,$04
            .byte $04,$01,$01,$01,$01,$01,$01,$02,$02,$02,$09,$09,$0C,$00,$00,$00
            .byte $0D,$09,$09,$09,$09,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$01,$01,$01,$01,$01,$01
            .byte $00,$00,$00,$04,$04,$04,$1B,$1B,$1B,$00,$00,$00,$03,$03,$03,$02
            .byte $02,$02,$00,$00,$00,$04,$04,$04,$04,$04,$04,$1B,$1B,$1B,$00,$00
            .byte $00,$04,$04,$04,$03,$03,$03,$00,$00,$00,$04,$04,$04,$00,$00,$00
            .byte $02,$02,$02,$03,$03,$03,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$02,$02,$02,$09,$09,$0C,$00,$18,$00,$0D,$09
            .byte $09,$09,$06,$01,$00,$12,$00,$00,$12,$00,$00,$18,$00,$00,$1E,$00
            .byte $00,$16,$00,$00,$1E,$00,$00,$16,$00,$03,$03,$03,$00,$14,$00,$00
            .byte $1E,$00,$00,$16,$00,$02,$02,$02,$01,$01,$01,$01,$01,$01,$00,$1D
            .byte $00,$04,$04,$04,$1B,$1B,$1B,$00,$1D,$00,$03,$03,$03,$02,$02,$02
            .byte $00,$1F,$00,$04,$04,$04,$04,$04,$04,$1B,$1B,$1B,$00,$1D,$00,$04
            .byte $04,$04,$03,$03,$03,$00,$1F,$00,$04,$04,$04,$00,$1F,$00,$02,$02
            .byte $02,$03,$03,$03,$00,$1D,$00,$03,$03,$03,$00,$12,$00,$00,$1C,$00
            .byte $00,$14,$00,$02,$02,$02,$09,$09,$0C,$00,$00,$00,$0D,$09,$09,$06
            .byte $01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$02,$02,$02,$01,$01,$01,$01,$01,$01,$00,$00,$00,$04
            .byte $04,$04,$1B,$1B,$1B,$00,$00,$00,$03,$03,$03,$02,$02,$02,$00,$00
            .byte $00,$04,$04,$04,$04,$04,$04,$1B,$1B,$1B,$00,$00,$00,$04,$04,$04
            .byte $03,$03,$03,$00,$00,$00,$04,$04,$04,$00,$00,$00,$02,$02,$02,$03
            .byte $03,$03,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$02,$02,$02,$09,$09,$0C,$00,$00,$00,$0D,$09,$06,$00,$00,$00
            .byte $02,$02,$02,$03,$03,$03,$00,$00,$00,$01,$01,$01,$00,$00,$00,$1B
            .byte $1B,$1B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00
            .byte $00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$03,$03
            .byte $03,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$1B
            .byte $1B,$1B,$09,$09,$0C,$00,$1F,$00,$0D,$06,$01,$00,$14,$00,$02,$02
            .byte $02,$03,$03,$03,$00,$1F,$00,$01,$01,$01,$00,$1D,$00,$1B,$1B,$1B
            .byte $00,$18,$00,$00,$1E,$00,$00,$16,$00,$04,$04,$04,$00,$1F,$00,$02
            .byte $02,$02,$00,$12,$00,$00,$1C,$00,$00,$14,$00,$02,$02,$02,$00,$14
            .byte $00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$00,$16,$00,$00,$1E,$00
            .byte $00,$16,$00,$03,$03,$03,$00,$14,$00,$00,$16,$00,$03,$03,$03,$00
            .byte $18,$00,$01,$01,$01,$00,$18,$00,$00,$16,$00,$00,$1E,$00,$00,$14
            .byte $00,$00,$1C,$00,$00,$18,$00,$02,$02,$02,$00,$1D,$00,$1B,$1B,$1B
            .byte $09,$09,$0C,$00,$00,$00,$0F,$01,$01,$00,$00,$00,$02,$02,$02,$03
            .byte $03,$03,$00,$00,$00,$01,$01,$01,$00,$00,$00,$1B,$1B,$1B,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$02,$02,$02
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00
            .byte $01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$1B,$1B,$1B,$09,$09
            .byte $0C,$00,$00,$00,$02,$02,$02,$00,$00,$00,$03,$03,$03,$04,$04,$04
            .byte $00,$00,$00,$04,$04,$04,$00,$00,$00,$1B,$1B,$1B,$00,$00,$00,$04
            .byte $04,$04,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$02,$02,$02,$00,$00,$00,$01,$01,$01,$00,$00,$00,$03,$03,$03
            .byte $02,$02,$02,$03,$03,$03,$04,$04,$04,$04,$04,$04,$00,$00,$00,$02
            .byte $02,$02,$00,$00,$00,$1B,$1B,$1B,$02,$02,$02,$00,$00,$00,$02,$02
            .byte $02,$01,$01,$01,$03,$03,$03,$02,$02,$02,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$02,$02,$02,$00,$00,$00,$01,$01,$01,$09,$09,$0C,$00
            .byte $18,$00,$02,$02,$02,$00,$14,$00,$03,$03,$03,$04,$04,$04,$00,$1F
            .byte $00,$04,$04,$04,$00,$1D,$00,$1B,$1B,$1B,$00,$1F,$00,$04,$04,$04
            .byte $00,$1D,$00,$01,$01,$01,$00,$18,$00,$00,$1E,$00,$00,$18,$00,$02
            .byte $02,$02,$00,$1D,$00,$01,$01,$01,$00,$1D,$00,$03,$03,$03,$02,$02
            .byte $02,$03,$03,$03,$04,$04,$04,$04,$04,$04,$00,$18,$00,$02,$02,$02
            .byte $00,$1D,$00,$1B,$1B,$1B,$02,$02,$02,$00,$1F,$00,$02,$02,$02,$01
            .byte $01,$01,$03,$03,$03,$02,$02,$02,$00,$1D,$00,$03,$03,$03,$00,$1F
            .byte $00,$02,$02,$02,$00,$14,$00,$01,$01,$01,$09,$09,$0C,$00,$00,$00
            .byte $02,$02,$02,$00,$00,$00,$03,$03,$03,$04,$04,$04,$00,$00,$00,$04
            .byte $04,$04,$00,$00,$00,$1B,$1B,$1B,$00,$00,$00,$04,$04,$04,$00,$00
            .byte $00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02
            .byte $00,$00,$00,$01,$01,$01,$00,$00,$00,$03,$03,$03,$02,$02,$02,$03
            .byte $03,$03,$04,$04,$04,$04,$04,$04,$00,$00,$00,$02,$02,$02,$00,$00
            .byte $00,$1B,$1B,$1B,$02,$02,$02,$00,$00,$00,$02,$02,$02,$01,$01,$01
            .byte $03,$03,$03,$02,$02,$02,$00,$00,$00,$03,$03,$03,$00,$00,$00,$02
            .byte $02,$02,$00,$00,$00,$01,$01,$01,$09,$09,$06,$00,$00,$00,$04,$04
            .byte $04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$04,$04,$04,$02,$02,$02
            .byte $01,$01,$01,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$1B,$1B,$1B,$09,$06,$01,$00,$1F,$00,$04,$04,$04,$00
            .byte $12,$00,$00,$12,$00,$00,$1C,$00,$00,$12,$00,$00,$12,$00,$00,$12
            .byte $00,$00,$1C,$00,$00,$18,$00,$00,$1C,$00,$00,$12,$00,$00,$14,$00
            .byte $01,$01,$01,$01,$01,$01,$00,$18,$00,$00,$16,$00,$00,$16,$00,$03
            .byte $03,$03,$00,$12,$00,$00,$14,$00,$04,$04,$04,$02,$02,$02,$01,$01
            .byte $01,$03,$03,$03,$00,$12,$00,$00,$1C,$00,$00,$12,$00,$00,$1C,$00
            .byte $00,$12,$00,$00,$18,$00,$00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00
            .byte $16,$00,$00,$16,$00,$04,$04,$04,$00,$18,$00,$00,$16,$00,$00,$16
            .byte $00,$1B,$1B,$1B,$06,$1B,$01,$00,$00,$00,$04,$04,$04,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01
            .byte $01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$00,$00,$00,$04,$04,$04,$02,$02,$02,$01,$01,$01,$03
            .byte $03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1B
            .byte $1B,$1B,$1B,$1B,$1B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03
            .byte $03,$01,$01,$01,$04,$04,$04,$00,$00,$00,$01,$01,$01,$01,$01,$01
            .byte $00,$00,$00,$1B,$1B,$1B,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$04,$04,$04,$00,$00,$00,$04,$04,$04,$1B,$1B,$1B,$02,$02
            .byte $02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$03,$03,$03,$01,$01,$01,$04,$04,$04,$00,$00,$00,$02
            .byte $02,$02,$04,$04,$04,$00,$00,$00,$04,$04,$04,$03,$03,$03,$00,$00
            .byte $00,$03,$03,$03,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02
            .byte $1B,$1B,$1B,$00,$18,$00,$00,$1E,$00,$00,$16,$00,$03,$03,$03,$01
            .byte $01,$01,$04,$04,$04,$00,$1F,$00,$01,$01,$01,$01,$01,$01,$00,$1F
            .byte $00,$1B,$1B,$1B,$03,$03,$03,$00,$12,$00,$00,$1C,$00,$00,$14,$00
            .byte $04,$04,$04,$00,$18,$00,$04,$04,$04,$1B,$1B,$1B,$02,$02,$02,$00
            .byte $12,$00,$00,$1C,$00,$00,$1C,$00,$00,$12,$00,$00,$1C,$00,$00,$18
            .byte $00,$03,$03,$03,$01,$01,$01,$04,$04,$04,$00,$1D,$00,$02,$02,$02
            .byte $04,$04,$04,$00,$1D,$00,$04,$04,$04,$03,$03,$03,$00,$1F,$00,$03
            .byte $03,$03,$00,$1D,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$1B,$1B
            .byte $1B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$01,$01,$01
            .byte $04,$04,$04,$00,$00,$00,$01,$01,$01,$01,$01,$01,$00,$00,$00,$1B
            .byte $1B,$1B,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04
            .byte $04,$00,$00,$00,$04,$04,$04,$1B,$1B,$1B,$02,$02,$02,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03
            .byte $03,$03,$01,$01,$01,$04,$04,$04,$00,$00,$00,$02,$02,$02,$04,$04
            .byte $04,$00,$00,$00,$04,$04,$04,$03,$03,$03,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$01,$01,$01,$00
            .byte $00,$00,$02,$02,$02,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $04,$04,$04,$03,$03,$03,$03,$03,$03,$00,$00,$00,$1B,$1B,$1B,$02
            .byte $02,$02,$01,$01,$01,$00,$00,$00,$01,$01,$01,$02,$02,$02,$02,$02
            .byte $02,$02,$02,$02,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$01,$01,$01,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$01,$01,$01,$00,$1D,$00
            .byte $02,$02,$02,$00,$1F,$00,$04,$04,$04,$00,$12,$00,$00,$1C,$00,$00
            .byte $18,$00,$00,$1E,$00,$00,$16,$00,$00,$18,$00,$00,$16,$00,$04,$04
            .byte $04,$03,$03,$03,$03,$03,$03,$00,$1D,$00,$1B,$1B,$1B,$02,$02,$02
            .byte $01,$01,$01,$00,$14,$00,$01,$01,$01,$02,$02,$02,$02,$02,$02,$02
            .byte $02,$02,$03,$03,$03,$03,$03,$03,$00,$18,$00,$00,$1E,$00,$00,$16
            .byte $00,$00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$00,$12,$00
            .byte $00,$14,$00,$04,$04,$04,$00,$18,$00,$01,$01,$01,$00,$12,$00,$00
            .byte $1C,$00,$00,$14,$00,$04,$04,$04,$01,$01,$01,$00,$00,$00,$02,$02
            .byte $02,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$03
            .byte $03,$03,$03,$03,$03,$00,$00,$00,$1B,$1B,$1B,$02,$02,$02,$01,$01
            .byte $01,$00,$00,$00,$01,$01,$01,$02,$02,$02,$02,$02,$02,$02,$02,$02
            .byte $03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$04,$04,$04,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$04,$04,$04,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$01,$01
            .byte $01,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $01,$01,$01,$00,$00,$00,$03,$03,$03,$00,$00,$00,$03,$03,$03,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$03,$03,$03,$01,$01,$01,$02,$02,$02,$04,$04,$04
            .byte $04,$04,$04,$03,$03,$03,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$04,$04,$04,$04,$04,$04,$02,$02,$02,$00,$00
            .byte $00,$03,$03,$03,$01,$01,$01,$00,$12,$00,$00,$1C,$00,$00,$12,$00
            .byte $00,$1C,$00,$00,$18,$00,$01,$01,$01,$00,$18,$00,$01,$01,$01,$00
            .byte $1D,$00,$02,$02,$02,$00,$18,$00,$00,$1E,$00,$00,$16,$00,$01,$01
            .byte $01,$00,$14,$00,$03,$03,$03,$00,$14,$00,$03,$03,$03,$00,$14,$00
            .byte $00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00
            .byte $16,$00,$03,$03,$03,$01,$01,$01,$02,$02,$02,$04,$04,$04,$04,$04
            .byte $04,$03,$03,$03,$00,$1F,$00,$02,$02,$02,$00,$12,$00,$00,$1C,$00
            .byte $00,$18,$00,$04,$04,$04,$04,$04,$04,$02,$02,$02,$00,$1D,$00,$03
            .byte $03,$03,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$01,$01,$01,$00,$00,$00
            .byte $02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$00
            .byte $00,$00,$03,$03,$03,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $03,$03,$03,$01,$01,$01,$02,$02,$02,$04,$04,$04,$04,$04,$04,$03
            .byte $03,$03,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$04,$04,$04,$04,$04,$04,$02,$02,$02,$00,$00,$00,$03,$03,$03
            .byte $04,$04,$04,$01,$01,$01,$04,$04,$04,$03,$03,$03,$04,$04,$04,$04
            .byte $04,$04,$04,$04,$04,$00,$00,$00,$1B,$1B,$1B,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$1B,$1B,$1B,$00,$00,$00,$04,$04,$04,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$04
            .byte $04,$04,$01,$01,$01,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$04,$04,$04,$03,$03,$03,$04,$04,$04,$02,$02,$02,$01
            .byte $01,$01,$00,$00,$00,$01,$01,$01,$00,$00,$00,$04,$04,$04,$04,$04
            .byte $04,$01,$01,$01,$04,$04,$04,$03,$03,$03,$04,$04,$04,$04,$04,$04
            .byte $04,$04,$04,$00,$18,$00,$1B,$1B,$1B,$00,$12,$00,$00,$1C,$00,$00
            .byte $18,$00,$1B,$1B,$1B,$00,$18,$00,$04,$04,$04,$00,$12,$00,$00,$1C
            .byte $00,$00,$12,$00,$00,$1C,$00,$00,$14,$00,$02,$02,$02,$04,$04,$04
            .byte $01,$01,$01,$00,$18,$00,$04,$04,$04,$00,$18,$00,$00,$16,$00,$00
            .byte $1E,$00,$00,$16,$00,$04,$04,$04,$00,$12,$00,$00,$1C,$00,$00,$18
            .byte $00,$04,$04,$04,$03,$03,$03,$04,$04,$04,$02,$02,$02,$01,$01,$01
            .byte $00,$14,$00,$01,$01,$01,$00,$14,$00,$04,$04,$04,$04,$04,$04,$01
            .byte $01,$01,$04,$04,$04,$03,$03,$03,$04,$04,$04,$04,$04,$04,$04,$04
            .byte $04,$00,$00,$00,$1B,$1B,$1B,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $1B,$1B,$1B,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$04,$04,$04,$01,$01
            .byte $01,$00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04
            .byte $04,$04,$03,$03,$03,$04,$04,$04,$02,$02,$02,$01,$01,$01,$00,$00
            .byte $00,$01,$01,$01,$00,$00,$00,$04,$04,$04,$1B,$1B,$1B,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$01
            .byte $01,$01,$02,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$01,$01
            .byte $01,$00,$00,$00,$1B,$1B,$1B,$03,$03,$03,$04,$04,$04,$00,$00,$00
            .byte $04,$04,$04,$00,$00,$00,$04,$04,$04,$00,$00,$00,$02,$02,$02,$01
            .byte $01,$01,$01,$01,$01,$1B,$1B,$1B,$02,$02,$02,$02,$02,$02,$00,$00
            .byte $00,$02,$02,$02,$00,$00,$00,$04,$04,$04,$1B,$1B,$1B,$01,$01,$01
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$02,$02,$02,$1B,$1B,$1B,$00,$12,$00,$00,$12
            .byte $00,$00,$12,$00,$00,$12,$00,$00,$14,$00,$04,$04,$04,$01,$01,$01
            .byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$01,$01,$01,$00
            .byte $18,$00,$1B,$1B,$1B,$03,$03,$03,$04,$04,$04,$00,$18,$00,$04,$04
            .byte $04,$00,$1D,$00,$04,$04,$04,$00,$14,$00,$02,$02,$02,$01,$01,$01
            .byte $01,$01,$01,$1B,$1B,$1B,$02,$02,$02,$02,$02,$02,$00,$1F,$00,$02
            .byte $02,$02,$00,$1F,$00,$04,$04,$04,$1B,$1B,$1B,$01,$01,$01,$00,$14
            .byte $00,$00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$00,$1E,$00
            .byte $00,$16,$00,$02,$02,$02,$1B,$1B,$1B,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$01,$01,$01,$02,$02
            .byte $02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$01,$01,$01,$00,$00,$00
            .byte $1B,$1B,$1B,$03,$03,$03,$04,$04,$04,$00,$00,$00,$04,$04,$04,$00
            .byte $00,$00,$04,$04,$04,$00,$00,$00,$02,$02,$02,$01,$01,$01,$01,$01
            .byte $01,$1B,$1B,$1B,$02,$02,$02,$02,$02,$02,$00,$00,$00,$02,$02,$02
            .byte $00,$00,$00,$04,$04,$04,$1B,$1B,$1B,$01,$01,$01,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$02,$02,$02,$04,$04,$04,$00,$00,$00,$01,$01,$01,$00,$00,$00
            .byte $01,$01,$01,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03
            .byte $03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03
            .byte $02,$02,$02,$03,$03,$03,$04,$04,$04,$04,$04,$04,$04,$04,$04,$02
            .byte $02,$02,$04,$04,$04,$00,$18,$00,$01,$01,$01,$00,$18,$00,$01,$01
            .byte $01,$00,$14,$00,$03,$03,$03,$00,$12,$00,$00,$1C,$00,$00,$12,$00
            .byte $00,$1C,$00,$00,$12,$00,$00,$1C,$00,$00,$18,$00,$03,$03,$03,$00
            .byte $14,$00,$00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$01,$01
            .byte $01,$00,$12,$00,$00,$12,$00,$00,$12,$00,$00,$12,$00,$00,$1C,$00
            .byte $00,$12,$00,$00,$1C,$00,$00,$12,$00,$00,$1C,$00,$00,$18,$00,$04
            .byte $04,$04,$00,$12,$00,$00,$1C,$00,$00,$14,$00,$03,$03,$03,$02,$02
            .byte $02,$03,$03,$03,$04,$04,$04,$04,$04,$04,$04,$04,$04,$02,$02,$02
            .byte $04,$04,$04,$00,$00,$00,$01,$01,$01,$00,$00,$00,$01,$01,$01,$00
            .byte $00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$02,$02,$02,$03
            .byte $03,$03,$04,$04,$04,$04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02
            .byte $02,$00,$00,$00,$04,$04,$04,$00,$00,$00,$04,$04,$04,$00,$00,$00
            .byte $02,$02,$02,$00,$00,$00,$03,$03,$03,$01,$01,$01,$1B,$1B,$1B,$01
            .byte $01,$01,$01,$01,$01,$00,$00,$00,$01,$01,$01,$00,$00,$00,$02,$02
            .byte $02,$02,$02,$02,$03,$03,$03,$00,$00,$00,$02,$02,$02,$04,$04,$04
            .byte $02,$02,$02,$04,$04,$04,$00,$00,$00,$03,$03,$03,$00,$00,$00,$02
            .byte $02,$02,$00,$00,$00,$02,$02,$02,$00,$00,$00,$01,$01,$01,$00,$00
            .byte $00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$02,$02,$02,$00
            .byte $18,$00,$04,$04,$04,$00,$18,$00,$04,$04,$04,$00,$14,$00,$02,$02
            .byte $02,$00,$1F,$00,$03,$03,$03,$01,$01,$01,$1B,$1B,$1B,$01,$01,$01
            .byte $01,$01,$01,$00,$1D,$00,$01,$01,$01,$00,$1D,$00,$02,$02,$02,$02
            .byte $02,$02,$03,$03,$03,$00,$18,$00,$02,$02,$02,$04,$04,$04,$02,$02
            .byte $02,$04,$04,$04,$00,$1F,$00,$03,$03,$03,$00,$1D,$00,$02,$02,$02
            .byte $00,$1D,$00,$02,$02,$02,$00,$1F,$00,$01,$01,$01,$00,$1F,$00,$01
            .byte $01,$01,$00,$14,$00,$00,$1E,$00,$00,$16,$00,$03,$03,$03,$00,$14
            .byte $00,$00,$16,$00,$00,$16,$00,$04,$04,$04,$02,$02,$02,$00,$00,$00
            .byte $04,$04,$04,$00,$00,$00,$04,$04,$04,$00,$00,$00,$02,$02,$02,$00
            .byte $00,$00,$03,$03,$03,$01,$01,$01,$1B,$1B,$1B,$01,$01,$01,$01,$01
            .byte $01,$00,$00,$00,$01,$01,$01,$00,$00,$00,$02,$02,$02,$02,$02,$02
            .byte $03,$03,$03,$00,$00,$00,$02,$02,$02,$04,$04,$04,$02,$02,$02,$04
            .byte $04,$04,$00,$00,$00,$03,$03,$03,$00,$00,$00,$02,$02,$02,$00,$00
            .byte $00,$02,$02,$02,$00,$00,$00,$01,$01,$01,$00,$00,$00,$01,$01,$01
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$04,$04,$04,$04,$04,$04,$00,$00,$00,$00,$00
            .byte $00,$01,$01,$01,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04
            .byte $00,$00,$00,$02,$02,$02,$04,$04,$04,$00,$18,$00,$00,$1A,$00,$01
            .byte $01,$01,$03,$03,$03,$00,$12,$00,$00,$12,$00,$00,$18,$00,$00,$1E
            .byte $00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00,$16,$00
            .byte $00,$1C,$00,$00,$12,$00,$00,$1C,$00,$00,$12,$00,$00,$1C,$00,$00
            .byte $18,$00,$03,$03,$03,$00,$12,$00,$00,$12,$00,$00,$12,$00,$00,$18
            .byte $00,$00,$1E,$00,$00,$16,$00,$02,$02,$02,$00,$12,$00,$00,$1C,$00
            .byte $00,$18,$00,$00,$1E,$00,$00,$16,$00,$00,$1E,$00,$00,$16,$00,$01
            .byte $01,$01,$00,$18,$00,$00,$16,$00,$00,$16,$00,$04,$04,$04,$00,$1A
            .byte $00,$02,$02,$02,$04,$04,$04,$00,$00,$00,$00,$00,$00,$01,$01,$01
            .byte $03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$02,$02,$02,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$00,$00,$00,$02
            .byte $02,$02,$03,$03,$03,$04,$04,$04,$04,$04,$04,$03,$03,$03,$03,$03
            .byte $03,$02,$02,$02,$03,$03,$03,$01,$01,$01,$02,$02,$02,$01,$01,$01
            .byte $04,$04,$04,$02,$02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03
            .byte $03,$03,$02,$02,$02,$04,$04,$04,$04,$04,$04,$02,$02,$02,$1B,$1B
            .byte $1B,$03,$03,$03,$04,$04,$04,$01,$01,$01,$01,$01,$01,$02,$02,$02
            .byte $01,$01,$01,$02,$02,$02,$02,$02,$02,$01,$01,$01,$04,$04,$04,$03
            .byte $03,$03,$03,$03,$03,$02,$02,$02,$02,$02,$02,$03,$03,$03,$01,$01
            .byte $01,$03,$03,$03,$01,$01,$01,$04,$04,$04,$03,$03,$03,$1B,$1B,$1B
            .byte $03,$03,$03,$04,$04,$04,$04,$04,$04,$03,$03,$03,$03,$03,$03,$02
            .byte $02,$02,$03,$03,$03,$01,$01,$01,$02,$02,$02,$01,$01,$01,$04,$04
            .byte $04,$02,$02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03
            .byte $02,$02,$02,$04,$04,$04,$04,$04,$04,$02,$02,$02,$1B,$1B,$1B,$03
            .byte $03,$03,$04,$04,$04,$01,$01,$01,$01,$01,$01,$02,$02,$02,$01,$01
            .byte $01,$02,$02,$02,$02,$02,$02,$01,$01,$01,$04,$04,$04,$03,$03,$03
            .byte $03,$03,$03,$02,$02,$02,$02,$02,$02,$03,$03,$03,$01,$01,$01,$03
            .byte $03,$03,$01,$01,$01,$04,$04,$04,$03,$03,$03,$1B,$1B,$1B,$03,$03
            .byte $03,$04,$04,$04,$04,$04,$04,$03,$03,$03,$03,$03,$03,$02,$02,$02
            .byte $03,$03,$03,$01,$01,$01,$02,$02,$02,$01,$01,$01,$04,$04,$04,$02
            .byte $02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$02,$02
            .byte $02,$04,$04,$04,$04,$04,$04,$02,$02,$02,$1B,$1B,$1B,$03,$03,$03
            .byte $04,$04,$04,$01,$01,$01,$01,$01,$01,$02,$02,$02,$01,$01,$01,$02
            .byte $02,$02,$02,$02,$02,$01,$01,$01,$04,$04,$04,$03,$03,$03,$03,$03
            .byte $03,$02,$02,$02,$02,$02,$02,$03,$03,$03,$01,$01,$01,$03,$03,$03
            .byte $01,$01,$01,$04,$04,$04,$03,$03,$03,$1B,$1B,$FF,$03,$03,$03,$04
            .byte $04,$04,$04,$04,$04,$03,$03,$03,$03,$03,$03,$02,$02,$02,$03,$03
            .byte $03,$01,$01,$01,$02,$02,$02,$01,$01,$01,$04,$04,$04,$02,$02,$02
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$02,$02,$02,$04
            .byte $04,$04,$04,$04,$04,$02,$02,$02,$1B,$1B,$1B,$03,$03,$03,$04,$04
            .byte $04,$01,$01,$01,$01,$01,$01,$02,$02,$02,$01,$01,$01,$02,$02,$02
            .byte $02,$02,$02,$01,$01,$01,$04,$04,$04,$03,$03,$03,$03,$03,$03,$02
            .byte $02,$02,$02,$02,$02,$03,$03,$03,$01,$01,$01,$03,$03,$03,$01,$01
            .byte $01,$04,$04,$04,$03,$03,$03,$1B,$1B,$1B,$03,$03,$03,$04,$04,$04
            .byte $04,$04,$04,$03,$03,$03,$03,$03,$03,$02,$02,$02,$03,$03,$03,$01
            .byte $01,$01,$02,$02,$02,$01,$01,$01,$04,$04,$04,$02,$02,$02,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$02,$02,$02,$04,$04,$04
            .byte $04,$04,$04,$02,$02,$02,$1B,$1B,$1B,$03,$03,$03,$04,$04,$04,$01
            .byte $01,$01,$01,$01,$01,$02,$02,$02,$01,$01,$01,$02,$02,$02,$02,$02
            .byte $02,$01,$01,$01,$04,$04,$04,$03,$03,$03,$03,$03,$03,$02,$02,$02
            .byte $02,$02,$02,$03,$03,$03,$01,$01,$01,$03,$03,$03,$01,$01,$01,$04
            .byte $04,$04,$03,$03,$03,$1B,$1B,$FF,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$06,$6C,$06,$00,$00,$02,$19,$B0
            .byte $08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06
            .byte $00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19
            .byte $B0,$08,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C
            .byte $04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00,$03
            .byte $06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00
            .byte $00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$81,$78
            .byte $01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08
            .byte $81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19
            .byte $B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C
            .byte $08,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08
            .byte $06,$6C,$08,$19,$B0,$08,$33,$61,$04,$33,$61,$04,$33,$61,$04,$33
            .byte $61,$04,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C
            .byte $04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00,$03
            .byte $06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00
            .byte $00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$CD,$85
            .byte $01,$00,$00,$01,$CD,$85,$01,$00,$00,$01,$CD,$85,$01,$00,$00,$01
            .byte $CD,$85,$01,$00,$00,$01,$66,$C2,$01,$00,$00,$01,$66,$C2,$01,$00
            .byte $00,$01,$66,$C2,$02,$66,$C2,$02,$06,$6C,$08,$19,$B0,$08,$81,$78
            .byte $01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08
            .byte $81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19
            .byte $B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C
            .byte $08,$19,$B0,$08,$33,$61,$04,$33,$61,$04,$33,$61,$04,$33,$61,$04
            .byte $0C,$D8,$01,$0E,$6B,$01,$10,$2F,$01,$11,$25,$01,$13,$3E,$01,$15
            .byte $9A,$01,$16,$E3,$01,$19,$B0,$01,$1C,$D6,$01,$20,$5E,$01,$22,$4A
            .byte $01,$26,$7D,$01,$2B,$34,$01,$2D,$C6,$01,$33,$61,$01,$39,$AC,$01
            .byte $40,$BC,$01,$44,$95,$01,$4C,$FB,$01,$56,$69,$01,$5B,$8C,$01,$66
            .byte $C2,$01,$73,$58,$01,$81,$78,$01,$44,$95,$01,$4C,$FB,$01,$56,$69
            .byte $01,$5B,$8C,$01,$66,$C2,$01,$73,$58,$01,$81,$78,$01,$89,$2B,$01
            .byte $06,$6C,$08,$33,$61,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19
            .byte $B0,$08,$89,$2B,$01,$81,$78,$01,$73,$58,$01,$66,$C2,$01,$5B,$8C
            .byte $01,$56,$69,$01,$4C,$FB,$01,$44,$95,$01,$40,$BC,$01,$39,$AC,$01
            .byte $33,$61,$01,$2D,$C6,$01,$2B,$34,$01,$26,$7D,$01,$22,$4A,$01,$20
            .byte $5E,$01,$1C,$D6,$01,$19,$B0,$01,$16,$E3,$01,$15,$9A,$01,$13,$3E
            .byte $01,$11,$25,$01,$10,$2F,$01,$0E,$6B,$01,$0C,$D8,$01,$0B,$71,$01
            .byte $0A,$CD,$01,$09,$9F,$01,$08,$92,$01,$10,$2F,$01,$0E,$6B,$01,$0C
            .byte $D8,$01,$06,$6C,$08,$33,$61,$04,$33,$61,$08,$33,$61,$04,$33,$61
            .byte $08,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04
            .byte $19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$33,$61,$04,$33,$61,$04,$33
            .byte $61,$04,$33,$61,$04,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00
            .byte $03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$33,$61,$04
            .byte $33,$61,$04,$33,$61,$04,$33,$61,$04,$06,$6C,$08,$19,$B0,$08,$81
            .byte $78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0
            .byte $08,$33,$61,$04,$33,$61,$04,$33,$61,$04,$33,$61,$04,$06,$6C,$08
            .byte $19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06
            .byte $6C,$08,$19,$B0,$08,$33,$61,$04,$33,$61,$04,$33,$61,$04,$33,$61
            .byte $04,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04
            .byte $19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$33,$61,$04,$33,$61,$04,$33
            .byte $61,$04,$33,$61,$04,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78
            .byte $01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02
            .byte $19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06
            .byte $6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C
            .byte $04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01
            .byte $00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19
            .byte $B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C
            .byte $06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04
            .byte $19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00
            .byte $00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0
            .byte $08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06
            .byte $00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19
            .byte $B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00
            .byte $03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08
            .byte $81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00
            .byte $00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0
            .byte $08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03
            .byte $06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81
            .byte $78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00
            .byte $02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08
            .byte $06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06
            .byte $6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78
            .byte $01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02
            .byte $19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06
            .byte $6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C
            .byte $04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01
            .byte $00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19
            .byte $B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C
            .byte $06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04
            .byte $19,$B0,$08,$89,$2B,$01,$81,$78,$01,$73,$58,$01,$66,$C2,$01,$5B
            .byte $8C,$01,$56,$69,$01,$4C,$FB,$01,$44,$95,$01,$40,$BC,$01,$39,$AC
            .byte $01,$33,$61,$01,$2D,$C6,$01,$2B,$34,$01,$26,$7D,$01,$22,$4A,$01
            .byte $20,$5E,$01,$1C,$D6,$01,$19,$B0,$01,$16,$E3,$01,$15,$9A,$01,$13
            .byte $3E,$01,$11,$25,$01,$10,$2F,$01,$0E,$6B,$01,$0C,$D8,$01,$0B,$71
            .byte $01,$0A,$CD,$01,$09,$9F,$01,$08,$92,$01,$10,$2F,$01,$0E,$6B,$01
            .byte $0C,$D8,$01,$0C,$D8,$01,$0E,$6B,$01,$10,$2F,$01,$11,$25,$01,$13
            .byte $3E,$01,$15,$9A,$01,$16,$E3,$01,$19,$B0,$01,$1C,$D6,$01,$20,$5E
            .byte $01,$22,$4A,$01,$26,$7D,$01,$2B,$34,$01,$2D,$C6,$01,$33,$61,$01
            .byte $39,$AC,$01,$40,$BC,$01,$44,$95,$01,$44,$95,$01,$4C,$FB,$01,$33
            .byte $61,$04,$33,$61,$04,$33,$61,$04,$89,$2B,$01,$81,$78,$01,$73,$58
            .byte $01,$66,$C2,$01,$5B,$8C,$01,$56,$69,$01,$4C,$FB,$01,$44,$95,$01
            .byte $40,$BC,$01,$39,$AC,$01,$33,$61,$01,$2D,$C6,$01,$2B,$34,$01,$26
            .byte $7D,$01,$22,$4A,$01,$20,$5E,$01,$1C,$D6,$01,$19,$B0,$01,$16,$E3
            .byte $01,$15,$9A,$01,$13,$3E,$01,$11,$25,$01,$10,$2F,$01,$0E,$6B,$01
            .byte $0C,$D8,$01,$0B,$71,$01,$0A,$CD,$01,$09,$9F,$01,$08,$92,$01,$10
            .byte $2F,$01,$0E,$6B,$01,$0C,$D8,$01,$0C,$D8,$01,$0E,$6B,$01,$10,$2F
            .byte $01,$11,$25,$01,$13,$3E,$01,$15,$9A,$01,$16,$E3,$01,$19,$B0,$01
            .byte $1C,$D6,$01,$20,$5E,$01,$22,$4A,$01,$26,$7D,$01,$2B,$34,$01,$2D
            .byte $C6,$01,$33,$61,$01,$39,$AC,$01,$40,$BC,$01,$44,$95,$01,$44,$95
            .byte $01,$4C,$FB,$01,$33,$61,$04,$33,$61,$04,$33,$61,$04,$06,$6C,$08
            .byte $19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06
            .byte $6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0
            .byte $08,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04
            .byte $19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$CD,$85,$01,$00,$00,$01,$CD
            .byte $85,$01,$00,$00,$01,$CD,$85,$01,$00,$00,$01,$CD,$85,$01,$00,$00
            .byte $01,$66,$C2,$01,$00,$00,$01,$66,$C2,$01,$00,$00,$01,$66,$C2,$02
            .byte $66,$C2,$02,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06
            .byte $6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00
            .byte $03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$81,$78,$01
            .byte $00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$33
            .byte $61,$04,$33,$61,$04,$33,$61,$04,$33,$61,$04,$0C,$D8,$01,$0E,$6B
            .byte $01,$10,$2F,$01,$11,$25,$01,$13,$3E,$01,$15,$9A,$01,$16,$E3,$01
            .byte $19,$B0,$01,$1C,$D6,$01,$20,$5E,$01,$22,$4A,$01,$26,$7D,$01,$2B
            .byte $34,$01,$2D,$C6,$01,$33,$61,$01,$39,$AC,$01,$40,$BC,$01,$44,$95
            .byte $01,$4C,$FB,$01,$56,$69,$01,$5B,$8C,$01,$66,$C2,$01,$73,$58,$01
            .byte $81,$78,$01,$44,$95,$01,$4C,$FB,$01,$56,$69,$01,$5B,$8C,$01,$66
            .byte $C2,$01,$73,$58,$01,$81,$78,$01,$89,$2B,$01,$06,$6C,$08,$33,$61
            .byte $08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$89,$2B,$01
            .byte $81,$78,$01,$73,$58,$01,$66,$C2,$01,$5B,$8C,$01,$56,$69,$01,$4C
            .byte $FB,$01,$44,$95,$01,$40,$BC,$01,$39,$AC,$01,$33,$61,$01,$2D,$C6
            .byte $01,$2B,$34,$01,$26,$7D,$01,$22,$4A,$01,$20,$5E,$01,$1C,$D6,$01
            .byte $19,$B0,$01,$16,$E3,$01,$15,$9A,$01,$13,$3E,$01,$11,$25,$01,$10
            .byte $2F,$01,$0E,$6B,$01,$0C,$D8,$01,$0B,$71,$01,$0A,$CD,$01,$09,$9F
            .byte $01,$08,$92,$01,$10,$2F,$01,$0E,$6B,$01,$0C,$D8,$01,$06,$6C,$08
            .byte $33,$61,$04,$33,$61,$08,$33,$61,$04,$33,$61,$08,$06,$6C,$08,$19
            .byte $B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C
            .byte $08,$19,$B0,$08,$33,$61,$04,$33,$61,$04,$33,$61,$04,$33,$61,$04
            .byte $06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19
            .byte $B0,$08,$06,$6C,$08,$19,$B0,$08,$33,$61,$04,$33,$61,$04,$33,$61
            .byte $04,$33,$61,$04,$06,$6C,$08,$19,$B0,$08,$81,$78,$01,$00,$00,$03
            .byte $06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08,$33,$61,$04,$33
            .byte $61,$04,$33,$61,$04,$33,$61,$04,$06,$6C,$08,$19,$B0,$08,$81,$78
            .byte $01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$08,$19,$B0,$08
            .byte $33,$61,$04,$33,$61,$04,$33,$61,$04,$33,$61,$04,$06,$6C,$08,$19
            .byte $B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C
            .byte $08,$19,$B0,$08,$33,$61,$04,$33,$61,$04,$33,$61,$04,$33,$61,$04
            .byte $06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06
            .byte $6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78
            .byte $01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02
            .byte $19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06
            .byte $6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C
            .byte $04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01
            .byte $00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19
            .byte $B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C
            .byte $06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04
            .byte $19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00
            .byte $00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0
            .byte $08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06
            .byte $00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19
            .byte $B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00
            .byte $03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08
            .byte $81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00
            .byte $00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0
            .byte $08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03
            .byte $06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81
            .byte $78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00
            .byte $02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08
            .byte $06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06
            .byte $6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78
            .byte $01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02
            .byte $19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06
            .byte $6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C
            .byte $04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01
            .byte $00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19
            .byte $B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C
            .byte $06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04
            .byte $19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00
            .byte $00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0
            .byte $08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06
            .byte $00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19
            .byte $B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00
            .byte $03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08
            .byte $81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0,$08,$06,$6C,$06,$00
            .byte $00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03,$06,$6C,$04,$19,$B0
            .byte $08,$06,$6C,$06,$00,$00,$02,$19,$B0,$08,$81,$78,$01,$00,$00,$03
            .byte $06,$6C,$04,$19,$B0,$08,$00,$00,$63,$00,$00,$40,$03,$9A,$04,$03
            .byte $9A,$04,$03,$9A,$04,$04,$49,$08,$03,$9A,$08,$03,$9A,$04,$04,$0B
            .byte $04,$04,$0B,$04,$04,$0B,$04,$02,$B3,$08,$04,$0B,$04,$04,$CF,$04
            .byte $04,$0B,$04,$04,$49,$04,$04,$49,$04,$04,$49,$04,$02,$B3,$08,$04
            .byte $49,$08,$04,$49,$04,$18,$3F,$08,$18,$3F,$08,$04,$CF,$04,$04,$CF
            .byte $04,$04,$CF,$04,$04,$CF,$04,$03,$9A,$04,$03,$9A,$04,$03,$9A,$04
            .byte $04,$49,$08,$03,$9A,$08,$03,$9A,$04,$04,$0B,$04,$04,$0B,$04,$04
            .byte $0B,$04,$02,$B3,$08,$04,$0B,$04,$04,$CF,$04,$04,$0B,$04,$04,$49
            .byte $04,$04,$49,$04,$04,$49,$04,$02,$B3,$08,$04,$49,$08,$04,$49,$04
            .byte $03,$9A,$08,$03,$9A,$08,$03,$9A,$04,$03,$9A,$04,$03,$9A,$04,$03
            .byte $9A,$04,$07,$35,$09,$00,$00,$01,$07,$35,$01,$00,$00,$01,$07,$35
            .byte $01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01
            .byte $08,$92,$01,$00,$00,$01,$07,$35,$04,$05,$66,$04,$07,$35,$04,$06
            .byte $6C,$09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01,$00,$00
            .byte $01,$06,$6C,$01,$00,$00,$01,$09,$9F,$01,$00,$00,$01,$09,$9F,$01
            .byte $00,$00,$01,$08,$17,$04,$06,$6C,$04,$06,$6C,$04,$06,$6C,$09,$00
            .byte $00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C
            .byte $01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01
            .byte $06,$6C,$04,$05,$66,$04,$06,$6C,$04,$09,$9F,$09,$00,$00,$01,$07
            .byte $35,$01,$00,$00,$01,$06,$0F,$01,$00,$00,$01,$04,$CF,$01,$00,$00
            .byte $01,$06,$0F,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$09,$9F,$04
            .byte $07,$35,$04,$09,$9F,$04,$07,$35,$09,$00,$00,$01,$07,$35,$01,$00
            .byte $00,$01,$07,$35,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$08,$92
            .byte $01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$07,$35,$04,$05,$66,$04
            .byte $07,$35,$04,$06,$6C,$09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06
            .byte $6C,$01,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$09,$9F,$01,$00,$00
            .byte $01,$09,$9F,$01,$00,$00,$01,$08,$17,$04,$06,$6C,$04,$06,$6C,$04
            .byte $06,$6C,$09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01,$00
            .byte $00,$01,$06,$6C,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$08,$92
            .byte $01,$00,$00,$01,$06,$6C,$04,$05,$66,$04,$06,$6C,$04,$09,$9F,$09
            .byte $00,$00,$01,$07,$35,$01,$00,$00,$01,$06,$0F,$01,$00,$00,$01,$04
            .byte $CF,$01,$00,$00,$01,$06,$0F,$01,$00,$00,$01,$07,$35,$01,$00,$00
            .byte $01,$09,$9F,$04,$07,$35,$04,$09,$9F,$04,$07,$35,$09,$00,$00,$01
            .byte $07,$35,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$07,$35,$01,$00
            .byte $00,$01,$08,$92,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$07,$35
            .byte $04,$05,$66,$04,$07,$35,$04,$07,$35,$08,$22,$4A,$08,$08,$92,$01
            .byte $00,$00,$01,$08,$92,$01,$00,$00,$01,$07,$35,$04,$05,$66,$04,$07
            .byte $35,$04,$07,$35,$09,$00,$00,$01,$07,$35,$01,$00,$00,$01,$07,$35
            .byte $01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01
            .byte $08,$92,$01,$00,$00,$01,$07,$35,$04,$05,$66,$04,$07,$35,$04,$07
            .byte $35,$08,$22,$4A,$04,$22,$4A,$04,$00,$00,$04,$22,$4A,$04,$22,$4A
            .byte $08,$07,$35,$09,$00,$00,$01,$07,$35,$01,$00,$00,$01,$07,$35,$01
            .byte $00,$00,$01,$07,$35,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$08
            .byte $92,$01,$00,$00,$01,$07,$35,$04,$05,$66,$04,$07,$35,$04,$06,$6C
            .byte $09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01,$00,$00,$01
            .byte $06,$6C,$01,$00,$00,$01,$09,$9F,$01,$00,$00,$01,$09,$9F,$01,$00
            .byte $00,$01,$08,$17,$04,$06,$6C,$04,$06,$6C,$04,$06,$6C,$09,$00,$00
            .byte $01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01
            .byte $00,$00,$01,$08,$92,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$06
            .byte $6C,$04,$05,$66,$04,$06,$6C,$04,$09,$9F,$09,$00,$00,$01,$07,$35
            .byte $01,$00,$00,$01,$06,$0F,$01,$00,$00,$01,$04,$CF,$01,$00,$00,$01
            .byte $06,$0F,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$09,$9F,$04,$07
            .byte $35,$04,$09,$9F,$04,$07,$35,$09,$00,$00,$01,$07,$35,$01,$00,$00
            .byte $01,$07,$35,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$08,$92,$01
            .byte $00,$00,$01,$08,$92,$01,$00,$00,$01,$07,$35,$04,$05,$66,$04,$07
            .byte $35,$04,$06,$6C,$09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C
            .byte $01,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$09,$9F,$01,$00,$00,$01
            .byte $09,$9F,$01,$00,$00,$01,$08,$17,$04,$06,$6C,$04,$06,$6C,$04,$06
            .byte $6C,$09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01,$00,$00
            .byte $01,$06,$6C,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$08,$92,$01
            .byte $00,$00,$01,$06,$6C,$04,$05,$66,$04,$06,$6C,$04,$09,$9F,$09,$00
            .byte $00,$01,$07,$35,$01,$00,$00,$01,$06,$0F,$01,$00,$00,$01,$04,$CF
            .byte $01,$00,$00,$01,$06,$0F,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01
            .byte $09,$9F,$04,$07,$35,$04,$09,$9F,$04,$05,$B8,$09,$00,$00,$01,$05
            .byte $B8,$01,$00,$00,$01,$05,$B8,$01,$00,$00,$01,$05,$B8,$01,$00,$00
            .byte $01,$0B,$71,$01,$00,$00,$01,$0B,$71,$01,$00,$00,$01,$05,$B8,$04
            .byte $05,$B8,$04,$05,$B8,$04,$0F,$46,$0C,$08,$92,$04,$0A,$31,$04,$09
            .byte $9F,$04,$08,$92,$08,$06,$CD,$08,$06,$CD,$08,$00,$00,$04,$08,$92
            .byte $04,$07,$A3,$04,$06,$CD,$04,$07,$A3,$09,$00,$00,$01,$09,$9F,$01
            .byte $00,$00,$01,$09,$9F,$01,$00,$00,$01,$09,$9F,$01,$00,$00,$01,$07
            .byte $A3,$01,$00,$00,$01,$05,$B8,$01,$00,$00,$01,$07,$A3,$04,$09,$9F
            .byte $04,$07,$A3,$04,$05,$B8,$09,$00,$00,$01,$05,$B8,$01,$00,$00,$01
            .byte $05,$B8,$01,$00,$00,$01,$05,$B8,$01,$00,$00,$01,$0B,$71,$01,$00
            .byte $00,$01,$0B,$71,$01,$00,$00,$01,$05,$B8,$04,$05,$B8,$04,$05,$B8
            .byte $04,$0F,$46,$0C,$08,$92,$04,$0A,$31,$04,$09,$9F,$04,$08,$92,$08
            .byte $06,$CD,$08,$06,$CD,$08,$00,$00,$04,$08,$92,$04,$07,$A3,$04,$06
            .byte $CD,$04,$07,$A3,$09,$00,$00,$01,$09,$9F,$01,$00,$00,$01,$09,$9F
            .byte $01,$00,$00,$01,$09,$9F,$01,$00,$00,$01,$07,$A3,$01,$00,$00,$01
            .byte $05,$B8,$01,$00,$00,$01,$07,$A3,$04,$09,$9F,$04,$07,$A3,$04,$04
            .byte $8A,$04,$04,$8A,$04,$09,$15,$04,$04,$8A,$04,$05,$18,$04,$05,$18
            .byte $04,$0A,$31,$04,$05,$18,$04,$05,$B8,$04,$05,$B8,$04,$0B,$71,$04
            .byte $05,$B8,$04,$05,$B8,$04,$05,$B8,$04,$0B,$71,$04,$05,$B8,$04,$07
            .byte $A3,$0C,$07,$A3,$04,$0B,$71,$04,$07,$A3,$04,$0B,$71,$08,$08,$92
            .byte $0C,$08,$92,$04,$0C,$D8,$04,$08,$92,$04,$0C,$D8,$08,$04,$8A,$04
            .byte $04,$8A,$04,$09,$15,$04,$04,$8A,$04,$05,$18,$04,$05,$18,$04,$0A
            .byte $31,$04,$05,$18,$04,$05,$B8,$04,$05,$B8,$04,$0B,$71,$04,$05,$B8
            .byte $04,$05,$B8,$04,$05,$B8,$04,$0B,$71,$04,$05,$B8,$04,$07,$A3,$0C
            .byte $07,$A3,$04,$0B,$71,$04,$07,$A3,$04,$0B,$71,$08,$08,$92,$0C,$08
            .byte $92,$04,$0C,$D8,$04,$08,$92,$04,$0C,$D8,$08,$04,$8A,$04,$04,$8A
            .byte $04,$09,$15,$04,$04,$8A,$04,$05,$18,$04,$05,$18,$04,$0A,$31,$04
            .byte $05,$18,$04,$05,$B8,$04,$05,$B8,$04,$0B,$71,$04,$05,$B8,$04,$05
            .byte $B8,$04,$05,$B8,$04,$0B,$71,$04,$05,$B8,$04,$07,$A3,$0C,$07,$A3
            .byte $04,$0B,$71,$04,$07,$A3,$04,$0B,$71,$08,$08,$92,$0C,$08,$92,$04
            .byte $0C,$D8,$04,$08,$92,$04,$0C,$D8,$08,$04,$8A,$04,$04,$8A,$04,$09
            .byte $15,$04,$04,$8A,$04,$05,$18,$04,$05,$18,$04,$0A,$31,$04,$05,$18
            .byte $04,$05,$B8,$04,$05,$B8,$04,$0B,$71,$04,$05,$B8,$04,$05,$B8,$04
            .byte $05,$B8,$04,$0B,$71,$04,$05,$B8,$04,$07,$A3,$0C,$07,$A3,$04,$0B
            .byte $71,$04,$07,$A3,$04,$0B,$71,$08,$08,$92,$0C,$08,$92,$04,$0C,$D8
            .byte $04,$08,$92,$04,$0C,$D8,$08,$05,$B8,$20,$05,$B8,$14,$04,$49,$04
            .byte $05,$18,$04,$04,$CF,$04,$05,$B8,$20,$07,$35,$14,$05,$66,$04,$06
            .byte $6C,$04,$06,$CD,$04,$07,$35,$09,$00,$00,$01,$07,$35,$01,$00,$00
            .byte $01,$07,$35,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$08,$92,$01
            .byte $00,$00,$01,$08,$92,$01,$00,$00,$01,$07,$35,$04,$05,$66,$04,$07
            .byte $35,$04,$06,$6C,$09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C
            .byte $01,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$09,$9F,$01,$00,$00,$01
            .byte $09,$9F,$01,$00,$00,$01,$08,$17,$04,$06,$6C,$04,$06,$6C,$04,$06
            .byte $6C,$09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01,$00,$00
            .byte $01,$06,$6C,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$08,$92,$01
            .byte $00,$00,$01,$06,$6C,$04,$05,$66,$04,$06,$6C,$04,$09,$9F,$09,$00
            .byte $00,$01,$07,$35,$01,$00,$00,$01,$06,$0F,$01,$00,$00,$01,$04,$CF
            .byte $01,$00,$00,$01,$06,$0F,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01
            .byte $09,$9F,$04,$07,$35,$04,$09,$9F,$04,$07,$35,$09,$00,$00,$01,$07
            .byte $35,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$07,$35,$01,$00,$00
            .byte $01,$08,$92,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$07,$35,$04
            .byte $05,$66,$04,$07,$35,$04,$06,$6C,$09,$00,$00,$01,$06,$6C,$01,$00
            .byte $00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$09,$9F
            .byte $01,$00,$00,$01,$09,$9F,$01,$00,$00,$01,$08,$17,$04,$06,$6C,$04
            .byte $06,$6C,$04,$06,$6C,$09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06
            .byte $6C,$01,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$08,$92,$01,$00,$00
            .byte $01,$08,$92,$01,$00,$00,$01,$06,$6C,$04,$05,$66,$04,$06,$6C,$04
            .byte $09,$9F,$09,$00,$00,$01,$07,$35,$01,$00,$00,$01,$06,$0F,$01,$00
            .byte $00,$01,$04,$CF,$01,$00,$00,$01,$06,$0F,$01,$00,$00,$01,$07,$35
            .byte $01,$00,$00,$01,$09,$9F,$04,$07,$35,$04,$09,$9F,$04,$07,$35,$09
            .byte $00,$00,$01,$07,$35,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$07
            .byte $35,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$08,$92,$01,$00,$00
            .byte $01,$07,$35,$04,$05,$66,$04,$07,$35,$04,$07,$35,$08,$22,$4A,$08
            .byte $08,$92,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$07,$35,$04,$05
            .byte $66,$04,$07,$35,$04,$07,$35,$09,$00,$00,$01,$07,$35,$01,$00,$00
            .byte $01,$07,$35,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$08,$92,$01
            .byte $00,$00,$01,$08,$92,$01,$00,$00,$01,$07,$35,$04,$05,$66,$04,$07
            .byte $35,$04,$07,$35,$08,$22,$4A,$04,$22,$4A,$04,$00,$00,$04,$22,$4A
            .byte $04,$22,$4A,$08,$07,$35,$09,$00,$00,$01,$07,$35,$01,$00,$00,$01
            .byte $07,$35,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$08,$92,$01,$00
            .byte $00,$01,$08,$92,$01,$00,$00,$01,$07,$35,$04,$05,$66,$04,$07,$35
            .byte $04,$06,$6C,$09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01
            .byte $00,$00,$01,$06,$6C,$01,$00,$00,$01,$09,$9F,$01,$00,$00,$01,$09
            .byte $9F,$01,$00,$00,$01,$08,$17,$04,$06,$6C,$04,$06,$6C,$04,$06,$6C
            .byte $09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01,$00,$00,$01
            .byte $06,$6C,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$08,$92,$01,$00
            .byte $00,$01,$06,$6C,$04,$05,$66,$04,$06,$6C,$04,$09,$9F,$09,$00,$00
            .byte $01,$07,$35,$01,$00,$00,$01,$06,$0F,$01,$00,$00,$01,$04,$CF,$01
            .byte $00,$00,$01,$06,$0F,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$09
            .byte $9F,$04,$07,$35,$04,$09,$9F,$04,$07,$35,$09,$00,$00,$01,$07,$35
            .byte $01,$00,$00,$01,$07,$35,$01,$00,$00,$01,$07,$35,$01,$00,$00,$01
            .byte $08,$92,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01,$07,$35,$04,$05
            .byte $66,$04,$07,$35,$04,$06,$6C,$09,$00,$00,$01,$06,$6C,$01,$00,$00
            .byte $01,$06,$6C,$01,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$09,$9F,$01
            .byte $00,$00,$01,$09,$9F,$01,$00,$00,$01,$08,$17,$04,$06,$6C,$04,$06
            .byte $6C,$04,$06,$6C,$09,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$06,$6C
            .byte $01,$00,$00,$01,$06,$6C,$01,$00,$00,$01,$08,$92,$01,$00,$00,$01
            .byte $08,$92,$01,$00,$00,$01,$06,$6C,$04,$05,$66,$04,$06,$6C,$04,$09
            .byte $9F,$09,$00,$00,$01,$07,$35,$01,$00,$00,$01,$06,$0F,$01,$00,$00
            .byte $01,$04,$CF,$01,$00,$00,$01,$06,$0F,$01,$00,$00,$01,$07,$35,$01
            .byte $00,$00,$01,$09,$9F,$04,$07,$35,$04,$09,$9F,$04,$05,$B8,$09,$00
            .byte $00,$01,$05,$B8,$01,$00,$00,$01,$05,$B8,$01,$00,$00,$01,$05,$B8
            .byte $01,$00,$00,$01,$0B,$71,$01,$00,$00,$01,$0B,$71,$01,$00,$00,$01
            .byte $05,$B8,$04,$05,$B8,$04,$05,$B8,$04,$0F,$46,$0C,$08,$92,$04,$0A
            .byte $31,$04,$09,$9F,$04,$08,$92,$08,$06,$CD,$08,$06,$CD,$08,$00,$00
            .byte $04,$08,$92,$04,$07,$A3,$04,$06,$CD,$04,$07,$A3,$09,$00,$00,$01
            .byte $09,$9F,$01,$00,$00,$01,$09,$9F,$01,$00,$00,$01,$09,$9F,$01,$00
            .byte $00,$01,$07,$A3,$01,$00,$00,$01,$05,$B8,$01,$00,$00,$01,$07,$A3
            .byte $04,$09,$9F,$04,$07,$A3,$04,$05,$B8,$09,$00,$00,$01,$05,$B8,$01
            .byte $00,$00,$01,$05,$B8,$01,$00,$00,$01,$05,$B8,$01,$00,$00,$01,$0B
            .byte $71,$01,$00,$00,$01,$0B,$71,$01,$00,$00,$01,$05,$B8,$04,$05,$B8
            .byte $04,$05,$B8,$04,$0F,$46,$0C,$08,$92,$04,$0A,$31,$04,$09,$9F,$04
            .byte $08,$92,$08,$06,$CD,$08,$06,$CD,$08,$00,$00,$04,$08,$92,$04,$07
            .byte $A3,$04,$06,$CD,$04,$07,$A3,$09,$00,$00,$01,$09,$9F,$01,$00,$00
            .byte $01,$09,$9F,$01,$00,$00,$01,$09,$9F,$01,$00,$00,$01,$07,$A3,$01
            .byte $00,$00,$01,$05,$B8,$01,$00,$00,$01,$07,$A3,$04,$09,$9F,$04,$07
            .byte $A3,$04,$04,$8A,$04,$04,$8A,$04,$09,$15,$04,$04,$8A,$04,$05,$18
            .byte $04,$05,$18,$04,$0A,$31,$04,$05,$18,$04,$05,$B8,$04,$05,$B8,$04
            .byte $0B,$71,$04,$05,$B8,$04,$05,$B8,$04,$05,$B8,$04,$0B,$71,$04,$05
            .byte $B8,$04,$07,$A3,$0C,$07,$A3,$04,$0B,$71,$04,$07,$A3,$04,$0B,$71
            .byte $08,$08,$92,$0C,$08,$92,$04,$0C,$D8,$04,$08,$92,$04,$0C,$D8,$08
            .byte $04,$8A,$04,$04,$8A,$04,$09,$15,$04,$04,$8A,$04,$05,$18,$04,$05
            .byte $18,$04,$0A,$31,$04,$05,$18,$04,$05,$B8,$04,$05,$B8,$04,$0B,$71
            .byte $04,$05,$B8,$04,$05,$B8,$04,$05,$B8,$04,$0B,$71,$04,$05,$B8,$04
            .byte $07,$A3,$0C,$07,$A3,$04,$0B,$71,$04,$07,$A3,$04,$0B,$71,$08,$08
            .byte $92,$0C,$08,$92,$04,$0C,$D8,$04,$08,$92,$04,$0C,$D8,$08,$04,$8A
            .byte $04,$04,$8A,$04,$09,$15,$04,$04,$8A,$04,$05,$18,$04,$05,$18,$04
            .byte $0A,$31,$04,$05,$18,$04,$05,$B8,$04,$05,$B8,$04,$0B,$71,$04,$05
            .byte $B8,$04,$05,$B8,$04,$05,$B8,$04,$0B,$71,$04,$05,$B8,$04,$07,$A3
            .byte $0C,$07,$A3,$04,$0B,$71,$04,$07,$A3,$04,$0B,$71,$08,$08,$92,$0C
            .byte $08,$92,$04,$0C,$D8,$04,$08,$92,$04,$0C,$D8,$08,$04,$8A,$04,$04
            .byte $8A,$04,$09,$15,$04,$04,$8A,$04,$05,$18,$04,$05,$18,$04,$0A,$31
            .byte $04,$05,$18,$04,$05,$B8,$04,$05,$B8,$04,$0B,$71,$04,$05,$B8,$04
            .byte $05,$B8,$04,$05,$B8,$04,$0B,$71,$04,$05,$B8,$04,$07,$A3,$0C,$07
            .byte $A3,$04,$0B,$71,$04,$07,$A3,$04,$0B,$71,$08,$08,$92,$0C,$08,$92
            .byte $04,$0C,$D8,$04,$08,$92,$04,$0C,$D8,$08,$04,$8A,$04,$04,$8A,$04
            .byte $09,$15,$04,$04,$8A,$04,$05,$18,$04,$05,$18,$04,$05,$66,$04,$05
            .byte $66,$04,$05,$B8,$04,$05,$B8,$04,$05,$18,$04,$04,$49,$04,$05,$B8
            .byte $04,$05,$B8,$04,$05,$18,$04,$05,$B8,$04,$04,$8A,$04,$04,$8A,$04
            .byte $09,$15,$04,$04,$8A,$04,$05,$18,$04,$05,$18,$04,$05,$66,$04,$05
            .byte $66,$04,$05,$B8,$04,$05,$B8,$04,$05,$18,$04,$04,$49,$04,$05,$B8
            .byte $04,$05,$B8,$04,$05,$18,$04,$05,$B8,$04,$04,$8A,$04,$04,$8A,$04
            .byte $09,$15,$04,$04,$8A,$04,$05,$18,$04,$05,$18,$04,$05,$66,$04,$05
            .byte $66,$04,$05,$B8,$04,$05,$B8,$04,$05,$18,$04,$04,$49,$04,$05,$B8
            .byte $04,$05,$B8,$04,$05,$18,$04,$05,$B8,$04,$04,$8A,$04,$04,$8A,$04
            .byte $09,$15,$04,$04,$8A,$04,$05,$18,$04,$05,$18,$04,$05,$66,$04,$05
            .byte $66,$04,$05,$B8,$04,$05,$B8,$04,$05,$18,$04,$04,$49,$04,$05,$B8
            .byte $04,$05,$B8,$04,$05,$18,$04,$05,$B8,$04,$00,$00,$63,$00,$00,$40
            .byte $1C,$D6,$10,$00,$00,$04,$1C,$D6,$08,$1C,$D6,$04,$20,$5E,$10,$00
            .byte $00,$04,$20,$5E,$08,$20,$5E,$04,$22,$4A,$10,$00,$00,$04,$22,$4A
            .byte $08,$22,$4A,$04,$26,$7D,$07,$00,$00,$01,$26,$7D,$07,$00,$00,$11
            .byte $1C,$D6,$10,$00,$00,$04,$1C,$D6,$08,$1C,$D6,$04,$20,$5E,$10,$00
            .byte $00,$04,$20,$5E,$08,$20,$5E,$04,$22,$4A,$10,$00,$00,$04,$22,$4A
            .byte $08,$22,$4A,$04,$26,$7D,$07,$00,$00,$01,$26,$7D,$07,$00,$00,$01
            .byte $22,$4A,$04,$26,$7D,$04,$22,$4A,$04,$26,$7D,$04,$00,$00,$10,$1C
            .byte $D6,$04,$1C,$D6,$0C,$19,$B0,$10,$00,$00,$04,$19,$B0,$04,$15,$9A
            .byte $08,$19,$B0,$10,$1C,$D6,$04,$20,$5E,$0C,$1C,$D6,$10,$00,$00,$10
            .byte $00,$00,$10,$1C,$D6,$04,$1C,$D6,$0C,$19,$B0,$10,$00,$00,$04,$19
            .byte $B0,$04,$15,$9A,$08,$19,$B0,$10,$1C,$D6,$04,$20,$5E,$0C,$1C,$D6
            .byte $10,$00,$00,$10,$00,$00,$10,$00,$00,$10,$00,$00,$08,$19,$B0,$08
            .byte $00,$00,$10,$00,$00,$10,$00,$00,$10,$07,$35,$08,$15,$9A,$03,$00
            .byte $00,$01,$15,$9A,$04,$00,$00,$04,$15,$9A,$03,$00,$00,$01,$15,$9A
            .byte $08,$15,$9A,$08,$15,$9A,$08,$00,$00,$04,$15,$9A,$04,$1C,$D6,$04
            .byte $20,$5E,$14,$00,$00,$18,$20,$5E,$04,$1C,$D6,$04,$20,$5E,$0C,$1C
            .byte $D6,$04,$20,$5E,$08,$22,$4A,$08,$20,$5E,$04,$1C,$D6,$0C,$15,$9A
            .byte $08,$15,$9A,$08,$00,$00,$04,$15,$9A,$04,$1C,$D6,$04,$20,$5E,$14
            .byte $00,$00,$18,$22,$4A,$04,$1C,$D6,$04,$22,$4A,$0C,$1C,$D6,$04,$26
            .byte $7D,$08,$2B,$34,$08,$26,$7D,$04,$22,$4A,$04,$20,$5E,$04,$0E,$6B
            .byte $24,$0F,$46,$1C,$22,$4A,$04,$28,$C7,$04,$22,$4A,$08,$28,$C7,$10
            .byte $22,$4A,$04,$28,$C7,$08,$2D,$C6,$08,$28,$C7,$04,$26,$7D,$04,$22
            .byte $4A,$04,$26,$7D,$04,$0E,$6B,$20,$0F,$46,$1C,$22,$4A,$04,$28,$C7
            .byte $04,$22,$4A,$08,$28,$C7,$14,$00,$00,$08,$22,$4A,$08,$28,$C7,$08
            .byte $2D,$C6,$08,$2D,$C6,$10,$2D,$C6,$04,$28,$C7,$04,$22,$4A,$04,$28
            .byte $C7,$08,$2D,$C6,$18,$22,$4A,$04,$28,$C7,$04,$2D,$C6,$08,$2D,$C6
            .byte $10,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$08,$33,$61,$04,$2D,$C6,$04
            .byte $28,$C7,$08,$2D,$C6,$10,$2D,$C6,$04,$28,$C7,$04,$22,$4A,$04,$28
            .byte $C7,$08,$2D,$C6,$18,$22,$4A,$04,$28,$C7,$04,$2D,$C6,$08,$2D,$C6
            .byte $10,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$08,$33,$61,$04,$2D,$C6,$04
            .byte $28,$C7,$08,$00,$00,$08,$2D,$C6,$08,$2D,$C6,$04,$28,$C7,$04,$22
            .byte $4A,$04,$28,$C7,$08,$2D,$C6,$18,$22,$4A,$04,$28,$C7,$04,$2D,$C6
            .byte $08,$2D,$C6,$10,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$08,$33,$61,$04
            .byte $2D,$C6,$04,$28,$C7,$08,$00,$00,$08,$2D,$C6,$08,$2D,$C6,$04,$28
            .byte $C7,$04,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$1C,$00,$00,$40,$00,$00
            .byte $40,$00,$00,$40,$00,$00,$10,$1C,$D6,$04,$1C,$D6,$0C,$19,$B0,$10
            .byte $00,$00,$04,$19,$B0,$04,$15,$9A,$08,$19,$B0,$10,$1C,$D6,$04,$20
            .byte $5E,$0C,$1C,$D6,$10,$00,$00,$10,$00,$00,$10,$1C,$D6,$04,$1C,$D6
            .byte $0C,$19,$B0,$10,$00,$00,$04,$19,$B0,$04,$15,$9A,$08,$19,$B0,$10
            .byte $1C,$D6,$04,$20,$5E,$0C,$1C,$D6,$10,$00,$00,$10,$00,$00,$10,$00
            .byte $00,$10,$00,$00,$08,$19,$B0,$08,$00,$00,$10,$00,$00,$10,$00,$00
            .byte $10,$07,$35,$08,$15,$9A,$03,$00,$00,$01,$15,$9A,$04,$00,$00,$04
            .byte $15,$9A,$03,$00,$00,$01,$15,$9A,$08,$15,$9A,$08,$15,$9A,$08,$00
            .byte $00,$04,$15,$9A,$04,$1C,$D6,$04,$20,$5E,$14,$00,$00,$18,$20,$5E
            .byte $04,$1C,$D6,$04,$20,$5E,$0C,$1C,$D6,$04,$20,$5E,$08,$22,$4A,$08
            .byte $20,$5E,$04,$1C,$D6,$0C,$15,$9A,$08,$15,$9A,$08,$00,$00,$04,$15
            .byte $9A,$04,$1C,$D6,$04,$20,$5E,$14,$00,$00,$18,$22,$4A,$04,$1C,$D6
            .byte $04,$22,$4A,$0C,$1C,$D6,$04,$26,$7D,$08,$2B,$34,$08,$26,$7D,$04
            .byte $22,$4A,$04,$20,$5E,$04,$0E,$6B,$24,$0F,$46,$1C,$22,$4A,$04,$28
            .byte $C7,$04,$22,$4A,$08,$28,$C7,$10,$22,$4A,$04,$28,$C7,$08,$2D,$C6
            .byte $08,$28,$C7,$04,$26,$7D,$04,$22,$4A,$04,$26,$7D,$04,$0E,$6B,$20
            .byte $0F,$46,$1C,$22,$4A,$04,$28,$C7,$04,$22,$4A,$08,$28,$C7,$14,$00
            .byte $00,$08,$22,$4A,$08,$28,$C7,$08,$2D,$C6,$08,$2D,$C6,$10,$2D,$C6
            .byte $04,$28,$C7,$04,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$18,$22,$4A,$04
            .byte $28,$C7,$04,$2D,$C6,$08,$2D,$C6,$10,$22,$4A,$04,$28,$C7,$08,$2D
            .byte $C6,$08,$33,$61,$04,$2D,$C6,$04,$28,$C7,$08,$2D,$C6,$10,$2D,$C6
            .byte $04,$28,$C7,$04,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$18,$22,$4A,$04
            .byte $28,$C7,$04,$2D,$C6,$08,$2D,$C6,$10,$22,$4A,$04,$28,$C7,$08,$2D
            .byte $C6,$08,$33,$61,$04,$2D,$C6,$04,$28,$C7,$08,$00,$00,$08,$2D,$C6
            .byte $08,$2D,$C6,$04,$28,$C7,$04,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$18
            .byte $22,$4A,$04,$28,$C7,$04,$2D,$C6,$08,$2D,$C6,$10,$22,$4A,$04,$28
            .byte $C7,$08,$2D,$C6,$08,$33,$61,$04,$2D,$C6,$04,$28,$C7,$08,$00,$00
            .byte $08,$2D,$C6,$08,$2D,$C6,$04,$28,$C7,$04,$22,$4A,$04,$28,$C7,$08
            .byte $2D,$C6,$18,$22,$4A,$04,$28,$C7,$04,$2D,$C6,$08,$2D,$C6,$1C,$33
            .byte $61,$04,$33,$61,$04,$33,$61,$08,$2D,$C6,$04,$28,$C7,$04,$2D,$C6
            .byte $20,$00,$00,$04,$16,$E3,$04,$14,$63,$04,$11,$25,$04,$00,$00,$04
            .byte $16,$E3,$04,$14,$63,$04,$11,$25,$04,$00,$00,$20,$00,$00,$04,$16
            .byte $E3,$04,$14,$63,$04,$11,$25,$04,$00,$00,$04,$16,$E3,$04,$14,$63
            .byte $04,$11,$25,$04,$00,$00,$20,$00,$00,$04,$16,$E3,$04,$14,$63,$04
            .byte $11,$25,$04,$00,$00,$04,$16,$E3,$04,$14,$63,$04,$11,$25,$04,$00
            .byte $00,$20,$00,$00,$04,$16,$E3,$04,$14,$63,$04,$11,$25,$04,$00,$00
            .byte $04,$16,$E3,$04,$14,$63,$04,$11,$25,$04,$00,$00,$63,$10,$2D,$C6
            .byte $04,$28,$C7,$04,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$18,$22,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$1C,$D6,$04,$1C,$D6
            .byte $0C,$19,$B0,$10,$00,$00,$04,$19,$B0,$04,$15,$9A,$08,$19,$B0,$10
            .byte $1C,$D6,$04,$20,$5E,$0C,$1C,$D6,$10,$00,$00,$10,$00,$00,$10,$00
            .byte $00,$10,$00,$00,$08,$19,$B0,$08,$00,$00,$10,$00,$00,$10,$00,$00
            .byte $10,$07,$35,$08,$15,$9A,$03,$00,$00,$01,$15,$9A,$04,$00,$00,$04
            .byte $15,$9A,$03,$00,$00,$01,$15,$9A,$08,$15,$9A,$08,$15,$9A,$08,$00
            .byte $00,$04,$15,$9A,$04,$1C,$D6,$04,$20,$5E,$14,$00,$00,$18,$20,$5E
            .byte $04,$1C,$D6,$04,$20,$5E,$0C,$1C,$D6,$04,$20,$5E,$08,$22,$4A,$08
            .byte $20,$5E,$04,$1C,$D6,$0C,$15,$9A,$08,$15,$9A,$08,$00,$00,$04,$15
            .byte $9A,$04,$1C,$D6,$04,$20,$5E,$14,$00,$00,$18,$22,$4A,$04,$1C,$D6
            .byte $04,$22,$4A,$0C,$1C,$D6,$04,$26,$7D,$08,$2B,$34,$08,$26,$7D,$04
            .byte $22,$4A,$04,$20,$5E,$04,$0E,$6B,$24,$0F,$46,$1C,$22,$4A,$04,$28
            .byte $C7,$04,$22,$4A,$08,$28,$C7,$10,$22,$4A,$04,$28,$C7,$08,$2D,$C6
            .byte $08,$28,$C7,$04,$26,$7D,$04,$22,$4A,$04,$26,$7D,$04,$0E,$6B,$20
            .byte $0F,$46,$1C,$22,$4A,$04,$28,$C7,$04,$22

* = $FCE2

l_FCE2
                    LSR A                           ; (FCE2) Logical Shift Right Accumulator
                    PHP                             ; (FCE3) Push Processor Status (To Stack)
                    PLP                             ; (FCE4) Pull Processor Status (From Stack)

* = $FCE6
            .byte $14,$00,$00,$08,$22,$4A,$08,$28,$C7,$08,$2D,$C6,$08,$2D,$C6,$10
            .byte $2D,$C6,$04,$28,$C7,$04,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$18,$22
            .byte $4A,$04,$28,$C7,$04,$2D,$C6,$08,$2D,$C6,$10,$22,$4A,$04,$28,$C7
            .byte $08,$2D,$C6,$08,$33,$61,$04,$2D,$C6,$04,$28,$C7,$08,$2D,$C6,$10
            .byte $2D,$C6,$04,$28,$C7,$04,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$18,$22
            .byte $4A,$04,$28,$C7,$04,$2D,$C6,$08,$2D,$C6,$10,$22,$4A,$04,$28,$C7
            .byte $08,$2D,$C6,$08,$33,$61,$04,$2D,$C6,$04,$28,$C7,$08,$00,$00,$08
            .byte $2D,$C6,$08,$2D,$C6,$04,$28,$C7,$04,$22,$4A,$04,$28,$C7,$08,$2D
            .byte $C6,$18,$22,$4A,$04,$28,$C7,$04,$2D,$C6,$08,$2D,$C6,$10,$22,$4A
            .byte $04,$28,$C7,$08,$2D,$C6,$08,$33,$61,$04,$2D,$C6,$04,$28,$C7,$08
            .byte $00,$00,$08,$2D,$C6,$08,$2D,$C6,$04,$28,$C7,$04,$22,$4A,$04,$28
            .byte $C7,$08,$2D,$C6,$1C,$00,$00,$40,$00,$00,$40,$00,$00,$40,$00,$00
            .byte $10,$1C,$D6,$04,$1C,$D6,$0C,$19,$B0,$10,$00,$00,$04,$19,$B0,$04
            .byte $15,$9A,$08,$19,$B0,$10,$1C,$D6,$04,$20,$5E,$0C,$1C,$D6,$10,$00
            .byte $00,$10,$00,$00,$10,$1C,$D6,$04,$1C,$D6,$0C,$19,$B0,$10,$00,$00
            .byte $04,$19,$B0,$04,$15,$9A,$08,$19,$B0,$10,$1C,$D6,$04,$20,$5E,$0C
            .byte $1C,$D6,$10,$00,$00,$10,$00,$00,$10,$00,$00,$10,$00,$00,$08,$19
            .byte $B0,$08,$00,$00,$10,$00,$00,$10,$00,$00,$10,$07,$35,$08,$15,$9A
            .byte $03,$00,$00,$01,$15,$9A,$04,$00,$00,$04,$15,$9A,$03,$00,$00,$01
            .byte $15,$9A,$08,$15,$9A,$08,$15,$9A,$08,$00,$00,$04,$15,$9A,$04,$1C
            .byte $D6,$04,$20,$5E,$14,$00,$00,$18,$20,$5E,$04,$1C,$D6,$04,$20,$5E
            .byte $0C,$1C,$D6,$04,$20,$5E,$08,$22,$4A,$08,$20,$5E,$04,$1C,$D6,$0C
            .byte $15,$9A,$08,$15,$9A,$08,$00,$00,$04,$15,$9A,$04,$1C,$D6,$04,$20
            .byte $5E,$14,$00,$00,$18,$22,$4A,$04,$1C,$D6,$04,$22,$4A,$0C,$1C,$D6
            .byte $04,$26,$7D,$08,$2B,$34,$08,$26,$7D,$04,$22,$4A,$04,$20,$5E,$04
            .byte $0E,$6B,$24,$0F,$46,$1C,$22,$4A,$04,$28,$C7,$04,$22,$4A,$08,$28
            .byte $C7,$10,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$08,$28,$C7,$04,$26,$7D
            .byte $04,$22,$4A,$04,$26,$7D,$04,$0E,$6B,$20,$0F,$46,$1C,$22,$4A,$04
            .byte $28,$C7,$04,$22,$4A,$08,$28,$C7,$14,$00,$00,$08,$22,$4A,$08,$28
            .byte $C7,$08,$2D,$C6,$08,$2D,$C6,$10,$2D,$C6,$04,$28,$C7,$04,$22,$4A
            .byte $04,$28,$C7,$08,$2D,$C6,$18,$22,$4A,$04,$28,$C7,$04,$2D,$C6,$08
            .byte $2D,$C6,$10,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$08,$33,$61,$04,$2D
            .byte $C6,$04,$28,$C7,$08,$2D,$C6,$10,$2D,$C6,$04,$28,$C7,$04,$22,$4A
            .byte $04,$28,$C7,$08,$2D,$C6,$18,$22,$4A,$04,$28,$C7,$04,$2D,$C6,$08
            .byte $2D,$C6,$10,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$08,$33,$61,$04,$2D
            .byte $C6,$04,$28,$C7,$08,$00,$00,$08,$2D,$C6,$08,$2D,$C6,$04,$28,$C7
            .byte $04,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$18,$22,$4A,$04,$28,$C7,$04
            .byte $2D,$C6,$08,$2D,$C6,$10,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$08,$33
            .byte $61,$04,$2D,$C6,$04,$28,$C7,$08,$00,$00,$08,$2D,$C6,$08,$2D,$C6
            .byte $04,$28,$C7,$04,$22,$4A,$04,$28,$C7,$08,$2D,$C6,$18,$22,$4A,$04
            .byte $28,$C7,$04,$2D,$C6,$08,$2D,$C6,$1C,$33,$61,$04,$33,$61,$04,$33
            .byte $61,$08,$2D,$C6,$04,$28,$C7,$04,$2D,$C6,$20,$00,$00,$04,$16,$E3
            .byte $04,$14,$63,$04,$11,$25,$04,$00,$00,$04,$16,$E3,$04,$14,$63,$04
            .byte $11,$25,$04,$00,$00,$20,$00,$00,$04,$16,$E3,$04,$14,$63,$04,$11
            .byte $25,$04,$00,$00,$04,$16,$E3,$04,$14,$63,$04,$11,$25,$04,$00,$00
            .byte $20,$00,$00,$04,$16,$E3,$04,$14,$63,$04,$11,$25,$04,$00,$00,$04
            .byte $16,$E3,$04,$14,$63,$04,$11,$25,$04,$00,$00,$20,$00,$00,$04,$16
            .byte $E3,$04,$14,$63,$04,$11,$25,$04,$00,$00,$04,$16,$E3,$04,$14,$63
            .byte $04,$11,$25,$04,$00,$00,$63,$10,$2D,$C6,$04,$28,$C7,$04,$22,$4A
            .byte $04,$28,$C7,$08,$2D,$C6,$18,$22,$BF,$1A